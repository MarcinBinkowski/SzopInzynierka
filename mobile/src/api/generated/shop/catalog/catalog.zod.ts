/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * ShopDjango API
 * API for ShopDjango project
 * OpenAPI spec version: 1.0.0
 */
import {
  z as zod
} from 'zod';


/**
 * ViewSet for Category model with CRUD operations.
 */
export const catalogCategoriesListQueryParams = zod.object({
  "id": zod.coerce.number().optional(),
  "ordering": zod.coerce.string().optional().describe('Which field to use when ordering the results.'),
  "search": zod.coerce.string().optional().describe('A search term.')
})

export const catalogCategoriesListResponseNameMax = 100;
export const catalogCategoriesListResponseSlugMax = 100;

export const catalogCategoriesListResponseSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');


export const catalogCategoriesListResponseItem = zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogCategoriesListResponseNameMax).describe('Category name'),
  "slug": zod.string().max(catalogCategoriesListResponseSlugMax).regex(catalogCategoriesListResponseSlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Category description'),
  "is_active": zod.boolean().optional().describe('Whether this category is visible'),
  "active_product_count": zod.number(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Category model.')
export const catalogCategoriesListResponse = zod.array(catalogCategoriesListResponseItem)

/**
 * ViewSet for Category model with CRUD operations.
 */
export const catalogCategoriesCreateBodyNameMax = 100;
export const catalogCategoriesCreateBodySlugMax = 100;

export const catalogCategoriesCreateBodySlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');


export const catalogCategoriesCreateBody = zod.object({
  "name": zod.string().max(catalogCategoriesCreateBodyNameMax).describe('Category name'),
  "slug": zod.string().max(catalogCategoriesCreateBodySlugMax).regex(catalogCategoriesCreateBodySlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Category description'),
  "is_active": zod.boolean().optional().describe('Whether this category is visible')
}).describe('Serializer for Category model.')

/**
 * ViewSet for Category model with CRUD operations.
 */
export const catalogCategoriesRetrieveParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this category.')
})

export const catalogCategoriesRetrieveResponseNameMax = 100;
export const catalogCategoriesRetrieveResponseSlugMax = 100;

export const catalogCategoriesRetrieveResponseSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');


export const catalogCategoriesRetrieveResponse = zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogCategoriesRetrieveResponseNameMax).describe('Category name'),
  "slug": zod.string().max(catalogCategoriesRetrieveResponseSlugMax).regex(catalogCategoriesRetrieveResponseSlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Category description'),
  "is_active": zod.boolean().optional().describe('Whether this category is visible'),
  "active_product_count": zod.number(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Category model.')

/**
 * ViewSet for Category model with CRUD operations.
 */
export const catalogCategoriesUpdateParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this category.')
})

export const catalogCategoriesUpdateBodyNameMax = 100;
export const catalogCategoriesUpdateBodySlugMax = 100;

export const catalogCategoriesUpdateBodySlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');


export const catalogCategoriesUpdateBody = zod.object({
  "name": zod.string().max(catalogCategoriesUpdateBodyNameMax).describe('Category name'),
  "slug": zod.string().max(catalogCategoriesUpdateBodySlugMax).regex(catalogCategoriesUpdateBodySlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Category description'),
  "is_active": zod.boolean().optional().describe('Whether this category is visible')
}).describe('Serializer for Category model.')

export const catalogCategoriesUpdateResponseNameMax = 100;
export const catalogCategoriesUpdateResponseSlugMax = 100;

export const catalogCategoriesUpdateResponseSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');


export const catalogCategoriesUpdateResponse = zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogCategoriesUpdateResponseNameMax).describe('Category name'),
  "slug": zod.string().max(catalogCategoriesUpdateResponseSlugMax).regex(catalogCategoriesUpdateResponseSlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Category description'),
  "is_active": zod.boolean().optional().describe('Whether this category is visible'),
  "active_product_count": zod.number(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Category model.')

/**
 * ViewSet for Category model with CRUD operations.
 */
export const catalogCategoriesPartialUpdateParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this category.')
})

export const catalogCategoriesPartialUpdateBodyNameMax = 100;
export const catalogCategoriesPartialUpdateBodySlugMax = 100;

export const catalogCategoriesPartialUpdateBodySlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');


export const catalogCategoriesPartialUpdateBody = zod.object({
  "name": zod.string().max(catalogCategoriesPartialUpdateBodyNameMax).optional().describe('Category name'),
  "slug": zod.string().max(catalogCategoriesPartialUpdateBodySlugMax).regex(catalogCategoriesPartialUpdateBodySlugRegExp).optional().describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Category description'),
  "is_active": zod.boolean().optional().describe('Whether this category is visible')
}).describe('Serializer for Category model.')

export const catalogCategoriesPartialUpdateResponseNameMax = 100;
export const catalogCategoriesPartialUpdateResponseSlugMax = 100;

export const catalogCategoriesPartialUpdateResponseSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');


export const catalogCategoriesPartialUpdateResponse = zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogCategoriesPartialUpdateResponseNameMax).describe('Category name'),
  "slug": zod.string().max(catalogCategoriesPartialUpdateResponseSlugMax).regex(catalogCategoriesPartialUpdateResponseSlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Category description'),
  "is_active": zod.boolean().optional().describe('Whether this category is visible'),
  "active_product_count": zod.number(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Category model.')

/**
 * Handle deletion with foreign key constraint protection.
 */
export const catalogCategoriesDestroyParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this category.')
})

/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const catalogDeliveriesListQueryParams = zod.object({
  "id": zod.coerce.number().optional(),
  "ordering": zod.coerce.string().optional().describe('Which field to use when ordering the results.'),
  "page": zod.coerce.number().optional().describe('A page number within the paginated result set.'),
  "page_size": zod.coerce.number().optional().describe('Number of results to return per page.'),
  "search": zod.coerce.string().optional().describe('A search term.')
})

export const catalogDeliveriesListResponseResultsItemQuantityMax = 2147483647;
export const catalogDeliveriesListResponseResultsItemCostPerUnitRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');


export const catalogDeliveriesListResponse = zod.object({
  "count": zod.number(),
  "next": zod.url().nullish(),
  "previous": zod.url().nullish(),
  "results": zod.array(zod.object({
  "id": zod.number(),
  "supplier": zod.number().describe('Supplier who delivered the products'),
  "supplier_name": zod.string(),
  "product": zod.number().describe('Product that was delivered'),
  "product_name": zod.string(),
  "quantity": zod.number().min(1).max(catalogDeliveriesListResponseResultsItemQuantityMax).describe('Quantity of products delivered'),
  "delivery_date": zod.iso.datetime({}).describe('When the delivery was received'),
  "cost_per_unit": zod.regex(catalogDeliveriesListResponseResultsItemCostPerUnitRegExp).describe('Cost per unit for this delivery'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}))
})

/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const catalogDeliveriesCreateBodyQuantityMax = 2147483647;
export const catalogDeliveriesCreateBodyCostPerUnitRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');


export const catalogDeliveriesCreateBody = zod.object({
  "supplier": zod.number().describe('Supplier who delivered the products'),
  "product": zod.number().describe('Product that was delivered'),
  "quantity": zod.number().min(1).max(catalogDeliveriesCreateBodyQuantityMax).describe('Quantity of products delivered'),
  "delivery_date": zod.iso.datetime({}).describe('When the delivery was received'),
  "cost_per_unit": zod.regex(catalogDeliveriesCreateBodyCostPerUnitRegExp).describe('Cost per unit for this delivery')
})

/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const catalogDeliveriesRetrieveParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this Product Delivery.')
})

export const catalogDeliveriesRetrieveResponseQuantityMax = 2147483647;
export const catalogDeliveriesRetrieveResponseCostPerUnitRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');


export const catalogDeliveriesRetrieveResponse = zod.object({
  "id": zod.number(),
  "supplier": zod.number().describe('Supplier who delivered the products'),
  "supplier_name": zod.string(),
  "product": zod.number().describe('Product that was delivered'),
  "product_name": zod.string(),
  "quantity": zod.number().min(1).max(catalogDeliveriesRetrieveResponseQuantityMax).describe('Quantity of products delivered'),
  "delivery_date": zod.iso.datetime({}).describe('When the delivery was received'),
  "cost_per_unit": zod.regex(catalogDeliveriesRetrieveResponseCostPerUnitRegExp).describe('Cost per unit for this delivery'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
})

/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const catalogDeliveriesUpdateParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this Product Delivery.')
})

export const catalogDeliveriesUpdateBodyQuantityMax = 2147483647;
export const catalogDeliveriesUpdateBodyCostPerUnitRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');


export const catalogDeliveriesUpdateBody = zod.object({
  "supplier": zod.number().describe('Supplier who delivered the products'),
  "product": zod.number().describe('Product that was delivered'),
  "quantity": zod.number().min(1).max(catalogDeliveriesUpdateBodyQuantityMax).describe('Quantity of products delivered'),
  "delivery_date": zod.iso.datetime({}).describe('When the delivery was received'),
  "cost_per_unit": zod.regex(catalogDeliveriesUpdateBodyCostPerUnitRegExp).describe('Cost per unit for this delivery')
})

export const catalogDeliveriesUpdateResponseQuantityMax = 2147483647;
export const catalogDeliveriesUpdateResponseCostPerUnitRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');


export const catalogDeliveriesUpdateResponse = zod.object({
  "id": zod.number(),
  "supplier": zod.number().describe('Supplier who delivered the products'),
  "supplier_name": zod.string(),
  "product": zod.number().describe('Product that was delivered'),
  "product_name": zod.string(),
  "quantity": zod.number().min(1).max(catalogDeliveriesUpdateResponseQuantityMax).describe('Quantity of products delivered'),
  "delivery_date": zod.iso.datetime({}).describe('When the delivery was received'),
  "cost_per_unit": zod.regex(catalogDeliveriesUpdateResponseCostPerUnitRegExp).describe('Cost per unit for this delivery'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
})

/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const catalogDeliveriesPartialUpdateParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this Product Delivery.')
})

export const catalogDeliveriesPartialUpdateBodyQuantityMax = 2147483647;
export const catalogDeliveriesPartialUpdateBodyCostPerUnitRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');


export const catalogDeliveriesPartialUpdateBody = zod.object({
  "supplier": zod.number().optional().describe('Supplier who delivered the products'),
  "product": zod.number().optional().describe('Product that was delivered'),
  "quantity": zod.number().min(1).max(catalogDeliveriesPartialUpdateBodyQuantityMax).optional().describe('Quantity of products delivered'),
  "delivery_date": zod.iso.datetime({}).optional().describe('When the delivery was received'),
  "cost_per_unit": zod.regex(catalogDeliveriesPartialUpdateBodyCostPerUnitRegExp).optional().describe('Cost per unit for this delivery')
})

export const catalogDeliveriesPartialUpdateResponseQuantityMax = 2147483647;
export const catalogDeliveriesPartialUpdateResponseCostPerUnitRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');


export const catalogDeliveriesPartialUpdateResponse = zod.object({
  "id": zod.number(),
  "supplier": zod.number().describe('Supplier who delivered the products'),
  "supplier_name": zod.string(),
  "product": zod.number().describe('Product that was delivered'),
  "product_name": zod.string(),
  "quantity": zod.number().min(1).max(catalogDeliveriesPartialUpdateResponseQuantityMax).describe('Quantity of products delivered'),
  "delivery_date": zod.iso.datetime({}).describe('When the delivery was received'),
  "cost_per_unit": zod.regex(catalogDeliveriesPartialUpdateResponseCostPerUnitRegExp).describe('Cost per unit for this delivery'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
})

/**
 * Handle deletion with foreign key constraint protection.
 */
export const catalogDeliveriesDestroyParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this Product Delivery.')
})

/**
 * ViewSet for ProductImage model with CRUD operations.
 */
export const catalogImagesListQueryParams = zod.object({
  "id": zod.coerce.number().optional(),
  "ordering": zod.coerce.string().optional().describe('Which field to use when ordering the results.'),
  "product": zod.coerce.number().optional(),
  "search": zod.coerce.string().optional().describe('A search term.')
})

export const catalogImagesListResponseSortOrderMin = 0;

export const catalogImagesListResponseSortOrderMax = 2147483647;


export const catalogImagesListResponseItem = zod.object({
  "id": zod.number(),
  "product": zod.number().describe('Associated product'),
  "image": zod.url().describe('Product image'),
  "image_url": zod.string().nullable(),
  "is_primary": zod.boolean().optional().describe('Whether this is the primary product image'),
  "sort_order": zod.number().min(catalogImagesListResponseSortOrderMin).max(catalogImagesListResponseSortOrderMax).optional().describe('Display order of images'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for ProductImage model.')
export const catalogImagesListResponse = zod.array(catalogImagesListResponseItem)

/**
 * Create a new product image with file upload.
 */
export const catalogImagesCreateBodyIsPrimaryDefault = false;export const catalogImagesCreateBodySortOrderDefault = 0;

export const catalogImagesCreateBody = zod.object({
  "image": zod.instanceof(File).describe('Image file to upload'),
  "product": zod.number().describe('Product ID'),
  "is_primary": zod.boolean().optional().describe('Whether this is the primary product image'),
  "sort_order": zod.number().optional().describe('Display order of images')
})

/**
 * ViewSet for ProductImage model with CRUD operations.
 */
export const catalogImagesRetrieveParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this product image.')
})

export const catalogImagesRetrieveResponseSortOrderMin = 0;

export const catalogImagesRetrieveResponseSortOrderMax = 2147483647;


export const catalogImagesRetrieveResponse = zod.object({
  "id": zod.number(),
  "product": zod.number().describe('Associated product'),
  "image": zod.url().describe('Product image'),
  "image_url": zod.string().nullable(),
  "is_primary": zod.boolean().optional().describe('Whether this is the primary product image'),
  "sort_order": zod.number().min(catalogImagesRetrieveResponseSortOrderMin).max(catalogImagesRetrieveResponseSortOrderMax).optional().describe('Display order of images'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for ProductImage model.')

/**
 * ViewSet for ProductImage model with CRUD operations.
 */
export const catalogImagesUpdateParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this product image.')
})

export const catalogImagesUpdateBodySortOrderMin = 0;

export const catalogImagesUpdateBodySortOrderMax = 2147483647;


export const catalogImagesUpdateBody = zod.object({
  "product": zod.number().describe('Associated product'),
  "image": zod.url().describe('Product image'),
  "is_primary": zod.boolean().optional().describe('Whether this is the primary product image'),
  "sort_order": zod.number().min(catalogImagesUpdateBodySortOrderMin).max(catalogImagesUpdateBodySortOrderMax).optional().describe('Display order of images')
}).describe('Serializer for ProductImage model.')

export const catalogImagesUpdateResponseSortOrderMin = 0;

export const catalogImagesUpdateResponseSortOrderMax = 2147483647;


export const catalogImagesUpdateResponse = zod.object({
  "id": zod.number(),
  "product": zod.number().describe('Associated product'),
  "image": zod.url().describe('Product image'),
  "image_url": zod.string().nullable(),
  "is_primary": zod.boolean().optional().describe('Whether this is the primary product image'),
  "sort_order": zod.number().min(catalogImagesUpdateResponseSortOrderMin).max(catalogImagesUpdateResponseSortOrderMax).optional().describe('Display order of images'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for ProductImage model.')

/**
 * ViewSet for ProductImage model with CRUD operations.
 */
export const catalogImagesPartialUpdateParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this product image.')
})

export const catalogImagesPartialUpdateBodySortOrderMin = 0;

export const catalogImagesPartialUpdateBodySortOrderMax = 2147483647;


export const catalogImagesPartialUpdateBody = zod.object({
  "product": zod.number().optional().describe('Associated product'),
  "image": zod.url().optional().describe('Product image'),
  "is_primary": zod.boolean().optional().describe('Whether this is the primary product image'),
  "sort_order": zod.number().min(catalogImagesPartialUpdateBodySortOrderMin).max(catalogImagesPartialUpdateBodySortOrderMax).optional().describe('Display order of images')
}).describe('Serializer for ProductImage model.')

export const catalogImagesPartialUpdateResponseSortOrderMin = 0;

export const catalogImagesPartialUpdateResponseSortOrderMax = 2147483647;


export const catalogImagesPartialUpdateResponse = zod.object({
  "id": zod.number(),
  "product": zod.number().describe('Associated product'),
  "image": zod.url().describe('Product image'),
  "image_url": zod.string().nullable(),
  "is_primary": zod.boolean().optional().describe('Whether this is the primary product image'),
  "sort_order": zod.number().min(catalogImagesPartialUpdateResponseSortOrderMin).max(catalogImagesPartialUpdateResponseSortOrderMax).optional().describe('Display order of images'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for ProductImage model.')

/**
 * Handle deletion with foreign key constraint protection.
 */
export const catalogImagesDestroyParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this product image.')
})

/**
 * Set this image as primary for its product
 * @summary Set image as primary
 */
export const catalogImagesSetPrimaryCreateParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this product image.')
})

export const catalogImagesSetPrimaryCreateResponseSortOrderMin = 0;

export const catalogImagesSetPrimaryCreateResponseSortOrderMax = 2147483647;


export const catalogImagesSetPrimaryCreateResponse = zod.object({
  "id": zod.number(),
  "product": zod.number().describe('Associated product'),
  "image": zod.url().describe('Product image'),
  "image_url": zod.string().nullable(),
  "is_primary": zod.boolean().optional().describe('Whether this is the primary product image'),
  "sort_order": zod.number().min(catalogImagesSetPrimaryCreateResponseSortOrderMin).max(catalogImagesSetPrimaryCreateResponseSortOrderMax).optional().describe('Display order of images'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for ProductImage model.')

/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const catalogManufacturersListParams = zod.object({
  "id": zod.coerce.number()
})

export const catalogManufacturersListQueryParams = zod.object({
  "id": zod.coerce.number().optional(),
  "ordering": zod.coerce.string().optional().describe('Which field to use when ordering the results.'),
  "search": zod.coerce.string().optional().describe('A search term.')
})

export const catalogManufacturersListResponseNameMax = 100;
export const catalogManufacturersListResponseSlugMax = 100;

export const catalogManufacturersListResponseSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');


export const catalogManufacturersListResponseItem = zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogManufacturersListResponseNameMax).describe('Manufacturer name'),
  "slug": zod.string().max(catalogManufacturersListResponseSlugMax).regex(catalogManufacturersListResponseSlugRegExp).describe('URL-friendly version of the name'),
  "is_active": zod.boolean().optional().describe('Whether this manufacturer is visible'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created')
}).describe('Simplified manufacturer serializer for list views.')
export const catalogManufacturersListResponse = zod.array(catalogManufacturersListResponseItem)

/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const catalogManufacturersCreateParams = zod.object({
  "id": zod.coerce.number()
})

export const catalogManufacturersCreateBodyNameMax = 100;
export const catalogManufacturersCreateBodyWebsiteMax = 200;


export const catalogManufacturersCreateBody = zod.object({
  "name": zod.string().max(catalogManufacturersCreateBodyNameMax).describe('Manufacturer name'),
  "description": zod.string().optional().describe('Manufacturer description'),
  "website": zod.string().max(catalogManufacturersCreateBodyWebsiteMax).optional().describe('Manufacturer website URL'),
  "is_active": zod.boolean().optional().describe('Whether this manufacturer is visible')
}).describe('Serializer for creating new manufacturers (admin only).')

/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const catalogManufacturersRetrieveParams = zod.object({
  "id": zod.coerce.number()
})

export const catalogManufacturersRetrieveResponseNameMax = 100;
export const catalogManufacturersRetrieveResponseSlugMax = 100;

export const catalogManufacturersRetrieveResponseSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const catalogManufacturersRetrieveResponseWebsiteMax = 200;


export const catalogManufacturersRetrieveResponse = zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogManufacturersRetrieveResponseNameMax).describe('Manufacturer name'),
  "slug": zod.string().max(catalogManufacturersRetrieveResponseSlugMax).regex(catalogManufacturersRetrieveResponseSlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Manufacturer description'),
  "website": zod.string().max(catalogManufacturersRetrieveResponseWebsiteMax).optional().describe('Manufacturer website URL'),
  "is_active": zod.boolean().optional().describe('Whether this manufacturer is visible'),
  "active_product_count": zod.number(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Manufacturer model.')

/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const catalogManufacturersUpdateParams = zod.object({
  "id": zod.coerce.number()
})

export const catalogManufacturersUpdateBodyNameMax = 100;
export const catalogManufacturersUpdateBodyWebsiteMax = 200;


export const catalogManufacturersUpdateBody = zod.object({
  "name": zod.string().max(catalogManufacturersUpdateBodyNameMax).describe('Manufacturer name'),
  "description": zod.string().optional().describe('Manufacturer description'),
  "website": zod.string().max(catalogManufacturersUpdateBodyWebsiteMax).optional().describe('Manufacturer website URL'),
  "is_active": zod.boolean().optional().describe('Whether this manufacturer is visible')
}).describe('Serializer for updating manufacturers (admin only).')

export const catalogManufacturersUpdateResponseNameMax = 100;
export const catalogManufacturersUpdateResponseWebsiteMax = 200;


export const catalogManufacturersUpdateResponse = zod.object({
  "name": zod.string().max(catalogManufacturersUpdateResponseNameMax).describe('Manufacturer name'),
  "description": zod.string().optional().describe('Manufacturer description'),
  "website": zod.string().max(catalogManufacturersUpdateResponseWebsiteMax).optional().describe('Manufacturer website URL'),
  "is_active": zod.boolean().optional().describe('Whether this manufacturer is visible')
}).describe('Serializer for updating manufacturers (admin only).')

/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const catalogManufacturersPartialUpdateParams = zod.object({
  "id": zod.coerce.number()
})

export const catalogManufacturersPartialUpdateBodyNameMax = 100;
export const catalogManufacturersPartialUpdateBodySlugMax = 100;

export const catalogManufacturersPartialUpdateBodySlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const catalogManufacturersPartialUpdateBodyWebsiteMax = 200;


export const catalogManufacturersPartialUpdateBody = zod.object({
  "name": zod.string().max(catalogManufacturersPartialUpdateBodyNameMax).optional().describe('Manufacturer name'),
  "slug": zod.string().max(catalogManufacturersPartialUpdateBodySlugMax).regex(catalogManufacturersPartialUpdateBodySlugRegExp).optional().describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Manufacturer description'),
  "website": zod.string().max(catalogManufacturersPartialUpdateBodyWebsiteMax).optional().describe('Manufacturer website URL'),
  "is_active": zod.boolean().optional().describe('Whether this manufacturer is visible')
}).describe('Serializer for Manufacturer model.')

export const catalogManufacturersPartialUpdateResponseNameMax = 100;
export const catalogManufacturersPartialUpdateResponseSlugMax = 100;

export const catalogManufacturersPartialUpdateResponseSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const catalogManufacturersPartialUpdateResponseWebsiteMax = 200;


export const catalogManufacturersPartialUpdateResponse = zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogManufacturersPartialUpdateResponseNameMax).describe('Manufacturer name'),
  "slug": zod.string().max(catalogManufacturersPartialUpdateResponseSlugMax).regex(catalogManufacturersPartialUpdateResponseSlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Manufacturer description'),
  "website": zod.string().max(catalogManufacturersPartialUpdateResponseWebsiteMax).optional().describe('Manufacturer website URL'),
  "is_active": zod.boolean().optional().describe('Whether this manufacturer is visible'),
  "active_product_count": zod.number(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Manufacturer model.')

/**
 * Handle deletion with foreign key constraint protection.
 */
export const catalogManufacturersDestroyParams = zod.object({
  "id": zod.coerce.number()
})

/**
 * ViewSet for viewing notification history.
 */
export const catalogNotificationsHistoryCreateBodyTitleMax = 255;


export const catalogNotificationsHistoryCreateBody = zod.object({
  "product": zod.number().describe('Product the notification was about'),
  "notification_type": zod.enum(['stock_available', 'price_drop']).describe('* `stock_available` - Stock Available\n* `price_drop` - Price Drop').describe('Type of notification sent\n\n* `stock_available` - Stock Available\n* `price_drop` - Price Drop'),
  "title": zod.string().max(catalogNotificationsHistoryCreateBodyTitleMax).describe('Notification title'),
  "body": zod.string().describe('Notification body text')
}).describe('Serializer for NotificationHistory model.')

/**
 * ViewSet for viewing notification history.
 */
export const catalogNotificationsHistoryUpdateParams = zod.object({
  "id": zod.coerce.string()
})

export const catalogNotificationsHistoryUpdateBodyTitleMax = 255;


export const catalogNotificationsHistoryUpdateBody = zod.object({
  "product": zod.number().describe('Product the notification was about'),
  "notification_type": zod.enum(['stock_available', 'price_drop']).describe('* `stock_available` - Stock Available\n* `price_drop` - Price Drop').describe('Type of notification sent\n\n* `stock_available` - Stock Available\n* `price_drop` - Price Drop'),
  "title": zod.string().max(catalogNotificationsHistoryUpdateBodyTitleMax).describe('Notification title'),
  "body": zod.string().describe('Notification body text')
}).describe('Serializer for NotificationHistory model.')

export const catalogNotificationsHistoryUpdateResponseTitleMax = 255;


export const catalogNotificationsHistoryUpdateResponse = zod.object({
  "id": zod.number(),
  "product": zod.number().describe('Product the notification was about'),
  "product_name": zod.string(),
  "product_image": zod.string(),
  "notification_type": zod.enum(['stock_available', 'price_drop']).describe('* `stock_available` - Stock Available\n* `price_drop` - Price Drop').describe('Type of notification sent\n\n* `stock_available` - Stock Available\n* `price_drop` - Price Drop'),
  "title": zod.string().max(catalogNotificationsHistoryUpdateResponseTitleMax).describe('Notification title'),
  "body": zod.string().describe('Notification body text'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created')
}).describe('Serializer for NotificationHistory model.')

/**
 * ViewSet for viewing notification history.
 */
export const catalogNotificationsHistoryPartialUpdateParams = zod.object({
  "id": zod.coerce.string()
})

export const catalogNotificationsHistoryPartialUpdateBodyTitleMax = 255;


export const catalogNotificationsHistoryPartialUpdateBody = zod.object({
  "product": zod.number().optional().describe('Product the notification was about'),
  "notification_type": zod.enum(['stock_available', 'price_drop']).describe('* `stock_available` - Stock Available\n* `price_drop` - Price Drop').optional().describe('Type of notification sent\n\n* `stock_available` - Stock Available\n* `price_drop` - Price Drop'),
  "title": zod.string().max(catalogNotificationsHistoryPartialUpdateBodyTitleMax).optional().describe('Notification title'),
  "body": zod.string().optional().describe('Notification body text')
}).describe('Serializer for NotificationHistory model.')

export const catalogNotificationsHistoryPartialUpdateResponseTitleMax = 255;


export const catalogNotificationsHistoryPartialUpdateResponse = zod.object({
  "id": zod.number(),
  "product": zod.number().describe('Product the notification was about'),
  "product_name": zod.string(),
  "product_image": zod.string(),
  "notification_type": zod.enum(['stock_available', 'price_drop']).describe('* `stock_available` - Stock Available\n* `price_drop` - Price Drop').describe('Type of notification sent\n\n* `stock_available` - Stock Available\n* `price_drop` - Price Drop'),
  "title": zod.string().max(catalogNotificationsHistoryPartialUpdateResponseTitleMax).describe('Notification title'),
  "body": zod.string().describe('Notification body text'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created')
}).describe('Serializer for NotificationHistory model.')

/**
 * Handle deletion with foreign key constraint protection.
 */
export const catalogNotificationsHistoryDestroyParams = zod.object({
  "id": zod.coerce.string()
})

/**
 * ViewSet for managing user notification preferences.
 */
export const catalogNotificationsPreferencesListQueryParams = zod.object({
  "ordering": zod.coerce.string().optional().describe('Which field to use when ordering the results.'),
  "search": zod.coerce.string().optional().describe('A search term.')
})

export const catalogNotificationsPreferencesListResponseItem = zod.object({
  "id": zod.number(),
  "stock_alerts_enabled": zod.boolean().optional().describe('Receive alerts when out-of-stock wishlist items become available'),
  "price_drop_alerts_enabled": zod.boolean().optional().describe('Receive alerts when wishlist items go on sale'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for NotificationPreference model.')
export const catalogNotificationsPreferencesListResponse = zod.array(catalogNotificationsPreferencesListResponseItem)

/**
 * ViewSet for managing user notification preferences.
 */
export const catalogNotificationsPreferencesCreateBody = zod.object({
  "stock_alerts_enabled": zod.boolean().optional().describe('Receive alerts when out-of-stock wishlist items become available'),
  "price_drop_alerts_enabled": zod.boolean().optional().describe('Receive alerts when wishlist items go on sale')
}).describe('Serializer for NotificationPreference model.')

/**
 * ViewSet for managing user notification preferences.
 */
export const catalogNotificationsPreferencesUpdateParams = zod.object({
  "id": zod.coerce.string()
})

export const catalogNotificationsPreferencesUpdateBody = zod.object({
  "stock_alerts_enabled": zod.boolean().optional().describe('Receive alerts when out-of-stock wishlist items become available'),
  "price_drop_alerts_enabled": zod.boolean().optional().describe('Receive alerts when wishlist items go on sale')
}).describe('Serializer for updating notification preferences.')

export const catalogNotificationsPreferencesUpdateResponse = zod.object({
  "stock_alerts_enabled": zod.boolean().optional().describe('Receive alerts when out-of-stock wishlist items become available'),
  "price_drop_alerts_enabled": zod.boolean().optional().describe('Receive alerts when wishlist items go on sale')
}).describe('Serializer for updating notification preferences.')

/**
 * Handle deletion with foreign key constraint protection.
 */
export const catalogNotificationsPreferencesDestroyParams = zod.object({
  "id": zod.coerce.string()
})

/**
 * ViewSet for Product model with advanced CRUD operations.
 */
export const catalogProductsListQueryParams = zod.object({
  "category": zod.coerce.number().optional(),
  "category__in": zod.array(zod.coerce.number()).optional().describe('Multiple values may be separated by commas.'),
  "category__name": zod.coerce.string().optional(),
  "category__name__icontains": zod.coerce.string().optional(),
  "created_at": zod.iso.datetime({}).optional(),
  "created_at__gte": zod.iso.datetime({}).optional(),
  "created_at__lte": zod.iso.datetime({}).optional(),
  "current_price": zod.coerce.number().optional(),
  "current_price__gt": zod.coerce.number().optional(),
  "current_price__gte": zod.coerce.number().optional(),
  "current_price__lt": zod.coerce.number().optional(),
  "current_price__lte": zod.coerce.number().optional(),
  "id": zod.coerce.number().optional(),
  "is_visible": zod.coerce.boolean().optional(),
  "manufacturer__name": zod.coerce.string().optional(),
  "manufacturer__name__icontains": zod.coerce.string().optional(),
  "name": zod.coerce.string().optional(),
  "name__icontains": zod.coerce.string().optional(),
  "ordering": zod.coerce.string().optional().describe('Which field to use when ordering the results.'),
  "original_price": zod.coerce.number().optional(),
  "original_price__gt": zod.coerce.number().optional(),
  "original_price__gte": zod.coerce.number().optional(),
  "original_price__lt": zod.coerce.number().optional(),
  "original_price__lte": zod.coerce.number().optional(),
  "page": zod.coerce.number().optional().describe('A page number within the paginated result set.'),
  "page_size": zod.coerce.number().optional().describe('Number of results to return per page.'),
  "price": zod.coerce.number().optional(),
  "price__gt": zod.coerce.number().optional(),
  "price__gte": zod.coerce.number().optional(),
  "price__lt": zod.coerce.number().optional(),
  "price__lte": zod.coerce.number().optional(),
  "search": zod.coerce.string().optional().describe('A search term.'),
  "short_description": zod.coerce.string().optional(),
  "short_description__icontains": zod.coerce.string().optional(),
  "sku": zod.coerce.string().optional(),
  "sku__icontains": zod.coerce.string().optional(),
  "slug": zod.coerce.string().optional(),
  "slug__icontains": zod.coerce.string().optional(),
  "stock_quantity": zod.coerce.number().optional(),
  "stock_quantity__gte": zod.coerce.number().optional(),
  "stock_quantity__lte": zod.coerce.number().optional(),
  "tags": zod.coerce.string().optional(),
  "updated_at": zod.iso.datetime({}).optional(),
  "updated_at__gte": zod.iso.datetime({}).optional(),
  "updated_at__lte": zod.iso.datetime({}).optional()
})

export const catalogProductsListResponseResultsItemNameMax = 200;
export const catalogProductsListResponseResultsItemSlugMax = 200;

export const catalogProductsListResponseResultsItemSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const catalogProductsListResponseResultsItemShortDescriptionMax = 500;
export const catalogProductsListResponseResultsItemPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const catalogProductsListResponseResultsItemOriginalPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const catalogProductsListResponseResultsItemSkuMax = 100;
export const catalogProductsListResponseResultsItemStockQuantityMin = 0;

export const catalogProductsListResponseResultsItemStockQuantityMax = 2147483647;
export const catalogProductsListResponseResultsItemCategoryNameMax = 100;
export const catalogProductsListResponseResultsItemCategorySlugMax = 100;

export const catalogProductsListResponseResultsItemCategorySlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const catalogProductsListResponseResultsItemManufacturerNameMax = 100;
export const catalogProductsListResponseResultsItemManufacturerSlugMax = 100;

export const catalogProductsListResponseResultsItemManufacturerSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const catalogProductsListResponseResultsItemManufacturerWebsiteMax = 200;


export const catalogProductsListResponse = zod.object({
  "count": zod.number(),
  "next": zod.url().nullish(),
  "previous": zod.url().nullish(),
  "results": zod.array(zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogProductsListResponseResultsItemNameMax).describe('Product name'),
  "slug": zod.string().max(catalogProductsListResponseResultsItemSlugMax).regex(catalogProductsListResponseResultsItemSlugRegExp).describe('URL-friendly version of the name'),
  "short_description": zod.string().max(catalogProductsListResponseResultsItemShortDescriptionMax).optional().describe('Short description for listings'),
  "price": zod.regex(catalogProductsListResponseResultsItemPriceRegExp).describe('Product price'),
  "original_price": zod.regex(catalogProductsListResponseResultsItemOriginalPriceRegExp).describe('Original price for showing discounts'),
  "current_price": zod.string().describe('Get current price as formatted decimal string.'),
  "discount_percentage": zod.number().describe('Calculate discount percentage.'),
  "sku": zod.string().max(catalogProductsListResponseResultsItemSkuMax).describe('Unique product identifier'),
  "stock_quantity": zod.number().min(catalogProductsListResponseResultsItemStockQuantityMin).max(catalogProductsListResponseResultsItemStockQuantityMax).optional().describe('Available quantity in stock'),
  "is_visible": zod.boolean().optional().describe('Is product visible to the users'),
  "is_on_sale": zod.boolean(),
  "is_in_stock": zod.boolean().describe('Check if product is in stock.'),
  "is_available": zod.boolean().describe('Check if product is available for purchase.'),
  "category": zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogProductsListResponseResultsItemCategoryNameMax).describe('Category name'),
  "slug": zod.string().max(catalogProductsListResponseResultsItemCategorySlugMax).regex(catalogProductsListResponseResultsItemCategorySlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Category description'),
  "is_active": zod.boolean().optional().describe('Whether this category is visible'),
  "active_product_count": zod.number(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Category model.'),
  "manufacturer": zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogProductsListResponseResultsItemManufacturerNameMax).describe('Manufacturer name'),
  "slug": zod.string().max(catalogProductsListResponseResultsItemManufacturerSlugMax).regex(catalogProductsListResponseResultsItemManufacturerSlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Manufacturer description'),
  "website": zod.string().max(catalogProductsListResponseResultsItemManufacturerWebsiteMax).optional().describe('Manufacturer website URL'),
  "is_active": zod.boolean().optional().describe('Whether this manufacturer is visible'),
  "active_product_count": zod.number(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Manufacturer model.'),
  "primary_image": zod.string().nullable().describe('Get URL of primary product image.'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created')
}).describe('Simplified serializer for product listings.'))
})

/**
 * ViewSet for Product model with advanced CRUD operations.
 */
export const catalogProductsCreateBodyNameMax = 200;
export const catalogProductsCreateBodySlugMax = 200;

export const catalogProductsCreateBodySlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const catalogProductsCreateBodyShortDescriptionMax = 500;
export const catalogProductsCreateBodyPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const catalogProductsCreateBodyOriginalPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const catalogProductsCreateBodySkuMax = 100;
export const catalogProductsCreateBodyStockQuantityMin = 0;

export const catalogProductsCreateBodyStockQuantityMax = 2147483647;


export const catalogProductsCreateBody = zod.object({
  "name": zod.string().max(catalogProductsCreateBodyNameMax).describe('Product name'),
  "slug": zod.string().max(catalogProductsCreateBodySlugMax).regex(catalogProductsCreateBodySlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().describe('Detailed product description'),
  "short_description": zod.string().max(catalogProductsCreateBodyShortDescriptionMax).optional().describe('Short description for listings'),
  "price": zod.regex(catalogProductsCreateBodyPriceRegExp).describe('Product price'),
  "original_price": zod.regex(catalogProductsCreateBodyOriginalPriceRegExp).describe('Original price for showing discounts'),
  "sku": zod.string().max(catalogProductsCreateBodySkuMax).describe('Unique product identifier'),
  "stock_quantity": zod.number().min(catalogProductsCreateBodyStockQuantityMin).max(catalogProductsCreateBodyStockQuantityMax).optional().describe('Available quantity in stock'),
  "category_id": zod.number(),
  "manufacturer_id": zod.number().nullish(),
  "tag_ids": zod.array(zod.number()).optional(),
  "is_visible": zod.boolean().optional().describe('Is product visible to the users'),
  "sale_start": zod.iso.datetime({}).nullish(),
  "sale_end": zod.iso.datetime({}).nullish()
}).describe('Serializer for creating products.')

/**
 * ViewSet for Product model with advanced CRUD operations.
 */
export const catalogProductsRetrieveParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this product.')
})

export const catalogProductsRetrieveResponseNameMax = 200;
export const catalogProductsRetrieveResponseSlugMax = 200;

export const catalogProductsRetrieveResponseSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const catalogProductsRetrieveResponseShortDescriptionMax = 500;
export const catalogProductsRetrieveResponsePriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const catalogProductsRetrieveResponseOriginalPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const catalogProductsRetrieveResponseSkuMax = 100;
export const catalogProductsRetrieveResponseStockQuantityMin = 0;

export const catalogProductsRetrieveResponseStockQuantityMax = 2147483647;
export const catalogProductsRetrieveResponseCategoryNameMax = 100;
export const catalogProductsRetrieveResponseCategorySlugMax = 100;

export const catalogProductsRetrieveResponseCategorySlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const catalogProductsRetrieveResponseManufacturerNameMax = 100;
export const catalogProductsRetrieveResponseManufacturerSlugMax = 100;

export const catalogProductsRetrieveResponseManufacturerSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const catalogProductsRetrieveResponseManufacturerWebsiteMax = 200;
export const catalogProductsRetrieveResponseTagsItemNameMax = 50;
export const catalogProductsRetrieveResponseTagsItemSlugMax = 50;

export const catalogProductsRetrieveResponseTagsItemSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const catalogProductsRetrieveResponseImagesItemSortOrderMin = 0;

export const catalogProductsRetrieveResponseImagesItemSortOrderMax = 2147483647;


export const catalogProductsRetrieveResponse = zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogProductsRetrieveResponseNameMax).describe('Product name'),
  "slug": zod.string().max(catalogProductsRetrieveResponseSlugMax).regex(catalogProductsRetrieveResponseSlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().describe('Detailed product description'),
  "short_description": zod.string().max(catalogProductsRetrieveResponseShortDescriptionMax).optional().describe('Short description for listings'),
  "price": zod.regex(catalogProductsRetrieveResponsePriceRegExp).describe('Product price'),
  "original_price": zod.regex(catalogProductsRetrieveResponseOriginalPriceRegExp).describe('Original price for showing discounts'),
  "current_price": zod.string().describe('Get current price as formatted decimal string.'),
  "discount_percentage": zod.number().describe('Calculate discount percentage.'),
  "sku": zod.string().max(catalogProductsRetrieveResponseSkuMax).describe('Unique product identifier'),
  "stock_quantity": zod.number().min(catalogProductsRetrieveResponseStockQuantityMin).max(catalogProductsRetrieveResponseStockQuantityMax).optional().describe('Available quantity in stock'),
  "category": zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogProductsRetrieveResponseCategoryNameMax).describe('Category name'),
  "slug": zod.string().max(catalogProductsRetrieveResponseCategorySlugMax).regex(catalogProductsRetrieveResponseCategorySlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Category description'),
  "is_active": zod.boolean().optional().describe('Whether this category is visible'),
  "active_product_count": zod.number(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Category model.'),
  "category_id": zod.number(),
  "manufacturer": zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogProductsRetrieveResponseManufacturerNameMax).describe('Manufacturer name'),
  "slug": zod.string().max(catalogProductsRetrieveResponseManufacturerSlugMax).regex(catalogProductsRetrieveResponseManufacturerSlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Manufacturer description'),
  "website": zod.string().max(catalogProductsRetrieveResponseManufacturerWebsiteMax).optional().describe('Manufacturer website URL'),
  "is_active": zod.boolean().optional().describe('Whether this manufacturer is visible'),
  "active_product_count": zod.number(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Manufacturer model.'),
  "manufacturer_id": zod.number().nullish(),
  "tags": zod.array(zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogProductsRetrieveResponseTagsItemNameMax).describe('Tag name'),
  "slug": zod.string().max(catalogProductsRetrieveResponseTagsItemSlugMax).regex(catalogProductsRetrieveResponseTagsItemSlugRegExp).describe('URL-friendly version of the name'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Tag model.')),
  "tag_ids": zod.array(zod.number()).optional(),
  "is_visible": zod.boolean().optional().describe('Is product visible to the users'),
  "sale_start": zod.iso.datetime({}).nullish(),
  "sale_end": zod.iso.datetime({}).nullish(),
  "is_on_sale": zod.boolean(),
  "is_in_stock": zod.boolean().describe('Check if product is in stock.'),
  "is_available": zod.boolean().describe('Check if product is available for purchase.'),
  "images": zod.array(zod.object({
  "id": zod.number(),
  "product": zod.number().describe('Associated product'),
  "image": zod.url().describe('Product image'),
  "image_url": zod.string().nullable(),
  "is_primary": zod.boolean().optional().describe('Whether this is the primary product image'),
  "sort_order": zod.number().min(catalogProductsRetrieveResponseImagesItemSortOrderMin).max(catalogProductsRetrieveResponseImagesItemSortOrderMax).optional().describe('Display order of images'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for ProductImage model.')),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Detailed serializer for product detail views.')

/**
 * ViewSet for Product model with advanced CRUD operations.
 */
export const catalogProductsUpdateParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this product.')
})

export const catalogProductsUpdateBodyNameMax = 200;
export const catalogProductsUpdateBodySlugMax = 200;

export const catalogProductsUpdateBodySlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const catalogProductsUpdateBodyShortDescriptionMax = 500;
export const catalogProductsUpdateBodyPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const catalogProductsUpdateBodyOriginalPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const catalogProductsUpdateBodySkuMax = 100;
export const catalogProductsUpdateBodyStockQuantityMin = 0;

export const catalogProductsUpdateBodyStockQuantityMax = 2147483647;


export const catalogProductsUpdateBody = zod.object({
  "name": zod.string().max(catalogProductsUpdateBodyNameMax).describe('Product name'),
  "slug": zod.string().max(catalogProductsUpdateBodySlugMax).regex(catalogProductsUpdateBodySlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().describe('Detailed product description'),
  "short_description": zod.string().max(catalogProductsUpdateBodyShortDescriptionMax).optional().describe('Short description for listings'),
  "price": zod.regex(catalogProductsUpdateBodyPriceRegExp).describe('Product price'),
  "original_price": zod.regex(catalogProductsUpdateBodyOriginalPriceRegExp).describe('Original price for showing discounts'),
  "sku": zod.string().max(catalogProductsUpdateBodySkuMax).describe('Unique product identifier'),
  "stock_quantity": zod.number().min(catalogProductsUpdateBodyStockQuantityMin).max(catalogProductsUpdateBodyStockQuantityMax).optional().describe('Available quantity in stock'),
  "category_id": zod.number(),
  "manufacturer_id": zod.number().nullish(),
  "tag_ids": zod.array(zod.number()).optional(),
  "is_visible": zod.boolean().optional().describe('Is product visible to the users'),
  "sale_start": zod.iso.datetime({}).nullish(),
  "sale_end": zod.iso.datetime({}).nullish()
}).describe('Detailed serializer for product detail views.')

export const catalogProductsUpdateResponseNameMax = 200;
export const catalogProductsUpdateResponseSlugMax = 200;

export const catalogProductsUpdateResponseSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const catalogProductsUpdateResponseShortDescriptionMax = 500;
export const catalogProductsUpdateResponsePriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const catalogProductsUpdateResponseOriginalPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const catalogProductsUpdateResponseSkuMax = 100;
export const catalogProductsUpdateResponseStockQuantityMin = 0;

export const catalogProductsUpdateResponseStockQuantityMax = 2147483647;
export const catalogProductsUpdateResponseCategoryNameMax = 100;
export const catalogProductsUpdateResponseCategorySlugMax = 100;

export const catalogProductsUpdateResponseCategorySlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const catalogProductsUpdateResponseManufacturerNameMax = 100;
export const catalogProductsUpdateResponseManufacturerSlugMax = 100;

export const catalogProductsUpdateResponseManufacturerSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const catalogProductsUpdateResponseManufacturerWebsiteMax = 200;
export const catalogProductsUpdateResponseTagsItemNameMax = 50;
export const catalogProductsUpdateResponseTagsItemSlugMax = 50;

export const catalogProductsUpdateResponseTagsItemSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const catalogProductsUpdateResponseImagesItemSortOrderMin = 0;

export const catalogProductsUpdateResponseImagesItemSortOrderMax = 2147483647;


export const catalogProductsUpdateResponse = zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogProductsUpdateResponseNameMax).describe('Product name'),
  "slug": zod.string().max(catalogProductsUpdateResponseSlugMax).regex(catalogProductsUpdateResponseSlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().describe('Detailed product description'),
  "short_description": zod.string().max(catalogProductsUpdateResponseShortDescriptionMax).optional().describe('Short description for listings'),
  "price": zod.regex(catalogProductsUpdateResponsePriceRegExp).describe('Product price'),
  "original_price": zod.regex(catalogProductsUpdateResponseOriginalPriceRegExp).describe('Original price for showing discounts'),
  "current_price": zod.string().describe('Get current price as formatted decimal string.'),
  "discount_percentage": zod.number().describe('Calculate discount percentage.'),
  "sku": zod.string().max(catalogProductsUpdateResponseSkuMax).describe('Unique product identifier'),
  "stock_quantity": zod.number().min(catalogProductsUpdateResponseStockQuantityMin).max(catalogProductsUpdateResponseStockQuantityMax).optional().describe('Available quantity in stock'),
  "category": zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogProductsUpdateResponseCategoryNameMax).describe('Category name'),
  "slug": zod.string().max(catalogProductsUpdateResponseCategorySlugMax).regex(catalogProductsUpdateResponseCategorySlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Category description'),
  "is_active": zod.boolean().optional().describe('Whether this category is visible'),
  "active_product_count": zod.number(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Category model.'),
  "category_id": zod.number(),
  "manufacturer": zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogProductsUpdateResponseManufacturerNameMax).describe('Manufacturer name'),
  "slug": zod.string().max(catalogProductsUpdateResponseManufacturerSlugMax).regex(catalogProductsUpdateResponseManufacturerSlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Manufacturer description'),
  "website": zod.string().max(catalogProductsUpdateResponseManufacturerWebsiteMax).optional().describe('Manufacturer website URL'),
  "is_active": zod.boolean().optional().describe('Whether this manufacturer is visible'),
  "active_product_count": zod.number(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Manufacturer model.'),
  "manufacturer_id": zod.number().nullish(),
  "tags": zod.array(zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogProductsUpdateResponseTagsItemNameMax).describe('Tag name'),
  "slug": zod.string().max(catalogProductsUpdateResponseTagsItemSlugMax).regex(catalogProductsUpdateResponseTagsItemSlugRegExp).describe('URL-friendly version of the name'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Tag model.')),
  "tag_ids": zod.array(zod.number()).optional(),
  "is_visible": zod.boolean().optional().describe('Is product visible to the users'),
  "sale_start": zod.iso.datetime({}).nullish(),
  "sale_end": zod.iso.datetime({}).nullish(),
  "is_on_sale": zod.boolean(),
  "is_in_stock": zod.boolean().describe('Check if product is in stock.'),
  "is_available": zod.boolean().describe('Check if product is available for purchase.'),
  "images": zod.array(zod.object({
  "id": zod.number(),
  "product": zod.number().describe('Associated product'),
  "image": zod.url().describe('Product image'),
  "image_url": zod.string().nullable(),
  "is_primary": zod.boolean().optional().describe('Whether this is the primary product image'),
  "sort_order": zod.number().min(catalogProductsUpdateResponseImagesItemSortOrderMin).max(catalogProductsUpdateResponseImagesItemSortOrderMax).optional().describe('Display order of images'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for ProductImage model.')),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Detailed serializer for product detail views.')

/**
 * ViewSet for Product model with advanced CRUD operations.
 */
export const catalogProductsPartialUpdateParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this product.')
})

export const catalogProductsPartialUpdateBodyNameMax = 200;
export const catalogProductsPartialUpdateBodySlugMax = 200;

export const catalogProductsPartialUpdateBodySlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const catalogProductsPartialUpdateBodyShortDescriptionMax = 500;
export const catalogProductsPartialUpdateBodyPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const catalogProductsPartialUpdateBodyOriginalPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const catalogProductsPartialUpdateBodySkuMax = 100;
export const catalogProductsPartialUpdateBodyStockQuantityMin = 0;

export const catalogProductsPartialUpdateBodyStockQuantityMax = 2147483647;


export const catalogProductsPartialUpdateBody = zod.object({
  "name": zod.string().max(catalogProductsPartialUpdateBodyNameMax).optional().describe('Product name'),
  "slug": zod.string().max(catalogProductsPartialUpdateBodySlugMax).regex(catalogProductsPartialUpdateBodySlugRegExp).optional().describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Detailed product description'),
  "short_description": zod.string().max(catalogProductsPartialUpdateBodyShortDescriptionMax).optional().describe('Short description for listings'),
  "price": zod.regex(catalogProductsPartialUpdateBodyPriceRegExp).optional().describe('Product price'),
  "original_price": zod.regex(catalogProductsPartialUpdateBodyOriginalPriceRegExp).optional().describe('Original price for showing discounts'),
  "sku": zod.string().max(catalogProductsPartialUpdateBodySkuMax).optional().describe('Unique product identifier'),
  "stock_quantity": zod.number().min(catalogProductsPartialUpdateBodyStockQuantityMin).max(catalogProductsPartialUpdateBodyStockQuantityMax).optional().describe('Available quantity in stock'),
  "category_id": zod.number().optional(),
  "manufacturer_id": zod.number().nullish(),
  "tag_ids": zod.array(zod.number()).optional(),
  "is_visible": zod.boolean().optional().describe('Is product visible to the users'),
  "sale_start": zod.iso.datetime({}).nullish(),
  "sale_end": zod.iso.datetime({}).nullish()
}).describe('Detailed serializer for product detail views.')

export const catalogProductsPartialUpdateResponseNameMax = 200;
export const catalogProductsPartialUpdateResponseSlugMax = 200;

export const catalogProductsPartialUpdateResponseSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const catalogProductsPartialUpdateResponseShortDescriptionMax = 500;
export const catalogProductsPartialUpdateResponsePriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const catalogProductsPartialUpdateResponseOriginalPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const catalogProductsPartialUpdateResponseSkuMax = 100;
export const catalogProductsPartialUpdateResponseStockQuantityMin = 0;

export const catalogProductsPartialUpdateResponseStockQuantityMax = 2147483647;
export const catalogProductsPartialUpdateResponseCategoryNameMax = 100;
export const catalogProductsPartialUpdateResponseCategorySlugMax = 100;

export const catalogProductsPartialUpdateResponseCategorySlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const catalogProductsPartialUpdateResponseManufacturerNameMax = 100;
export const catalogProductsPartialUpdateResponseManufacturerSlugMax = 100;

export const catalogProductsPartialUpdateResponseManufacturerSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const catalogProductsPartialUpdateResponseManufacturerWebsiteMax = 200;
export const catalogProductsPartialUpdateResponseTagsItemNameMax = 50;
export const catalogProductsPartialUpdateResponseTagsItemSlugMax = 50;

export const catalogProductsPartialUpdateResponseTagsItemSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const catalogProductsPartialUpdateResponseImagesItemSortOrderMin = 0;

export const catalogProductsPartialUpdateResponseImagesItemSortOrderMax = 2147483647;


export const catalogProductsPartialUpdateResponse = zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogProductsPartialUpdateResponseNameMax).describe('Product name'),
  "slug": zod.string().max(catalogProductsPartialUpdateResponseSlugMax).regex(catalogProductsPartialUpdateResponseSlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().describe('Detailed product description'),
  "short_description": zod.string().max(catalogProductsPartialUpdateResponseShortDescriptionMax).optional().describe('Short description for listings'),
  "price": zod.regex(catalogProductsPartialUpdateResponsePriceRegExp).describe('Product price'),
  "original_price": zod.regex(catalogProductsPartialUpdateResponseOriginalPriceRegExp).describe('Original price for showing discounts'),
  "current_price": zod.string().describe('Get current price as formatted decimal string.'),
  "discount_percentage": zod.number().describe('Calculate discount percentage.'),
  "sku": zod.string().max(catalogProductsPartialUpdateResponseSkuMax).describe('Unique product identifier'),
  "stock_quantity": zod.number().min(catalogProductsPartialUpdateResponseStockQuantityMin).max(catalogProductsPartialUpdateResponseStockQuantityMax).optional().describe('Available quantity in stock'),
  "category": zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogProductsPartialUpdateResponseCategoryNameMax).describe('Category name'),
  "slug": zod.string().max(catalogProductsPartialUpdateResponseCategorySlugMax).regex(catalogProductsPartialUpdateResponseCategorySlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Category description'),
  "is_active": zod.boolean().optional().describe('Whether this category is visible'),
  "active_product_count": zod.number(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Category model.'),
  "category_id": zod.number(),
  "manufacturer": zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogProductsPartialUpdateResponseManufacturerNameMax).describe('Manufacturer name'),
  "slug": zod.string().max(catalogProductsPartialUpdateResponseManufacturerSlugMax).regex(catalogProductsPartialUpdateResponseManufacturerSlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Manufacturer description'),
  "website": zod.string().max(catalogProductsPartialUpdateResponseManufacturerWebsiteMax).optional().describe('Manufacturer website URL'),
  "is_active": zod.boolean().optional().describe('Whether this manufacturer is visible'),
  "active_product_count": zod.number(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Manufacturer model.'),
  "manufacturer_id": zod.number().nullish(),
  "tags": zod.array(zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogProductsPartialUpdateResponseTagsItemNameMax).describe('Tag name'),
  "slug": zod.string().max(catalogProductsPartialUpdateResponseTagsItemSlugMax).regex(catalogProductsPartialUpdateResponseTagsItemSlugRegExp).describe('URL-friendly version of the name'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Tag model.')),
  "tag_ids": zod.array(zod.number()).optional(),
  "is_visible": zod.boolean().optional().describe('Is product visible to the users'),
  "sale_start": zod.iso.datetime({}).nullish(),
  "sale_end": zod.iso.datetime({}).nullish(),
  "is_on_sale": zod.boolean(),
  "is_in_stock": zod.boolean().describe('Check if product is in stock.'),
  "is_available": zod.boolean().describe('Check if product is available for purchase.'),
  "images": zod.array(zod.object({
  "id": zod.number(),
  "product": zod.number().describe('Associated product'),
  "image": zod.url().describe('Product image'),
  "image_url": zod.string().nullable(),
  "is_primary": zod.boolean().optional().describe('Whether this is the primary product image'),
  "sort_order": zod.number().min(catalogProductsPartialUpdateResponseImagesItemSortOrderMin).max(catalogProductsPartialUpdateResponseImagesItemSortOrderMax).optional().describe('Display order of images'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for ProductImage model.')),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Detailed serializer for product detail views.')

/**
 * Soft delete: set is_visible=False instead of actually deleting.
 */
export const catalogProductsDestroyParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this product.')
})

export const catalogProductsDestroyResponse = zod.any().describe('Product has been deactivated (hidden from catalog) due to existing orders')

/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const catalogSuppliersListQueryParams = zod.object({
  "id": zod.coerce.number().optional(),
  "ordering": zod.coerce.string().optional().describe('Which field to use when ordering the results.'),
  "page": zod.coerce.number().optional().describe('A page number within the paginated result set.'),
  "page_size": zod.coerce.number().optional().describe('Number of results to return per page.'),
  "search": zod.coerce.string().optional().describe('A search term.')
})

export const catalogSuppliersListResponseResultsItemNameMax = 100;
export const catalogSuppliersListResponseResultsItemContactEmailMax = 254;
export const catalogSuppliersListResponseResultsItemPhoneMax = 20;


export const catalogSuppliersListResponse = zod.object({
  "count": zod.number(),
  "next": zod.url().nullish(),
  "previous": zod.url().nullish(),
  "results": zod.array(zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogSuppliersListResponseResultsItemNameMax).describe('Supplier company name'),
  "contact_email": zod.email().max(catalogSuppliersListResponseResultsItemContactEmailMax).optional().describe('Primary contact email'),
  "phone": zod.string().max(catalogSuppliersListResponseResultsItemPhoneMax).optional().describe('Contact phone number'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}))
})

/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const catalogSuppliersCreateBodyNameMax = 100;
export const catalogSuppliersCreateBodyContactEmailMax = 254;
export const catalogSuppliersCreateBodyPhoneMax = 20;


export const catalogSuppliersCreateBody = zod.object({
  "name": zod.string().max(catalogSuppliersCreateBodyNameMax).describe('Supplier company name'),
  "contact_email": zod.email().max(catalogSuppliersCreateBodyContactEmailMax).optional().describe('Primary contact email'),
  "phone": zod.string().max(catalogSuppliersCreateBodyPhoneMax).optional().describe('Contact phone number')
})

/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const catalogSuppliersRetrieveParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this Supplier.')
})

export const catalogSuppliersRetrieveResponseNameMax = 100;
export const catalogSuppliersRetrieveResponseContactEmailMax = 254;
export const catalogSuppliersRetrieveResponsePhoneMax = 20;


export const catalogSuppliersRetrieveResponse = zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogSuppliersRetrieveResponseNameMax).describe('Supplier company name'),
  "contact_email": zod.email().max(catalogSuppliersRetrieveResponseContactEmailMax).optional().describe('Primary contact email'),
  "phone": zod.string().max(catalogSuppliersRetrieveResponsePhoneMax).optional().describe('Contact phone number'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
})

/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const catalogSuppliersUpdateParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this Supplier.')
})

export const catalogSuppliersUpdateBodyNameMax = 100;
export const catalogSuppliersUpdateBodyContactEmailMax = 254;
export const catalogSuppliersUpdateBodyPhoneMax = 20;


export const catalogSuppliersUpdateBody = zod.object({
  "name": zod.string().max(catalogSuppliersUpdateBodyNameMax).describe('Supplier company name'),
  "contact_email": zod.email().max(catalogSuppliersUpdateBodyContactEmailMax).optional().describe('Primary contact email'),
  "phone": zod.string().max(catalogSuppliersUpdateBodyPhoneMax).optional().describe('Contact phone number')
})

export const catalogSuppliersUpdateResponseNameMax = 100;
export const catalogSuppliersUpdateResponseContactEmailMax = 254;
export const catalogSuppliersUpdateResponsePhoneMax = 20;


export const catalogSuppliersUpdateResponse = zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogSuppliersUpdateResponseNameMax).describe('Supplier company name'),
  "contact_email": zod.email().max(catalogSuppliersUpdateResponseContactEmailMax).optional().describe('Primary contact email'),
  "phone": zod.string().max(catalogSuppliersUpdateResponsePhoneMax).optional().describe('Contact phone number'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
})

/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const catalogSuppliersPartialUpdateParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this Supplier.')
})

export const catalogSuppliersPartialUpdateBodyNameMax = 100;
export const catalogSuppliersPartialUpdateBodyContactEmailMax = 254;
export const catalogSuppliersPartialUpdateBodyPhoneMax = 20;


export const catalogSuppliersPartialUpdateBody = zod.object({
  "name": zod.string().max(catalogSuppliersPartialUpdateBodyNameMax).optional().describe('Supplier company name'),
  "contact_email": zod.email().max(catalogSuppliersPartialUpdateBodyContactEmailMax).optional().describe('Primary contact email'),
  "phone": zod.string().max(catalogSuppliersPartialUpdateBodyPhoneMax).optional().describe('Contact phone number')
})

export const catalogSuppliersPartialUpdateResponseNameMax = 100;
export const catalogSuppliersPartialUpdateResponseContactEmailMax = 254;
export const catalogSuppliersPartialUpdateResponsePhoneMax = 20;


export const catalogSuppliersPartialUpdateResponse = zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogSuppliersPartialUpdateResponseNameMax).describe('Supplier company name'),
  "contact_email": zod.email().max(catalogSuppliersPartialUpdateResponseContactEmailMax).optional().describe('Primary contact email'),
  "phone": zod.string().max(catalogSuppliersPartialUpdateResponsePhoneMax).optional().describe('Contact phone number'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
})

/**
 * Handle deletion with foreign key constraint protection.
 */
export const catalogSuppliersDestroyParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this Supplier.')
})

/**
 * ViewSet for Tag model with CRUD operations.
 */
export const catalogTagsListQueryParams = zod.object({
  "id": zod.coerce.number().optional(),
  "ordering": zod.coerce.string().optional().describe('Which field to use when ordering the results.'),
  "page": zod.coerce.number().optional().describe('A page number within the paginated result set.'),
  "page_size": zod.coerce.number().optional().describe('Number of results to return per page.'),
  "search": zod.coerce.string().optional().describe('A search term.')
})

export const catalogTagsListResponseResultsItemNameMax = 50;
export const catalogTagsListResponseResultsItemSlugMax = 50;

export const catalogTagsListResponseResultsItemSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');


export const catalogTagsListResponse = zod.object({
  "count": zod.number(),
  "next": zod.url().nullish(),
  "previous": zod.url().nullish(),
  "results": zod.array(zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogTagsListResponseResultsItemNameMax).describe('Tag name'),
  "slug": zod.string().max(catalogTagsListResponseResultsItemSlugMax).regex(catalogTagsListResponseResultsItemSlugRegExp).describe('URL-friendly version of the name'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Tag model.'))
})

/**
 * ViewSet for Tag model with CRUD operations.
 */
export const catalogTagsCreateBodyNameMax = 50;
export const catalogTagsCreateBodySlugMax = 50;

export const catalogTagsCreateBodySlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');


export const catalogTagsCreateBody = zod.object({
  "name": zod.string().max(catalogTagsCreateBodyNameMax).describe('Tag name'),
  "slug": zod.string().max(catalogTagsCreateBodySlugMax).regex(catalogTagsCreateBodySlugRegExp).describe('URL-friendly version of the name')
}).describe('Serializer for Tag model.')

/**
 * ViewSet for Tag model with CRUD operations.
 */
export const catalogTagsRetrieveParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this tag.')
})

export const catalogTagsRetrieveResponseNameMax = 50;
export const catalogTagsRetrieveResponseSlugMax = 50;

export const catalogTagsRetrieveResponseSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');


export const catalogTagsRetrieveResponse = zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogTagsRetrieveResponseNameMax).describe('Tag name'),
  "slug": zod.string().max(catalogTagsRetrieveResponseSlugMax).regex(catalogTagsRetrieveResponseSlugRegExp).describe('URL-friendly version of the name'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Tag model.')

/**
 * ViewSet for Tag model with CRUD operations.
 */
export const catalogTagsUpdateParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this tag.')
})

export const catalogTagsUpdateBodyNameMax = 50;
export const catalogTagsUpdateBodySlugMax = 50;

export const catalogTagsUpdateBodySlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');


export const catalogTagsUpdateBody = zod.object({
  "name": zod.string().max(catalogTagsUpdateBodyNameMax).describe('Tag name'),
  "slug": zod.string().max(catalogTagsUpdateBodySlugMax).regex(catalogTagsUpdateBodySlugRegExp).describe('URL-friendly version of the name')
}).describe('Serializer for Tag model.')

export const catalogTagsUpdateResponseNameMax = 50;
export const catalogTagsUpdateResponseSlugMax = 50;

export const catalogTagsUpdateResponseSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');


export const catalogTagsUpdateResponse = zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogTagsUpdateResponseNameMax).describe('Tag name'),
  "slug": zod.string().max(catalogTagsUpdateResponseSlugMax).regex(catalogTagsUpdateResponseSlugRegExp).describe('URL-friendly version of the name'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Tag model.')

/**
 * ViewSet for Tag model with CRUD operations.
 */
export const catalogTagsPartialUpdateParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this tag.')
})

export const catalogTagsPartialUpdateBodyNameMax = 50;
export const catalogTagsPartialUpdateBodySlugMax = 50;

export const catalogTagsPartialUpdateBodySlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');


export const catalogTagsPartialUpdateBody = zod.object({
  "name": zod.string().max(catalogTagsPartialUpdateBodyNameMax).optional().describe('Tag name'),
  "slug": zod.string().max(catalogTagsPartialUpdateBodySlugMax).regex(catalogTagsPartialUpdateBodySlugRegExp).optional().describe('URL-friendly version of the name')
}).describe('Serializer for Tag model.')

export const catalogTagsPartialUpdateResponseNameMax = 50;
export const catalogTagsPartialUpdateResponseSlugMax = 50;

export const catalogTagsPartialUpdateResponseSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');


export const catalogTagsPartialUpdateResponse = zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogTagsPartialUpdateResponseNameMax).describe('Tag name'),
  "slug": zod.string().max(catalogTagsPartialUpdateResponseSlugMax).regex(catalogTagsPartialUpdateResponseSlugRegExp).describe('URL-friendly version of the name'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Tag model.')

/**
 * Handle deletion with foreign key constraint protection.
 */
export const catalogTagsDestroyParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this tag.')
})

