/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * ShopDjango API
 * API for ShopDjango project
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CatalogNotificationsHistoryListParams,
  NotificationPreference,
  PaginatedNotificationHistoryList,
  PatchedNotificationPreferenceUpdate
} from '.././schemas';

import { shopInstance } from '../../../shop-mutator';
import type { ErrorType , BodyType } from '../../../shop-mutator';




/**
 * List notification history
 */
export const catalogNotificationsHistoryList = (
    params?: CatalogNotificationsHistoryListParams,
 signal?: AbortSignal
) => {
      
      
      return shopInstance<PaginatedNotificationHistoryList>(
      {url: `/api/catalog/notifications/history/`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getCatalogNotificationsHistoryListQueryKey = (params?: CatalogNotificationsHistoryListParams,) => {
    return [`/api/catalog/notifications/history/`, ...(params ? [params]: [])] as const;
    }

    
export const getCatalogNotificationsHistoryListQueryOptions = <TData = Awaited<ReturnType<typeof catalogNotificationsHistoryList>>, TError = ErrorType<unknown>>(params?: CatalogNotificationsHistoryListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogNotificationsHistoryList>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCatalogNotificationsHistoryListQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof catalogNotificationsHistoryList>>> = ({ signal }) => catalogNotificationsHistoryList(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof catalogNotificationsHistoryList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CatalogNotificationsHistoryListQueryResult = NonNullable<Awaited<ReturnType<typeof catalogNotificationsHistoryList>>>
export type CatalogNotificationsHistoryListQueryError = ErrorType<unknown>


export function useCatalogNotificationsHistoryList<TData = Awaited<ReturnType<typeof catalogNotificationsHistoryList>>, TError = ErrorType<unknown>>(
 params: undefined |  CatalogNotificationsHistoryListParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogNotificationsHistoryList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof catalogNotificationsHistoryList>>,
          TError,
          Awaited<ReturnType<typeof catalogNotificationsHistoryList>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCatalogNotificationsHistoryList<TData = Awaited<ReturnType<typeof catalogNotificationsHistoryList>>, TError = ErrorType<unknown>>(
 params?: CatalogNotificationsHistoryListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogNotificationsHistoryList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof catalogNotificationsHistoryList>>,
          TError,
          Awaited<ReturnType<typeof catalogNotificationsHistoryList>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCatalogNotificationsHistoryList<TData = Awaited<ReturnType<typeof catalogNotificationsHistoryList>>, TError = ErrorType<unknown>>(
 params?: CatalogNotificationsHistoryListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogNotificationsHistoryList>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useCatalogNotificationsHistoryList<TData = Awaited<ReturnType<typeof catalogNotificationsHistoryList>>, TError = ErrorType<unknown>>(
 params?: CatalogNotificationsHistoryListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogNotificationsHistoryList>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCatalogNotificationsHistoryListQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Get specific notification from history
 */
export const catalogNotificationsHistoryRetrieve = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return shopInstance<NotificationPreference>(
      {url: `/api/catalog/notifications/history/${id}/`, method: 'GET', signal
    },
      );
    }
  

export const getCatalogNotificationsHistoryRetrieveQueryKey = (id: string,) => {
    return [`/api/catalog/notifications/history/${id}/`] as const;
    }

    
export const getCatalogNotificationsHistoryRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof catalogNotificationsHistoryRetrieve>>, TError = ErrorType<unknown>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogNotificationsHistoryRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCatalogNotificationsHistoryRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof catalogNotificationsHistoryRetrieve>>> = ({ signal }) => catalogNotificationsHistoryRetrieve(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof catalogNotificationsHistoryRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CatalogNotificationsHistoryRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof catalogNotificationsHistoryRetrieve>>>
export type CatalogNotificationsHistoryRetrieveQueryError = ErrorType<unknown>


export function useCatalogNotificationsHistoryRetrieve<TData = Awaited<ReturnType<typeof catalogNotificationsHistoryRetrieve>>, TError = ErrorType<unknown>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogNotificationsHistoryRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof catalogNotificationsHistoryRetrieve>>,
          TError,
          Awaited<ReturnType<typeof catalogNotificationsHistoryRetrieve>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCatalogNotificationsHistoryRetrieve<TData = Awaited<ReturnType<typeof catalogNotificationsHistoryRetrieve>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogNotificationsHistoryRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof catalogNotificationsHistoryRetrieve>>,
          TError,
          Awaited<ReturnType<typeof catalogNotificationsHistoryRetrieve>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCatalogNotificationsHistoryRetrieve<TData = Awaited<ReturnType<typeof catalogNotificationsHistoryRetrieve>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogNotificationsHistoryRetrieve>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useCatalogNotificationsHistoryRetrieve<TData = Awaited<ReturnType<typeof catalogNotificationsHistoryRetrieve>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogNotificationsHistoryRetrieve>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCatalogNotificationsHistoryRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Get current user's notification preferences
 */
export const catalogNotificationsPreferencesRetrieve = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return shopInstance<NotificationPreference>(
      {url: `/api/catalog/notifications/preferences/${id}/`, method: 'GET', signal
    },
      );
    }
  

export const getCatalogNotificationsPreferencesRetrieveQueryKey = (id: string,) => {
    return [`/api/catalog/notifications/preferences/${id}/`] as const;
    }

    
export const getCatalogNotificationsPreferencesRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof catalogNotificationsPreferencesRetrieve>>, TError = ErrorType<unknown>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogNotificationsPreferencesRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCatalogNotificationsPreferencesRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof catalogNotificationsPreferencesRetrieve>>> = ({ signal }) => catalogNotificationsPreferencesRetrieve(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof catalogNotificationsPreferencesRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CatalogNotificationsPreferencesRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof catalogNotificationsPreferencesRetrieve>>>
export type CatalogNotificationsPreferencesRetrieveQueryError = ErrorType<unknown>


export function useCatalogNotificationsPreferencesRetrieve<TData = Awaited<ReturnType<typeof catalogNotificationsPreferencesRetrieve>>, TError = ErrorType<unknown>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogNotificationsPreferencesRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof catalogNotificationsPreferencesRetrieve>>,
          TError,
          Awaited<ReturnType<typeof catalogNotificationsPreferencesRetrieve>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCatalogNotificationsPreferencesRetrieve<TData = Awaited<ReturnType<typeof catalogNotificationsPreferencesRetrieve>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogNotificationsPreferencesRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof catalogNotificationsPreferencesRetrieve>>,
          TError,
          Awaited<ReturnType<typeof catalogNotificationsPreferencesRetrieve>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCatalogNotificationsPreferencesRetrieve<TData = Awaited<ReturnType<typeof catalogNotificationsPreferencesRetrieve>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogNotificationsPreferencesRetrieve>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useCatalogNotificationsPreferencesRetrieve<TData = Awaited<ReturnType<typeof catalogNotificationsPreferencesRetrieve>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogNotificationsPreferencesRetrieve>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCatalogNotificationsPreferencesRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Update notification preferences
 */
export const catalogNotificationsPreferencesPartialUpdate = (
    id: string,
    patchedNotificationPreferenceUpdate: BodyType<PatchedNotificationPreferenceUpdate>,
 ) => {
      
      
      return shopInstance<NotificationPreference>(
      {url: `/api/catalog/notifications/preferences/${id}/`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedNotificationPreferenceUpdate
    },
      );
    }
  


export const getCatalogNotificationsPreferencesPartialUpdateMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof catalogNotificationsPreferencesPartialUpdate>>, TError,{id: string;data: BodyType<PatchedNotificationPreferenceUpdate>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof catalogNotificationsPreferencesPartialUpdate>>, TError,{id: string;data: BodyType<PatchedNotificationPreferenceUpdate>}, TContext> => {

const mutationKey = ['catalogNotificationsPreferencesPartialUpdate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof catalogNotificationsPreferencesPartialUpdate>>, {id: string;data: BodyType<PatchedNotificationPreferenceUpdate>}> = (props) => {
          const {id,data} = props ?? {};

          return  catalogNotificationsPreferencesPartialUpdate(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CatalogNotificationsPreferencesPartialUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof catalogNotificationsPreferencesPartialUpdate>>>
    export type CatalogNotificationsPreferencesPartialUpdateMutationBody = BodyType<PatchedNotificationPreferenceUpdate>
    export type CatalogNotificationsPreferencesPartialUpdateMutationError = ErrorType<unknown>

    export const useCatalogNotificationsPreferencesPartialUpdate = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof catalogNotificationsPreferencesPartialUpdate>>, TError,{id: string;data: BodyType<PatchedNotificationPreferenceUpdate>}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof catalogNotificationsPreferencesPartialUpdate>>,
        TError,
        {id: string;data: BodyType<PatchedNotificationPreferenceUpdate>},
        TContext
      > => {

      const mutationOptions = getCatalogNotificationsPreferencesPartialUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    