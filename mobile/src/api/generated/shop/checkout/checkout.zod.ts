/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * ShopDjango API
 * API for ShopDjango project
 * OpenAPI spec version: 1.0.0
 */
import {
  z as zod
} from 'zod';


/**
 * ViewSet for Cart model with CRUD operations.
 */
export const checkoutCartsListQueryParams = zod.object({
  "ordering": zod.coerce.string().optional().describe('Which field to use when ordering the results.'),
  "page": zod.coerce.number().optional().describe('A page number within the paginated result set.'),
  "page_size": zod.coerce.number().optional().describe('Number of results to return per page.'),
  "search": zod.coerce.string().optional().describe('A search term.')
})

export const checkoutCartsListResponse = zod.object({
  "count": zod.number(),
  "next": zod.url().nullish(),
  "previous": zod.url().nullish(),
  "results": zod.array(zod.object({
  "id": zod.number(),
  "status": zod.enum(['active', 'converted', 'abandoned', 'expired']).describe('* `active` - Active\n* `converted` - Converted to Order\n* `abandoned` - Abandoned\n* `expired` - Expired').optional().describe('Current status of the cart\n\n* `active` - Active\n* `converted` - Converted to Order\n* `abandoned` - Abandoned\n* `expired` - Expired'),
  "item_count": zod.number().describe('Get total number of items in cart.'),
  "subtotal": zod.number().describe('Get subtotal of all items in cart.'),
  "shipping_cost": zod.number().describe('Get shipping cost from selected shipping method.'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created')
}).describe('Simplified cart serializer for list views.'))
})

/**
 * ViewSet for Cart model with CRUD operations.
 */
export const checkoutCartsCreateBody = zod.object({
  "status": zod.enum(['active', 'converted', 'abandoned', 'expired']).describe('* `active` - Active\n* `converted` - Converted to Order\n* `abandoned` - Abandoned\n* `expired` - Expired').optional().describe('Current status of the cart\n\n* `active` - Active\n* `converted` - Converted to Order\n* `abandoned` - Abandoned\n* `expired` - Expired')
}).describe('Serializer for Cart model.')

/**
 * ViewSet for Cart model with CRUD operations.
 */
export const checkoutCartsRetrieveParams = zod.object({
  "id": zod.coerce.string()
})

export const checkoutCartsRetrieveResponseItemsItemProductNameMax = 200;
export const checkoutCartsRetrieveResponseItemsItemProductSlugMax = 200;

export const checkoutCartsRetrieveResponseItemsItemProductSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const checkoutCartsRetrieveResponseItemsItemProductShortDescriptionMax = 500;
export const checkoutCartsRetrieveResponseItemsItemProductPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutCartsRetrieveResponseItemsItemProductOriginalPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutCartsRetrieveResponseItemsItemProductSkuMax = 100;
export const checkoutCartsRetrieveResponseItemsItemProductStockQuantityMin = 0;

export const checkoutCartsRetrieveResponseItemsItemProductStockQuantityMax = 2147483647;
export const checkoutCartsRetrieveResponseItemsItemProductCategoryNameMax = 100;
export const checkoutCartsRetrieveResponseItemsItemProductCategorySlugMax = 100;

export const checkoutCartsRetrieveResponseItemsItemProductCategorySlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const checkoutCartsRetrieveResponseItemsItemProductManufacturerNameMax = 100;
export const checkoutCartsRetrieveResponseItemsItemProductManufacturerSlugMax = 100;

export const checkoutCartsRetrieveResponseItemsItemProductManufacturerSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const checkoutCartsRetrieveResponseItemsItemProductManufacturerWebsiteMax = 200;
export const checkoutCartsRetrieveResponseItemsItemQuantityMax = 2147483647;
export const checkoutCartsRetrieveResponseItemsItemUnitPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutCartsRetrieveResponseShippingAddressProfileFirstNameMax = 150;
export const checkoutCartsRetrieveResponseShippingAddressProfileLastNameMax = 150;
export const checkoutCartsRetrieveResponseShippingAddressAddressMax = 255;
export const checkoutCartsRetrieveResponseShippingAddressCityMax = 100;
export const checkoutCartsRetrieveResponseShippingAddressPostalCodeMax = 20;
export const checkoutCartsRetrieveResponseShippingAddressLabelMax = 50;
export const checkoutCartsRetrieveResponseShippingMethodNameMax = 100;
export const checkoutCartsRetrieveResponseShippingMethodPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutCartsRetrieveResponseAppliedCouponCodeMax = 20;
export const checkoutCartsRetrieveResponseAppliedCouponNameMax = 100;
export const checkoutCartsRetrieveResponseAppliedCouponDiscountAmountRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutCartsRetrieveResponseAppliedCouponMaxUsesMin = 0;

export const checkoutCartsRetrieveResponseAppliedCouponMaxUsesMax = 2147483647;
export const checkoutCartsRetrieveResponseAppliedCouponMaxUsesPerUserMin = 0;

export const checkoutCartsRetrieveResponseAppliedCouponMaxUsesPerUserMax = 2147483647;


export const checkoutCartsRetrieveResponse = zod.object({
  "id": zod.number(),
  "user": zod.number().nullable().describe('User who owns this cart'),
  "status": zod.enum(['active', 'converted', 'abandoned', 'expired']).describe('* `active` - Active\n* `converted` - Converted to Order\n* `abandoned` - Abandoned\n* `expired` - Expired').optional().describe('Current status of the cart\n\n* `active` - Active\n* `converted` - Converted to Order\n* `abandoned` - Abandoned\n* `expired` - Expired'),
  "items": zod.array(zod.object({
  "id": zod.number(),
  "product": zod.object({
  "id": zod.number(),
  "name": zod.string().max(checkoutCartsRetrieveResponseItemsItemProductNameMax).describe('Product name'),
  "slug": zod.string().max(checkoutCartsRetrieveResponseItemsItemProductSlugMax).regex(checkoutCartsRetrieveResponseItemsItemProductSlugRegExp).describe('URL-friendly version of the name'),
  "short_description": zod.string().max(checkoutCartsRetrieveResponseItemsItemProductShortDescriptionMax).optional().describe('Short description for listings'),
  "price": zod.regex(checkoutCartsRetrieveResponseItemsItemProductPriceRegExp).describe('Product price'),
  "original_price": zod.regex(checkoutCartsRetrieveResponseItemsItemProductOriginalPriceRegExp).describe('Original price for showing discounts'),
  "current_price": zod.string().describe('Get current price as formatted decimal string.'),
  "discount_percentage": zod.number().describe('Calculate discount percentage.'),
  "sku": zod.string().max(checkoutCartsRetrieveResponseItemsItemProductSkuMax).describe('Unique product identifier'),
  "stock_quantity": zod.number().min(checkoutCartsRetrieveResponseItemsItemProductStockQuantityMin).max(checkoutCartsRetrieveResponseItemsItemProductStockQuantityMax).optional().describe('Available quantity in stock'),
  "is_visible": zod.boolean().optional().describe('Is product visible to the users'),
  "is_on_sale": zod.boolean(),
  "is_in_stock": zod.boolean().describe('Check if product is in stock.'),
  "is_available": zod.boolean().describe('Check if product is available for purchase.'),
  "category": zod.object({
  "id": zod.number(),
  "name": zod.string().max(checkoutCartsRetrieveResponseItemsItemProductCategoryNameMax).describe('Category name'),
  "slug": zod.string().max(checkoutCartsRetrieveResponseItemsItemProductCategorySlugMax).regex(checkoutCartsRetrieveResponseItemsItemProductCategorySlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Category description'),
  "is_active": zod.boolean().optional().describe('Whether this category is visible'),
  "active_product_count": zod.number(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Category model.'),
  "manufacturer": zod.object({
  "id": zod.number(),
  "name": zod.string().max(checkoutCartsRetrieveResponseItemsItemProductManufacturerNameMax).describe('Manufacturer name'),
  "slug": zod.string().max(checkoutCartsRetrieveResponseItemsItemProductManufacturerSlugMax).regex(checkoutCartsRetrieveResponseItemsItemProductManufacturerSlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Manufacturer description'),
  "website": zod.string().max(checkoutCartsRetrieveResponseItemsItemProductManufacturerWebsiteMax).optional().describe('Manufacturer website URL'),
  "is_active": zod.boolean().optional().describe('Whether this manufacturer is visible'),
  "active_product_count": zod.number(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Manufacturer model.'),
  "primary_image": zod.string().nullable().describe('Get URL of primary product image.'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created')
}).describe('Simplified serializer for product listings.'),
  "product_id": zod.number(),
  "quantity": zod.number().min(1).max(checkoutCartsRetrieveResponseItemsItemQuantityMax).optional().describe('Quantity of this product in cart'),
  "unit_price": zod.regex(checkoutCartsRetrieveResponseItemsItemUnitPriceRegExp).describe('Price per unit when added to cart'),
  "total_price": zod.number().describe('Get total price for this item.'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for CartItem model.')),
  "shipping_address": zod.object({
  "id": zod.number(),
  "profile": zod.object({
  "id": zod.number(),
  "user_email": zod.string(),
  "display_name": zod.string(),
  "first_name": zod.string().max(checkoutCartsRetrieveResponseShippingAddressProfileFirstNameMax).optional().describe('User\'s first name'),
  "last_name": zod.string().max(checkoutCartsRetrieveResponseShippingAddressProfileLastNameMax).optional().describe('User\'s last name')
}).describe('Minimal profile serializer for address responses.'),
  "address": zod.string().max(checkoutCartsRetrieveResponseShippingAddressAddressMax).describe('Street address, apartment, unit, etc.'),
  "city": zod.string().max(checkoutCartsRetrieveResponseShippingAddressCityMax).describe('City name'),
  "postal_code": zod.string().max(checkoutCartsRetrieveResponseShippingAddressPostalCodeMax).describe('ZIP code or postal code'),
  "country": zod.number().describe('Country for this address'),
  "is_default": zod.boolean().optional().describe('Whether this is the default address'),
  "label": zod.string().max(checkoutCartsRetrieveResponseShippingAddressLabelMax).optional().describe('Optional label like \'Home\', \'Office\', etc.'),
  "full_address": zod.string(),
  "address_dict": zod.record(zod.string(), zod.any()),
  "is_complete": zod.boolean(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}),
  "shipping_method": zod.object({
  "id": zod.number(),
  "name": zod.string().max(checkoutCartsRetrieveResponseShippingMethodNameMax).describe('Name of the shipping method (e.g., \'Standard\', \'Express\')'),
  "price": zod.regex(checkoutCartsRetrieveResponseShippingMethodPriceRegExp).describe('Shipping cost'),
  "courier": zod.number().describe('Courier company providing this shipping method')
}).describe('Serializer for ShippingMethod model.'),
  "applied_coupon": zod.object({
  "id": zod.number(),
  "code": zod.string().max(checkoutCartsRetrieveResponseAppliedCouponCodeMax).describe('Coupon code'),
  "name": zod.string().max(checkoutCartsRetrieveResponseAppliedCouponNameMax).describe('Display name'),
  "description": zod.string().optional(),
  "discount_amount": zod.regex(checkoutCartsRetrieveResponseAppliedCouponDiscountAmountRegExp).describe('Fixed discount amount'),
  "valid_from": zod.iso.datetime({}),
  "valid_until": zod.iso.datetime({}),
  "max_uses": zod.number().min(checkoutCartsRetrieveResponseAppliedCouponMaxUsesMin).max(checkoutCartsRetrieveResponseAppliedCouponMaxUsesMax).nullish().describe('Maximum total uses (null = unlimited)'),
  "max_uses_per_user": zod.number().min(checkoutCartsRetrieveResponseAppliedCouponMaxUsesPerUserMin).max(checkoutCartsRetrieveResponseAppliedCouponMaxUsesPerUserMax).optional().describe('Maximum uses per user'),
  "usage_count": zod.number()
}).describe('Serializer for coupon list and detail views.'),
  "item_count": zod.number().describe('Get total number of items in cart.'),
  "subtotal": zod.number().describe('Get subtotal of all items in cart.'),
  "shipping_cost": zod.number().describe('Get shipping cost from selected shipping method.'),
  "coupon_discount": zod.number().describe('Get coupon discount amount.'),
  "total": zod.number().describe('Get total including shipping.'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Cart model.')

/**
 * ViewSet for Cart model with CRUD operations.
 */
export const checkoutCartsUpdateParams = zod.object({
  "id": zod.coerce.string()
})

export const checkoutCartsUpdateBody = zod.object({
  "status": zod.enum(['active', 'converted', 'abandoned', 'expired']).describe('* `active` - Active\n* `converted` - Converted to Order\n* `abandoned` - Abandoned\n* `expired` - Expired').optional().describe('Current status of the cart\n\n* `active` - Active\n* `converted` - Converted to Order\n* `abandoned` - Abandoned\n* `expired` - Expired')
}).describe('Serializer for Cart model.')

export const checkoutCartsUpdateResponseItemsItemProductNameMax = 200;
export const checkoutCartsUpdateResponseItemsItemProductSlugMax = 200;

export const checkoutCartsUpdateResponseItemsItemProductSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const checkoutCartsUpdateResponseItemsItemProductShortDescriptionMax = 500;
export const checkoutCartsUpdateResponseItemsItemProductPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutCartsUpdateResponseItemsItemProductOriginalPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutCartsUpdateResponseItemsItemProductSkuMax = 100;
export const checkoutCartsUpdateResponseItemsItemProductStockQuantityMin = 0;

export const checkoutCartsUpdateResponseItemsItemProductStockQuantityMax = 2147483647;
export const checkoutCartsUpdateResponseItemsItemProductCategoryNameMax = 100;
export const checkoutCartsUpdateResponseItemsItemProductCategorySlugMax = 100;

export const checkoutCartsUpdateResponseItemsItemProductCategorySlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const checkoutCartsUpdateResponseItemsItemProductManufacturerNameMax = 100;
export const checkoutCartsUpdateResponseItemsItemProductManufacturerSlugMax = 100;

export const checkoutCartsUpdateResponseItemsItemProductManufacturerSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const checkoutCartsUpdateResponseItemsItemProductManufacturerWebsiteMax = 200;
export const checkoutCartsUpdateResponseItemsItemQuantityMax = 2147483647;
export const checkoutCartsUpdateResponseItemsItemUnitPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutCartsUpdateResponseShippingAddressProfileFirstNameMax = 150;
export const checkoutCartsUpdateResponseShippingAddressProfileLastNameMax = 150;
export const checkoutCartsUpdateResponseShippingAddressAddressMax = 255;
export const checkoutCartsUpdateResponseShippingAddressCityMax = 100;
export const checkoutCartsUpdateResponseShippingAddressPostalCodeMax = 20;
export const checkoutCartsUpdateResponseShippingAddressLabelMax = 50;
export const checkoutCartsUpdateResponseShippingMethodNameMax = 100;
export const checkoutCartsUpdateResponseShippingMethodPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutCartsUpdateResponseAppliedCouponCodeMax = 20;
export const checkoutCartsUpdateResponseAppliedCouponNameMax = 100;
export const checkoutCartsUpdateResponseAppliedCouponDiscountAmountRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutCartsUpdateResponseAppliedCouponMaxUsesMin = 0;

export const checkoutCartsUpdateResponseAppliedCouponMaxUsesMax = 2147483647;
export const checkoutCartsUpdateResponseAppliedCouponMaxUsesPerUserMin = 0;

export const checkoutCartsUpdateResponseAppliedCouponMaxUsesPerUserMax = 2147483647;


export const checkoutCartsUpdateResponse = zod.object({
  "id": zod.number(),
  "user": zod.number().nullable().describe('User who owns this cart'),
  "status": zod.enum(['active', 'converted', 'abandoned', 'expired']).describe('* `active` - Active\n* `converted` - Converted to Order\n* `abandoned` - Abandoned\n* `expired` - Expired').optional().describe('Current status of the cart\n\n* `active` - Active\n* `converted` - Converted to Order\n* `abandoned` - Abandoned\n* `expired` - Expired'),
  "items": zod.array(zod.object({
  "id": zod.number(),
  "product": zod.object({
  "id": zod.number(),
  "name": zod.string().max(checkoutCartsUpdateResponseItemsItemProductNameMax).describe('Product name'),
  "slug": zod.string().max(checkoutCartsUpdateResponseItemsItemProductSlugMax).regex(checkoutCartsUpdateResponseItemsItemProductSlugRegExp).describe('URL-friendly version of the name'),
  "short_description": zod.string().max(checkoutCartsUpdateResponseItemsItemProductShortDescriptionMax).optional().describe('Short description for listings'),
  "price": zod.regex(checkoutCartsUpdateResponseItemsItemProductPriceRegExp).describe('Product price'),
  "original_price": zod.regex(checkoutCartsUpdateResponseItemsItemProductOriginalPriceRegExp).describe('Original price for showing discounts'),
  "current_price": zod.string().describe('Get current price as formatted decimal string.'),
  "discount_percentage": zod.number().describe('Calculate discount percentage.'),
  "sku": zod.string().max(checkoutCartsUpdateResponseItemsItemProductSkuMax).describe('Unique product identifier'),
  "stock_quantity": zod.number().min(checkoutCartsUpdateResponseItemsItemProductStockQuantityMin).max(checkoutCartsUpdateResponseItemsItemProductStockQuantityMax).optional().describe('Available quantity in stock'),
  "is_visible": zod.boolean().optional().describe('Is product visible to the users'),
  "is_on_sale": zod.boolean(),
  "is_in_stock": zod.boolean().describe('Check if product is in stock.'),
  "is_available": zod.boolean().describe('Check if product is available for purchase.'),
  "category": zod.object({
  "id": zod.number(),
  "name": zod.string().max(checkoutCartsUpdateResponseItemsItemProductCategoryNameMax).describe('Category name'),
  "slug": zod.string().max(checkoutCartsUpdateResponseItemsItemProductCategorySlugMax).regex(checkoutCartsUpdateResponseItemsItemProductCategorySlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Category description'),
  "is_active": zod.boolean().optional().describe('Whether this category is visible'),
  "active_product_count": zod.number(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Category model.'),
  "manufacturer": zod.object({
  "id": zod.number(),
  "name": zod.string().max(checkoutCartsUpdateResponseItemsItemProductManufacturerNameMax).describe('Manufacturer name'),
  "slug": zod.string().max(checkoutCartsUpdateResponseItemsItemProductManufacturerSlugMax).regex(checkoutCartsUpdateResponseItemsItemProductManufacturerSlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Manufacturer description'),
  "website": zod.string().max(checkoutCartsUpdateResponseItemsItemProductManufacturerWebsiteMax).optional().describe('Manufacturer website URL'),
  "is_active": zod.boolean().optional().describe('Whether this manufacturer is visible'),
  "active_product_count": zod.number(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Manufacturer model.'),
  "primary_image": zod.string().nullable().describe('Get URL of primary product image.'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created')
}).describe('Simplified serializer for product listings.'),
  "product_id": zod.number(),
  "quantity": zod.number().min(1).max(checkoutCartsUpdateResponseItemsItemQuantityMax).optional().describe('Quantity of this product in cart'),
  "unit_price": zod.regex(checkoutCartsUpdateResponseItemsItemUnitPriceRegExp).describe('Price per unit when added to cart'),
  "total_price": zod.number().describe('Get total price for this item.'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for CartItem model.')),
  "shipping_address": zod.object({
  "id": zod.number(),
  "profile": zod.object({
  "id": zod.number(),
  "user_email": zod.string(),
  "display_name": zod.string(),
  "first_name": zod.string().max(checkoutCartsUpdateResponseShippingAddressProfileFirstNameMax).optional().describe('User\'s first name'),
  "last_name": zod.string().max(checkoutCartsUpdateResponseShippingAddressProfileLastNameMax).optional().describe('User\'s last name')
}).describe('Minimal profile serializer for address responses.'),
  "address": zod.string().max(checkoutCartsUpdateResponseShippingAddressAddressMax).describe('Street address, apartment, unit, etc.'),
  "city": zod.string().max(checkoutCartsUpdateResponseShippingAddressCityMax).describe('City name'),
  "postal_code": zod.string().max(checkoutCartsUpdateResponseShippingAddressPostalCodeMax).describe('ZIP code or postal code'),
  "country": zod.number().describe('Country for this address'),
  "is_default": zod.boolean().optional().describe('Whether this is the default address'),
  "label": zod.string().max(checkoutCartsUpdateResponseShippingAddressLabelMax).optional().describe('Optional label like \'Home\', \'Office\', etc.'),
  "full_address": zod.string(),
  "address_dict": zod.record(zod.string(), zod.any()),
  "is_complete": zod.boolean(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}),
  "shipping_method": zod.object({
  "id": zod.number(),
  "name": zod.string().max(checkoutCartsUpdateResponseShippingMethodNameMax).describe('Name of the shipping method (e.g., \'Standard\', \'Express\')'),
  "price": zod.regex(checkoutCartsUpdateResponseShippingMethodPriceRegExp).describe('Shipping cost'),
  "courier": zod.number().describe('Courier company providing this shipping method')
}).describe('Serializer for ShippingMethod model.'),
  "applied_coupon": zod.object({
  "id": zod.number(),
  "code": zod.string().max(checkoutCartsUpdateResponseAppliedCouponCodeMax).describe('Coupon code'),
  "name": zod.string().max(checkoutCartsUpdateResponseAppliedCouponNameMax).describe('Display name'),
  "description": zod.string().optional(),
  "discount_amount": zod.regex(checkoutCartsUpdateResponseAppliedCouponDiscountAmountRegExp).describe('Fixed discount amount'),
  "valid_from": zod.iso.datetime({}),
  "valid_until": zod.iso.datetime({}),
  "max_uses": zod.number().min(checkoutCartsUpdateResponseAppliedCouponMaxUsesMin).max(checkoutCartsUpdateResponseAppliedCouponMaxUsesMax).nullish().describe('Maximum total uses (null = unlimited)'),
  "max_uses_per_user": zod.number().min(checkoutCartsUpdateResponseAppliedCouponMaxUsesPerUserMin).max(checkoutCartsUpdateResponseAppliedCouponMaxUsesPerUserMax).optional().describe('Maximum uses per user'),
  "usage_count": zod.number()
}).describe('Serializer for coupon list and detail views.'),
  "item_count": zod.number().describe('Get total number of items in cart.'),
  "subtotal": zod.number().describe('Get subtotal of all items in cart.'),
  "shipping_cost": zod.number().describe('Get shipping cost from selected shipping method.'),
  "coupon_discount": zod.number().describe('Get coupon discount amount.'),
  "total": zod.number().describe('Get total including shipping.'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Cart model.')

/**
 * ViewSet for Cart model with CRUD operations.
 */
export const checkoutCartsPartialUpdateParams = zod.object({
  "id": zod.coerce.string()
})

export const checkoutCartsPartialUpdateBody = zod.object({
  "status": zod.enum(['active', 'converted', 'abandoned', 'expired']).describe('* `active` - Active\n* `converted` - Converted to Order\n* `abandoned` - Abandoned\n* `expired` - Expired').optional().describe('Current status of the cart\n\n* `active` - Active\n* `converted` - Converted to Order\n* `abandoned` - Abandoned\n* `expired` - Expired')
}).describe('Serializer for Cart model.')

export const checkoutCartsPartialUpdateResponseItemsItemProductNameMax = 200;
export const checkoutCartsPartialUpdateResponseItemsItemProductSlugMax = 200;

export const checkoutCartsPartialUpdateResponseItemsItemProductSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const checkoutCartsPartialUpdateResponseItemsItemProductShortDescriptionMax = 500;
export const checkoutCartsPartialUpdateResponseItemsItemProductPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutCartsPartialUpdateResponseItemsItemProductOriginalPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutCartsPartialUpdateResponseItemsItemProductSkuMax = 100;
export const checkoutCartsPartialUpdateResponseItemsItemProductStockQuantityMin = 0;

export const checkoutCartsPartialUpdateResponseItemsItemProductStockQuantityMax = 2147483647;
export const checkoutCartsPartialUpdateResponseItemsItemProductCategoryNameMax = 100;
export const checkoutCartsPartialUpdateResponseItemsItemProductCategorySlugMax = 100;

export const checkoutCartsPartialUpdateResponseItemsItemProductCategorySlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const checkoutCartsPartialUpdateResponseItemsItemProductManufacturerNameMax = 100;
export const checkoutCartsPartialUpdateResponseItemsItemProductManufacturerSlugMax = 100;

export const checkoutCartsPartialUpdateResponseItemsItemProductManufacturerSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const checkoutCartsPartialUpdateResponseItemsItemProductManufacturerWebsiteMax = 200;
export const checkoutCartsPartialUpdateResponseItemsItemQuantityMax = 2147483647;
export const checkoutCartsPartialUpdateResponseItemsItemUnitPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutCartsPartialUpdateResponseShippingAddressProfileFirstNameMax = 150;
export const checkoutCartsPartialUpdateResponseShippingAddressProfileLastNameMax = 150;
export const checkoutCartsPartialUpdateResponseShippingAddressAddressMax = 255;
export const checkoutCartsPartialUpdateResponseShippingAddressCityMax = 100;
export const checkoutCartsPartialUpdateResponseShippingAddressPostalCodeMax = 20;
export const checkoutCartsPartialUpdateResponseShippingAddressLabelMax = 50;
export const checkoutCartsPartialUpdateResponseShippingMethodNameMax = 100;
export const checkoutCartsPartialUpdateResponseShippingMethodPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutCartsPartialUpdateResponseAppliedCouponCodeMax = 20;
export const checkoutCartsPartialUpdateResponseAppliedCouponNameMax = 100;
export const checkoutCartsPartialUpdateResponseAppliedCouponDiscountAmountRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutCartsPartialUpdateResponseAppliedCouponMaxUsesMin = 0;

export const checkoutCartsPartialUpdateResponseAppliedCouponMaxUsesMax = 2147483647;
export const checkoutCartsPartialUpdateResponseAppliedCouponMaxUsesPerUserMin = 0;

export const checkoutCartsPartialUpdateResponseAppliedCouponMaxUsesPerUserMax = 2147483647;


export const checkoutCartsPartialUpdateResponse = zod.object({
  "id": zod.number(),
  "user": zod.number().nullable().describe('User who owns this cart'),
  "status": zod.enum(['active', 'converted', 'abandoned', 'expired']).describe('* `active` - Active\n* `converted` - Converted to Order\n* `abandoned` - Abandoned\n* `expired` - Expired').optional().describe('Current status of the cart\n\n* `active` - Active\n* `converted` - Converted to Order\n* `abandoned` - Abandoned\n* `expired` - Expired'),
  "items": zod.array(zod.object({
  "id": zod.number(),
  "product": zod.object({
  "id": zod.number(),
  "name": zod.string().max(checkoutCartsPartialUpdateResponseItemsItemProductNameMax).describe('Product name'),
  "slug": zod.string().max(checkoutCartsPartialUpdateResponseItemsItemProductSlugMax).regex(checkoutCartsPartialUpdateResponseItemsItemProductSlugRegExp).describe('URL-friendly version of the name'),
  "short_description": zod.string().max(checkoutCartsPartialUpdateResponseItemsItemProductShortDescriptionMax).optional().describe('Short description for listings'),
  "price": zod.regex(checkoutCartsPartialUpdateResponseItemsItemProductPriceRegExp).describe('Product price'),
  "original_price": zod.regex(checkoutCartsPartialUpdateResponseItemsItemProductOriginalPriceRegExp).describe('Original price for showing discounts'),
  "current_price": zod.string().describe('Get current price as formatted decimal string.'),
  "discount_percentage": zod.number().describe('Calculate discount percentage.'),
  "sku": zod.string().max(checkoutCartsPartialUpdateResponseItemsItemProductSkuMax).describe('Unique product identifier'),
  "stock_quantity": zod.number().min(checkoutCartsPartialUpdateResponseItemsItemProductStockQuantityMin).max(checkoutCartsPartialUpdateResponseItemsItemProductStockQuantityMax).optional().describe('Available quantity in stock'),
  "is_visible": zod.boolean().optional().describe('Is product visible to the users'),
  "is_on_sale": zod.boolean(),
  "is_in_stock": zod.boolean().describe('Check if product is in stock.'),
  "is_available": zod.boolean().describe('Check if product is available for purchase.'),
  "category": zod.object({
  "id": zod.number(),
  "name": zod.string().max(checkoutCartsPartialUpdateResponseItemsItemProductCategoryNameMax).describe('Category name'),
  "slug": zod.string().max(checkoutCartsPartialUpdateResponseItemsItemProductCategorySlugMax).regex(checkoutCartsPartialUpdateResponseItemsItemProductCategorySlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Category description'),
  "is_active": zod.boolean().optional().describe('Whether this category is visible'),
  "active_product_count": zod.number(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Category model.'),
  "manufacturer": zod.object({
  "id": zod.number(),
  "name": zod.string().max(checkoutCartsPartialUpdateResponseItemsItemProductManufacturerNameMax).describe('Manufacturer name'),
  "slug": zod.string().max(checkoutCartsPartialUpdateResponseItemsItemProductManufacturerSlugMax).regex(checkoutCartsPartialUpdateResponseItemsItemProductManufacturerSlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Manufacturer description'),
  "website": zod.string().max(checkoutCartsPartialUpdateResponseItemsItemProductManufacturerWebsiteMax).optional().describe('Manufacturer website URL'),
  "is_active": zod.boolean().optional().describe('Whether this manufacturer is visible'),
  "active_product_count": zod.number(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Manufacturer model.'),
  "primary_image": zod.string().nullable().describe('Get URL of primary product image.'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created')
}).describe('Simplified serializer for product listings.'),
  "product_id": zod.number(),
  "quantity": zod.number().min(1).max(checkoutCartsPartialUpdateResponseItemsItemQuantityMax).optional().describe('Quantity of this product in cart'),
  "unit_price": zod.regex(checkoutCartsPartialUpdateResponseItemsItemUnitPriceRegExp).describe('Price per unit when added to cart'),
  "total_price": zod.number().describe('Get total price for this item.'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for CartItem model.')),
  "shipping_address": zod.object({
  "id": zod.number(),
  "profile": zod.object({
  "id": zod.number(),
  "user_email": zod.string(),
  "display_name": zod.string(),
  "first_name": zod.string().max(checkoutCartsPartialUpdateResponseShippingAddressProfileFirstNameMax).optional().describe('User\'s first name'),
  "last_name": zod.string().max(checkoutCartsPartialUpdateResponseShippingAddressProfileLastNameMax).optional().describe('User\'s last name')
}).describe('Minimal profile serializer for address responses.'),
  "address": zod.string().max(checkoutCartsPartialUpdateResponseShippingAddressAddressMax).describe('Street address, apartment, unit, etc.'),
  "city": zod.string().max(checkoutCartsPartialUpdateResponseShippingAddressCityMax).describe('City name'),
  "postal_code": zod.string().max(checkoutCartsPartialUpdateResponseShippingAddressPostalCodeMax).describe('ZIP code or postal code'),
  "country": zod.number().describe('Country for this address'),
  "is_default": zod.boolean().optional().describe('Whether this is the default address'),
  "label": zod.string().max(checkoutCartsPartialUpdateResponseShippingAddressLabelMax).optional().describe('Optional label like \'Home\', \'Office\', etc.'),
  "full_address": zod.string(),
  "address_dict": zod.record(zod.string(), zod.any()),
  "is_complete": zod.boolean(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}),
  "shipping_method": zod.object({
  "id": zod.number(),
  "name": zod.string().max(checkoutCartsPartialUpdateResponseShippingMethodNameMax).describe('Name of the shipping method (e.g., \'Standard\', \'Express\')'),
  "price": zod.regex(checkoutCartsPartialUpdateResponseShippingMethodPriceRegExp).describe('Shipping cost'),
  "courier": zod.number().describe('Courier company providing this shipping method')
}).describe('Serializer for ShippingMethod model.'),
  "applied_coupon": zod.object({
  "id": zod.number(),
  "code": zod.string().max(checkoutCartsPartialUpdateResponseAppliedCouponCodeMax).describe('Coupon code'),
  "name": zod.string().max(checkoutCartsPartialUpdateResponseAppliedCouponNameMax).describe('Display name'),
  "description": zod.string().optional(),
  "discount_amount": zod.regex(checkoutCartsPartialUpdateResponseAppliedCouponDiscountAmountRegExp).describe('Fixed discount amount'),
  "valid_from": zod.iso.datetime({}),
  "valid_until": zod.iso.datetime({}),
  "max_uses": zod.number().min(checkoutCartsPartialUpdateResponseAppliedCouponMaxUsesMin).max(checkoutCartsPartialUpdateResponseAppliedCouponMaxUsesMax).nullish().describe('Maximum total uses (null = unlimited)'),
  "max_uses_per_user": zod.number().min(checkoutCartsPartialUpdateResponseAppliedCouponMaxUsesPerUserMin).max(checkoutCartsPartialUpdateResponseAppliedCouponMaxUsesPerUserMax).optional().describe('Maximum uses per user'),
  "usage_count": zod.number()
}).describe('Serializer for coupon list and detail views.'),
  "item_count": zod.number().describe('Get total number of items in cart.'),
  "subtotal": zod.number().describe('Get subtotal of all items in cart.'),
  "shipping_cost": zod.number().describe('Get shipping cost from selected shipping method.'),
  "coupon_discount": zod.number().describe('Get coupon discount amount.'),
  "total": zod.number().describe('Get total including shipping.'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Cart model.')

/**
 * Handle deletion with foreign key constraint protection.
 */
export const checkoutCartsDestroyParams = zod.object({
  "id": zod.coerce.string()
})

/**
 * Get current user's active cart.
 */
export const checkoutCartsCurrentRetrieveResponseItemsItemProductNameMax = 200;
export const checkoutCartsCurrentRetrieveResponseItemsItemProductSlugMax = 200;

export const checkoutCartsCurrentRetrieveResponseItemsItemProductSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const checkoutCartsCurrentRetrieveResponseItemsItemProductShortDescriptionMax = 500;
export const checkoutCartsCurrentRetrieveResponseItemsItemProductPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutCartsCurrentRetrieveResponseItemsItemProductOriginalPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutCartsCurrentRetrieveResponseItemsItemProductSkuMax = 100;
export const checkoutCartsCurrentRetrieveResponseItemsItemProductStockQuantityMin = 0;

export const checkoutCartsCurrentRetrieveResponseItemsItemProductStockQuantityMax = 2147483647;
export const checkoutCartsCurrentRetrieveResponseItemsItemProductCategoryNameMax = 100;
export const checkoutCartsCurrentRetrieveResponseItemsItemProductCategorySlugMax = 100;

export const checkoutCartsCurrentRetrieveResponseItemsItemProductCategorySlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const checkoutCartsCurrentRetrieveResponseItemsItemProductManufacturerNameMax = 100;
export const checkoutCartsCurrentRetrieveResponseItemsItemProductManufacturerSlugMax = 100;

export const checkoutCartsCurrentRetrieveResponseItemsItemProductManufacturerSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const checkoutCartsCurrentRetrieveResponseItemsItemProductManufacturerWebsiteMax = 200;
export const checkoutCartsCurrentRetrieveResponseItemsItemQuantityMax = 2147483647;
export const checkoutCartsCurrentRetrieveResponseItemsItemUnitPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutCartsCurrentRetrieveResponseShippingAddressProfileFirstNameMax = 150;
export const checkoutCartsCurrentRetrieveResponseShippingAddressProfileLastNameMax = 150;
export const checkoutCartsCurrentRetrieveResponseShippingAddressAddressMax = 255;
export const checkoutCartsCurrentRetrieveResponseShippingAddressCityMax = 100;
export const checkoutCartsCurrentRetrieveResponseShippingAddressPostalCodeMax = 20;
export const checkoutCartsCurrentRetrieveResponseShippingAddressLabelMax = 50;
export const checkoutCartsCurrentRetrieveResponseShippingMethodNameMax = 100;
export const checkoutCartsCurrentRetrieveResponseShippingMethodPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutCartsCurrentRetrieveResponseAppliedCouponCodeMax = 20;
export const checkoutCartsCurrentRetrieveResponseAppliedCouponNameMax = 100;
export const checkoutCartsCurrentRetrieveResponseAppliedCouponDiscountAmountRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutCartsCurrentRetrieveResponseAppliedCouponMaxUsesMin = 0;

export const checkoutCartsCurrentRetrieveResponseAppliedCouponMaxUsesMax = 2147483647;
export const checkoutCartsCurrentRetrieveResponseAppliedCouponMaxUsesPerUserMin = 0;

export const checkoutCartsCurrentRetrieveResponseAppliedCouponMaxUsesPerUserMax = 2147483647;


export const checkoutCartsCurrentRetrieveResponse = zod.object({
  "id": zod.number(),
  "user": zod.number().nullable().describe('User who owns this cart'),
  "status": zod.enum(['active', 'converted', 'abandoned', 'expired']).describe('* `active` - Active\n* `converted` - Converted to Order\n* `abandoned` - Abandoned\n* `expired` - Expired').optional().describe('Current status of the cart\n\n* `active` - Active\n* `converted` - Converted to Order\n* `abandoned` - Abandoned\n* `expired` - Expired'),
  "items": zod.array(zod.object({
  "id": zod.number(),
  "product": zod.object({
  "id": zod.number(),
  "name": zod.string().max(checkoutCartsCurrentRetrieveResponseItemsItemProductNameMax).describe('Product name'),
  "slug": zod.string().max(checkoutCartsCurrentRetrieveResponseItemsItemProductSlugMax).regex(checkoutCartsCurrentRetrieveResponseItemsItemProductSlugRegExp).describe('URL-friendly version of the name'),
  "short_description": zod.string().max(checkoutCartsCurrentRetrieveResponseItemsItemProductShortDescriptionMax).optional().describe('Short description for listings'),
  "price": zod.regex(checkoutCartsCurrentRetrieveResponseItemsItemProductPriceRegExp).describe('Product price'),
  "original_price": zod.regex(checkoutCartsCurrentRetrieveResponseItemsItemProductOriginalPriceRegExp).describe('Original price for showing discounts'),
  "current_price": zod.string().describe('Get current price as formatted decimal string.'),
  "discount_percentage": zod.number().describe('Calculate discount percentage.'),
  "sku": zod.string().max(checkoutCartsCurrentRetrieveResponseItemsItemProductSkuMax).describe('Unique product identifier'),
  "stock_quantity": zod.number().min(checkoutCartsCurrentRetrieveResponseItemsItemProductStockQuantityMin).max(checkoutCartsCurrentRetrieveResponseItemsItemProductStockQuantityMax).optional().describe('Available quantity in stock'),
  "is_visible": zod.boolean().optional().describe('Is product visible to the users'),
  "is_on_sale": zod.boolean(),
  "is_in_stock": zod.boolean().describe('Check if product is in stock.'),
  "is_available": zod.boolean().describe('Check if product is available for purchase.'),
  "category": zod.object({
  "id": zod.number(),
  "name": zod.string().max(checkoutCartsCurrentRetrieveResponseItemsItemProductCategoryNameMax).describe('Category name'),
  "slug": zod.string().max(checkoutCartsCurrentRetrieveResponseItemsItemProductCategorySlugMax).regex(checkoutCartsCurrentRetrieveResponseItemsItemProductCategorySlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Category description'),
  "is_active": zod.boolean().optional().describe('Whether this category is visible'),
  "active_product_count": zod.number(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Category model.'),
  "manufacturer": zod.object({
  "id": zod.number(),
  "name": zod.string().max(checkoutCartsCurrentRetrieveResponseItemsItemProductManufacturerNameMax).describe('Manufacturer name'),
  "slug": zod.string().max(checkoutCartsCurrentRetrieveResponseItemsItemProductManufacturerSlugMax).regex(checkoutCartsCurrentRetrieveResponseItemsItemProductManufacturerSlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Manufacturer description'),
  "website": zod.string().max(checkoutCartsCurrentRetrieveResponseItemsItemProductManufacturerWebsiteMax).optional().describe('Manufacturer website URL'),
  "is_active": zod.boolean().optional().describe('Whether this manufacturer is visible'),
  "active_product_count": zod.number(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Manufacturer model.'),
  "primary_image": zod.string().nullable().describe('Get URL of primary product image.'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created')
}).describe('Simplified serializer for product listings.'),
  "product_id": zod.number(),
  "quantity": zod.number().min(1).max(checkoutCartsCurrentRetrieveResponseItemsItemQuantityMax).optional().describe('Quantity of this product in cart'),
  "unit_price": zod.regex(checkoutCartsCurrentRetrieveResponseItemsItemUnitPriceRegExp).describe('Price per unit when added to cart'),
  "total_price": zod.number().describe('Get total price for this item.'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for CartItem model.')),
  "shipping_address": zod.object({
  "id": zod.number(),
  "profile": zod.object({
  "id": zod.number(),
  "user_email": zod.string(),
  "display_name": zod.string(),
  "first_name": zod.string().max(checkoutCartsCurrentRetrieveResponseShippingAddressProfileFirstNameMax).optional().describe('User\'s first name'),
  "last_name": zod.string().max(checkoutCartsCurrentRetrieveResponseShippingAddressProfileLastNameMax).optional().describe('User\'s last name')
}).describe('Minimal profile serializer for address responses.'),
  "address": zod.string().max(checkoutCartsCurrentRetrieveResponseShippingAddressAddressMax).describe('Street address, apartment, unit, etc.'),
  "city": zod.string().max(checkoutCartsCurrentRetrieveResponseShippingAddressCityMax).describe('City name'),
  "postal_code": zod.string().max(checkoutCartsCurrentRetrieveResponseShippingAddressPostalCodeMax).describe('ZIP code or postal code'),
  "country": zod.number().describe('Country for this address'),
  "is_default": zod.boolean().optional().describe('Whether this is the default address'),
  "label": zod.string().max(checkoutCartsCurrentRetrieveResponseShippingAddressLabelMax).optional().describe('Optional label like \'Home\', \'Office\', etc.'),
  "full_address": zod.string(),
  "address_dict": zod.record(zod.string(), zod.any()),
  "is_complete": zod.boolean(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}),
  "shipping_method": zod.object({
  "id": zod.number(),
  "name": zod.string().max(checkoutCartsCurrentRetrieveResponseShippingMethodNameMax).describe('Name of the shipping method (e.g., \'Standard\', \'Express\')'),
  "price": zod.regex(checkoutCartsCurrentRetrieveResponseShippingMethodPriceRegExp).describe('Shipping cost'),
  "courier": zod.number().describe('Courier company providing this shipping method')
}).describe('Serializer for ShippingMethod model.'),
  "applied_coupon": zod.object({
  "id": zod.number(),
  "code": zod.string().max(checkoutCartsCurrentRetrieveResponseAppliedCouponCodeMax).describe('Coupon code'),
  "name": zod.string().max(checkoutCartsCurrentRetrieveResponseAppliedCouponNameMax).describe('Display name'),
  "description": zod.string().optional(),
  "discount_amount": zod.regex(checkoutCartsCurrentRetrieveResponseAppliedCouponDiscountAmountRegExp).describe('Fixed discount amount'),
  "valid_from": zod.iso.datetime({}),
  "valid_until": zod.iso.datetime({}),
  "max_uses": zod.number().min(checkoutCartsCurrentRetrieveResponseAppliedCouponMaxUsesMin).max(checkoutCartsCurrentRetrieveResponseAppliedCouponMaxUsesMax).nullish().describe('Maximum total uses (null = unlimited)'),
  "max_uses_per_user": zod.number().min(checkoutCartsCurrentRetrieveResponseAppliedCouponMaxUsesPerUserMin).max(checkoutCartsCurrentRetrieveResponseAppliedCouponMaxUsesPerUserMax).optional().describe('Maximum uses per user'),
  "usage_count": zod.number()
}).describe('Serializer for coupon list and detail views.'),
  "item_count": zod.number().describe('Get total number of items in cart.'),
  "subtotal": zod.number().describe('Get subtotal of all items in cart.'),
  "shipping_cost": zod.number().describe('Get shipping cost from selected shipping method.'),
  "coupon_discount": zod.number().describe('Get coupon discount amount.'),
  "total": zod.number().describe('Get total including shipping.'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Cart model.')

/**
 * Confirm PaymentIntent and create order after successful PaymentSheet payment.
 */
export const checkoutConfirmPaymentIntentCreateBody = zod.object({
  "session_id": zod.string().describe('Stripe checkout session ID')
}).describe('Serializer for confirming payment.')

export const checkoutConfirmPaymentIntentCreateResponseAmountPaidRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');


export const checkoutConfirmPaymentIntentCreateResponse = zod.object({
  "success": zod.boolean(),
  "payment_id": zod.number(),
  "order_number": zod.string(),
  "message": zod.string(),
  "amount_paid": zod.regex(checkoutConfirmPaymentIntentCreateResponseAmountPaidRegExp),
  "currency": zod.string()
}).describe('Serializer for payment confirmation response.')

/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const checkoutCouponRedemptionsListQueryParams = zod.object({
  "id": zod.coerce.number().optional(),
  "ordering": zod.coerce.string().optional().describe('Which field to use when ordering the results.'),
  "page": zod.coerce.number().optional().describe('A page number within the paginated result set.'),
  "page_size": zod.coerce.number().optional().describe('Number of results to return per page.'),
  "search": zod.coerce.string().optional().describe('A search term.')
})

export const checkoutCouponRedemptionsListResponseResultsItemCouponCodeMax = 20;
export const checkoutCouponRedemptionsListResponseResultsItemCouponNameMax = 100;
export const checkoutCouponRedemptionsListResponseResultsItemCouponDiscountAmountRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutCouponRedemptionsListResponseResultsItemCouponMaxUsesMin = 0;

export const checkoutCouponRedemptionsListResponseResultsItemCouponMaxUsesMax = 2147483647;
export const checkoutCouponRedemptionsListResponseResultsItemCouponMaxUsesPerUserMin = 0;

export const checkoutCouponRedemptionsListResponseResultsItemCouponMaxUsesPerUserMax = 2147483647;
export const checkoutCouponRedemptionsListResponseResultsItemDiscountAmountRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutCouponRedemptionsListResponseResultsItemOriginalTotalRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutCouponRedemptionsListResponseResultsItemFinalTotalRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');


export const checkoutCouponRedemptionsListResponse = zod.object({
  "count": zod.number(),
  "next": zod.url().nullish(),
  "previous": zod.url().nullish(),
  "results": zod.array(zod.object({
  "id": zod.number(),
  "coupon": zod.object({
  "id": zod.number(),
  "code": zod.string().max(checkoutCouponRedemptionsListResponseResultsItemCouponCodeMax).describe('Coupon code'),
  "name": zod.string().max(checkoutCouponRedemptionsListResponseResultsItemCouponNameMax).describe('Display name'),
  "description": zod.string().optional(),
  "discount_amount": zod.regex(checkoutCouponRedemptionsListResponseResultsItemCouponDiscountAmountRegExp).describe('Fixed discount amount'),
  "valid_from": zod.iso.datetime({}),
  "valid_until": zod.iso.datetime({}),
  "max_uses": zod.number().min(checkoutCouponRedemptionsListResponseResultsItemCouponMaxUsesMin).max(checkoutCouponRedemptionsListResponseResultsItemCouponMaxUsesMax).nullish().describe('Maximum total uses (null = unlimited)'),
  "max_uses_per_user": zod.number().min(checkoutCouponRedemptionsListResponseResultsItemCouponMaxUsesPerUserMin).max(checkoutCouponRedemptionsListResponseResultsItemCouponMaxUsesPerUserMax).optional().describe('Maximum uses per user'),
  "usage_count": zod.number()
}).describe('Serializer for coupon list and detail views.'),
  "discount_amount": zod.regex(checkoutCouponRedemptionsListResponseResultsItemDiscountAmountRegExp),
  "original_total": zod.regex(checkoutCouponRedemptionsListResponseResultsItemOriginalTotalRegExp),
  "final_total": zod.regex(checkoutCouponRedemptionsListResponseResultsItemFinalTotalRegExp),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created')
}).describe('Serializer for coupon redemption tracking.'))
})

/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const checkoutCouponRedemptionsCreateBodyDiscountAmountRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutCouponRedemptionsCreateBodyOriginalTotalRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutCouponRedemptionsCreateBodyFinalTotalRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');


export const checkoutCouponRedemptionsCreateBody = zod.object({
  "discount_amount": zod.regex(checkoutCouponRedemptionsCreateBodyDiscountAmountRegExp),
  "original_total": zod.regex(checkoutCouponRedemptionsCreateBodyOriginalTotalRegExp),
  "final_total": zod.regex(checkoutCouponRedemptionsCreateBodyFinalTotalRegExp)
}).describe('Serializer for coupon redemption tracking.')

/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const checkoutCouponRedemptionsRetrieveParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this Coupon Redemption.')
})

export const checkoutCouponRedemptionsRetrieveResponseCouponCodeMax = 20;
export const checkoutCouponRedemptionsRetrieveResponseCouponNameMax = 100;
export const checkoutCouponRedemptionsRetrieveResponseCouponDiscountAmountRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutCouponRedemptionsRetrieveResponseCouponMaxUsesMin = 0;

export const checkoutCouponRedemptionsRetrieveResponseCouponMaxUsesMax = 2147483647;
export const checkoutCouponRedemptionsRetrieveResponseCouponMaxUsesPerUserMin = 0;

export const checkoutCouponRedemptionsRetrieveResponseCouponMaxUsesPerUserMax = 2147483647;
export const checkoutCouponRedemptionsRetrieveResponseDiscountAmountRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutCouponRedemptionsRetrieveResponseOriginalTotalRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutCouponRedemptionsRetrieveResponseFinalTotalRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');


export const checkoutCouponRedemptionsRetrieveResponse = zod.object({
  "id": zod.number(),
  "coupon": zod.object({
  "id": zod.number(),
  "code": zod.string().max(checkoutCouponRedemptionsRetrieveResponseCouponCodeMax).describe('Coupon code'),
  "name": zod.string().max(checkoutCouponRedemptionsRetrieveResponseCouponNameMax).describe('Display name'),
  "description": zod.string().optional(),
  "discount_amount": zod.regex(checkoutCouponRedemptionsRetrieveResponseCouponDiscountAmountRegExp).describe('Fixed discount amount'),
  "valid_from": zod.iso.datetime({}),
  "valid_until": zod.iso.datetime({}),
  "max_uses": zod.number().min(checkoutCouponRedemptionsRetrieveResponseCouponMaxUsesMin).max(checkoutCouponRedemptionsRetrieveResponseCouponMaxUsesMax).nullish().describe('Maximum total uses (null = unlimited)'),
  "max_uses_per_user": zod.number().min(checkoutCouponRedemptionsRetrieveResponseCouponMaxUsesPerUserMin).max(checkoutCouponRedemptionsRetrieveResponseCouponMaxUsesPerUserMax).optional().describe('Maximum uses per user'),
  "usage_count": zod.number()
}).describe('Serializer for coupon list and detail views.'),
  "discount_amount": zod.regex(checkoutCouponRedemptionsRetrieveResponseDiscountAmountRegExp),
  "original_total": zod.regex(checkoutCouponRedemptionsRetrieveResponseOriginalTotalRegExp),
  "final_total": zod.regex(checkoutCouponRedemptionsRetrieveResponseFinalTotalRegExp),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created')
}).describe('Serializer for coupon redemption tracking.')

/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const checkoutCouponRedemptionsUpdateParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this Coupon Redemption.')
})

export const checkoutCouponRedemptionsUpdateBodyDiscountAmountRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutCouponRedemptionsUpdateBodyOriginalTotalRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutCouponRedemptionsUpdateBodyFinalTotalRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');


export const checkoutCouponRedemptionsUpdateBody = zod.object({
  "discount_amount": zod.regex(checkoutCouponRedemptionsUpdateBodyDiscountAmountRegExp),
  "original_total": zod.regex(checkoutCouponRedemptionsUpdateBodyOriginalTotalRegExp),
  "final_total": zod.regex(checkoutCouponRedemptionsUpdateBodyFinalTotalRegExp)
}).describe('Serializer for coupon redemption tracking.')

export const checkoutCouponRedemptionsUpdateResponseCouponCodeMax = 20;
export const checkoutCouponRedemptionsUpdateResponseCouponNameMax = 100;
export const checkoutCouponRedemptionsUpdateResponseCouponDiscountAmountRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutCouponRedemptionsUpdateResponseCouponMaxUsesMin = 0;

export const checkoutCouponRedemptionsUpdateResponseCouponMaxUsesMax = 2147483647;
export const checkoutCouponRedemptionsUpdateResponseCouponMaxUsesPerUserMin = 0;

export const checkoutCouponRedemptionsUpdateResponseCouponMaxUsesPerUserMax = 2147483647;
export const checkoutCouponRedemptionsUpdateResponseDiscountAmountRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutCouponRedemptionsUpdateResponseOriginalTotalRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutCouponRedemptionsUpdateResponseFinalTotalRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');


export const checkoutCouponRedemptionsUpdateResponse = zod.object({
  "id": zod.number(),
  "coupon": zod.object({
  "id": zod.number(),
  "code": zod.string().max(checkoutCouponRedemptionsUpdateResponseCouponCodeMax).describe('Coupon code'),
  "name": zod.string().max(checkoutCouponRedemptionsUpdateResponseCouponNameMax).describe('Display name'),
  "description": zod.string().optional(),
  "discount_amount": zod.regex(checkoutCouponRedemptionsUpdateResponseCouponDiscountAmountRegExp).describe('Fixed discount amount'),
  "valid_from": zod.iso.datetime({}),
  "valid_until": zod.iso.datetime({}),
  "max_uses": zod.number().min(checkoutCouponRedemptionsUpdateResponseCouponMaxUsesMin).max(checkoutCouponRedemptionsUpdateResponseCouponMaxUsesMax).nullish().describe('Maximum total uses (null = unlimited)'),
  "max_uses_per_user": zod.number().min(checkoutCouponRedemptionsUpdateResponseCouponMaxUsesPerUserMin).max(checkoutCouponRedemptionsUpdateResponseCouponMaxUsesPerUserMax).optional().describe('Maximum uses per user'),
  "usage_count": zod.number()
}).describe('Serializer for coupon list and detail views.'),
  "discount_amount": zod.regex(checkoutCouponRedemptionsUpdateResponseDiscountAmountRegExp),
  "original_total": zod.regex(checkoutCouponRedemptionsUpdateResponseOriginalTotalRegExp),
  "final_total": zod.regex(checkoutCouponRedemptionsUpdateResponseFinalTotalRegExp),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created')
}).describe('Serializer for coupon redemption tracking.')

/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const checkoutCouponRedemptionsPartialUpdateParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this Coupon Redemption.')
})

export const checkoutCouponRedemptionsPartialUpdateBodyDiscountAmountRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutCouponRedemptionsPartialUpdateBodyOriginalTotalRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutCouponRedemptionsPartialUpdateBodyFinalTotalRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');


export const checkoutCouponRedemptionsPartialUpdateBody = zod.object({
  "discount_amount": zod.regex(checkoutCouponRedemptionsPartialUpdateBodyDiscountAmountRegExp).optional(),
  "original_total": zod.regex(checkoutCouponRedemptionsPartialUpdateBodyOriginalTotalRegExp).optional(),
  "final_total": zod.regex(checkoutCouponRedemptionsPartialUpdateBodyFinalTotalRegExp).optional()
}).describe('Serializer for coupon redemption tracking.')

export const checkoutCouponRedemptionsPartialUpdateResponseCouponCodeMax = 20;
export const checkoutCouponRedemptionsPartialUpdateResponseCouponNameMax = 100;
export const checkoutCouponRedemptionsPartialUpdateResponseCouponDiscountAmountRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutCouponRedemptionsPartialUpdateResponseCouponMaxUsesMin = 0;

export const checkoutCouponRedemptionsPartialUpdateResponseCouponMaxUsesMax = 2147483647;
export const checkoutCouponRedemptionsPartialUpdateResponseCouponMaxUsesPerUserMin = 0;

export const checkoutCouponRedemptionsPartialUpdateResponseCouponMaxUsesPerUserMax = 2147483647;
export const checkoutCouponRedemptionsPartialUpdateResponseDiscountAmountRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutCouponRedemptionsPartialUpdateResponseOriginalTotalRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutCouponRedemptionsPartialUpdateResponseFinalTotalRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');


export const checkoutCouponRedemptionsPartialUpdateResponse = zod.object({
  "id": zod.number(),
  "coupon": zod.object({
  "id": zod.number(),
  "code": zod.string().max(checkoutCouponRedemptionsPartialUpdateResponseCouponCodeMax).describe('Coupon code'),
  "name": zod.string().max(checkoutCouponRedemptionsPartialUpdateResponseCouponNameMax).describe('Display name'),
  "description": zod.string().optional(),
  "discount_amount": zod.regex(checkoutCouponRedemptionsPartialUpdateResponseCouponDiscountAmountRegExp).describe('Fixed discount amount'),
  "valid_from": zod.iso.datetime({}),
  "valid_until": zod.iso.datetime({}),
  "max_uses": zod.number().min(checkoutCouponRedemptionsPartialUpdateResponseCouponMaxUsesMin).max(checkoutCouponRedemptionsPartialUpdateResponseCouponMaxUsesMax).nullish().describe('Maximum total uses (null = unlimited)'),
  "max_uses_per_user": zod.number().min(checkoutCouponRedemptionsPartialUpdateResponseCouponMaxUsesPerUserMin).max(checkoutCouponRedemptionsPartialUpdateResponseCouponMaxUsesPerUserMax).optional().describe('Maximum uses per user'),
  "usage_count": zod.number()
}).describe('Serializer for coupon list and detail views.'),
  "discount_amount": zod.regex(checkoutCouponRedemptionsPartialUpdateResponseDiscountAmountRegExp),
  "original_total": zod.regex(checkoutCouponRedemptionsPartialUpdateResponseOriginalTotalRegExp),
  "final_total": zod.regex(checkoutCouponRedemptionsPartialUpdateResponseFinalTotalRegExp),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created')
}).describe('Serializer for coupon redemption tracking.')

/**
 * Handle deletion with foreign key constraint protection.
 */
export const checkoutCouponRedemptionsDestroyParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this Coupon Redemption.')
})

/**
 * Full CRUD ViewSet for coupon management.
 */
export const checkoutCouponsListQueryParams = zod.object({
  "id": zod.coerce.number().optional(),
  "ordering": zod.coerce.string().optional().describe('Which field to use when ordering the results.'),
  "page": zod.coerce.number().optional().describe('A page number within the paginated result set.'),
  "page_size": zod.coerce.number().optional().describe('Number of results to return per page.'),
  "search": zod.coerce.string().optional().describe('A search term.')
})

export const checkoutCouponsListResponseResultsItemCodeMax = 20;
export const checkoutCouponsListResponseResultsItemNameMax = 100;
export const checkoutCouponsListResponseResultsItemDiscountAmountRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutCouponsListResponseResultsItemMaxUsesMin = 0;

export const checkoutCouponsListResponseResultsItemMaxUsesMax = 2147483647;
export const checkoutCouponsListResponseResultsItemMaxUsesPerUserMin = 0;

export const checkoutCouponsListResponseResultsItemMaxUsesPerUserMax = 2147483647;


export const checkoutCouponsListResponse = zod.object({
  "count": zod.number(),
  "next": zod.url().nullish(),
  "previous": zod.url().nullish(),
  "results": zod.array(zod.object({
  "id": zod.number(),
  "code": zod.string().max(checkoutCouponsListResponseResultsItemCodeMax).describe('Coupon code'),
  "name": zod.string().max(checkoutCouponsListResponseResultsItemNameMax).describe('Display name'),
  "description": zod.string().optional(),
  "discount_amount": zod.regex(checkoutCouponsListResponseResultsItemDiscountAmountRegExp).describe('Fixed discount amount'),
  "valid_from": zod.iso.datetime({}),
  "valid_until": zod.iso.datetime({}),
  "max_uses": zod.number().min(checkoutCouponsListResponseResultsItemMaxUsesMin).max(checkoutCouponsListResponseResultsItemMaxUsesMax).nullish().describe('Maximum total uses (null = unlimited)'),
  "max_uses_per_user": zod.number().min(checkoutCouponsListResponseResultsItemMaxUsesPerUserMin).max(checkoutCouponsListResponseResultsItemMaxUsesPerUserMax).optional().describe('Maximum uses per user'),
  "usage_count": zod.number()
}).describe('Serializer for coupon list and detail views.'))
})

/**
 * Full CRUD ViewSet for coupon management.
 */
export const checkoutCouponsCreateBodyCodeMax = 20;
export const checkoutCouponsCreateBodyNameMax = 100;
export const checkoutCouponsCreateBodyDiscountAmountRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutCouponsCreateBodyMaxUsesMin = 0;

export const checkoutCouponsCreateBodyMaxUsesMax = 2147483647;
export const checkoutCouponsCreateBodyMaxUsesPerUserMin = 0;

export const checkoutCouponsCreateBodyMaxUsesPerUserMax = 2147483647;


export const checkoutCouponsCreateBody = zod.object({
  "code": zod.string().max(checkoutCouponsCreateBodyCodeMax).describe('Coupon code'),
  "name": zod.string().max(checkoutCouponsCreateBodyNameMax).describe('Display name'),
  "description": zod.string().optional(),
  "discount_amount": zod.regex(checkoutCouponsCreateBodyDiscountAmountRegExp).describe('Fixed discount amount'),
  "valid_from": zod.iso.datetime({}),
  "valid_until": zod.iso.datetime({}),
  "max_uses": zod.number().min(checkoutCouponsCreateBodyMaxUsesMin).max(checkoutCouponsCreateBodyMaxUsesMax).nullish().describe('Maximum total uses (null = unlimited)'),
  "max_uses_per_user": zod.number().min(checkoutCouponsCreateBodyMaxUsesPerUserMin).max(checkoutCouponsCreateBodyMaxUsesPerUserMax).optional().describe('Maximum uses per user')
}).describe('Serializer for coupon list and detail views.')

/**
 * Full CRUD ViewSet for coupon management.
 */
export const checkoutCouponsRetrieveParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this Coupon.')
})

export const checkoutCouponsRetrieveResponseCodeMax = 20;
export const checkoutCouponsRetrieveResponseNameMax = 100;
export const checkoutCouponsRetrieveResponseDiscountAmountRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutCouponsRetrieveResponseMaxUsesMin = 0;

export const checkoutCouponsRetrieveResponseMaxUsesMax = 2147483647;
export const checkoutCouponsRetrieveResponseMaxUsesPerUserMin = 0;

export const checkoutCouponsRetrieveResponseMaxUsesPerUserMax = 2147483647;


export const checkoutCouponsRetrieveResponse = zod.object({
  "id": zod.number(),
  "code": zod.string().max(checkoutCouponsRetrieveResponseCodeMax).describe('Coupon code'),
  "name": zod.string().max(checkoutCouponsRetrieveResponseNameMax).describe('Display name'),
  "description": zod.string().optional(),
  "discount_amount": zod.regex(checkoutCouponsRetrieveResponseDiscountAmountRegExp).describe('Fixed discount amount'),
  "valid_from": zod.iso.datetime({}),
  "valid_until": zod.iso.datetime({}),
  "max_uses": zod.number().min(checkoutCouponsRetrieveResponseMaxUsesMin).max(checkoutCouponsRetrieveResponseMaxUsesMax).nullish().describe('Maximum total uses (null = unlimited)'),
  "max_uses_per_user": zod.number().min(checkoutCouponsRetrieveResponseMaxUsesPerUserMin).max(checkoutCouponsRetrieveResponseMaxUsesPerUserMax).optional().describe('Maximum uses per user'),
  "usage_count": zod.number()
}).describe('Serializer for coupon list and detail views.')

/**
 * Full CRUD ViewSet for coupon management.
 */
export const checkoutCouponsUpdateParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this Coupon.')
})

export const checkoutCouponsUpdateBodyCodeMax = 20;
export const checkoutCouponsUpdateBodyNameMax = 100;
export const checkoutCouponsUpdateBodyDiscountAmountRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutCouponsUpdateBodyMaxUsesMin = 0;

export const checkoutCouponsUpdateBodyMaxUsesMax = 2147483647;
export const checkoutCouponsUpdateBodyMaxUsesPerUserMin = 0;

export const checkoutCouponsUpdateBodyMaxUsesPerUserMax = 2147483647;


export const checkoutCouponsUpdateBody = zod.object({
  "code": zod.string().max(checkoutCouponsUpdateBodyCodeMax).describe('Coupon code'),
  "name": zod.string().max(checkoutCouponsUpdateBodyNameMax).describe('Display name'),
  "description": zod.string().optional(),
  "discount_amount": zod.regex(checkoutCouponsUpdateBodyDiscountAmountRegExp).describe('Fixed discount amount'),
  "valid_from": zod.iso.datetime({}),
  "valid_until": zod.iso.datetime({}),
  "max_uses": zod.number().min(checkoutCouponsUpdateBodyMaxUsesMin).max(checkoutCouponsUpdateBodyMaxUsesMax).nullish().describe('Maximum total uses (null = unlimited)'),
  "max_uses_per_user": zod.number().min(checkoutCouponsUpdateBodyMaxUsesPerUserMin).max(checkoutCouponsUpdateBodyMaxUsesPerUserMax).optional().describe('Maximum uses per user')
}).describe('Serializer for coupon list and detail views.')

export const checkoutCouponsUpdateResponseCodeMax = 20;
export const checkoutCouponsUpdateResponseNameMax = 100;
export const checkoutCouponsUpdateResponseDiscountAmountRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutCouponsUpdateResponseMaxUsesMin = 0;

export const checkoutCouponsUpdateResponseMaxUsesMax = 2147483647;
export const checkoutCouponsUpdateResponseMaxUsesPerUserMin = 0;

export const checkoutCouponsUpdateResponseMaxUsesPerUserMax = 2147483647;


export const checkoutCouponsUpdateResponse = zod.object({
  "id": zod.number(),
  "code": zod.string().max(checkoutCouponsUpdateResponseCodeMax).describe('Coupon code'),
  "name": zod.string().max(checkoutCouponsUpdateResponseNameMax).describe('Display name'),
  "description": zod.string().optional(),
  "discount_amount": zod.regex(checkoutCouponsUpdateResponseDiscountAmountRegExp).describe('Fixed discount amount'),
  "valid_from": zod.iso.datetime({}),
  "valid_until": zod.iso.datetime({}),
  "max_uses": zod.number().min(checkoutCouponsUpdateResponseMaxUsesMin).max(checkoutCouponsUpdateResponseMaxUsesMax).nullish().describe('Maximum total uses (null = unlimited)'),
  "max_uses_per_user": zod.number().min(checkoutCouponsUpdateResponseMaxUsesPerUserMin).max(checkoutCouponsUpdateResponseMaxUsesPerUserMax).optional().describe('Maximum uses per user'),
  "usage_count": zod.number()
}).describe('Serializer for coupon list and detail views.')

/**
 * Full CRUD ViewSet for coupon management.
 */
export const checkoutCouponsPartialUpdateParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this Coupon.')
})

export const checkoutCouponsPartialUpdateBodyCodeMax = 20;
export const checkoutCouponsPartialUpdateBodyNameMax = 100;
export const checkoutCouponsPartialUpdateBodyDiscountAmountRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutCouponsPartialUpdateBodyMaxUsesMin = 0;

export const checkoutCouponsPartialUpdateBodyMaxUsesMax = 2147483647;
export const checkoutCouponsPartialUpdateBodyMaxUsesPerUserMin = 0;

export const checkoutCouponsPartialUpdateBodyMaxUsesPerUserMax = 2147483647;


export const checkoutCouponsPartialUpdateBody = zod.object({
  "code": zod.string().max(checkoutCouponsPartialUpdateBodyCodeMax).optional().describe('Coupon code'),
  "name": zod.string().max(checkoutCouponsPartialUpdateBodyNameMax).optional().describe('Display name'),
  "description": zod.string().optional(),
  "discount_amount": zod.regex(checkoutCouponsPartialUpdateBodyDiscountAmountRegExp).optional().describe('Fixed discount amount'),
  "valid_from": zod.iso.datetime({}).optional(),
  "valid_until": zod.iso.datetime({}).optional(),
  "max_uses": zod.number().min(checkoutCouponsPartialUpdateBodyMaxUsesMin).max(checkoutCouponsPartialUpdateBodyMaxUsesMax).nullish().describe('Maximum total uses (null = unlimited)'),
  "max_uses_per_user": zod.number().min(checkoutCouponsPartialUpdateBodyMaxUsesPerUserMin).max(checkoutCouponsPartialUpdateBodyMaxUsesPerUserMax).optional().describe('Maximum uses per user')
}).describe('Serializer for coupon list and detail views.')

export const checkoutCouponsPartialUpdateResponseCodeMax = 20;
export const checkoutCouponsPartialUpdateResponseNameMax = 100;
export const checkoutCouponsPartialUpdateResponseDiscountAmountRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutCouponsPartialUpdateResponseMaxUsesMin = 0;

export const checkoutCouponsPartialUpdateResponseMaxUsesMax = 2147483647;
export const checkoutCouponsPartialUpdateResponseMaxUsesPerUserMin = 0;

export const checkoutCouponsPartialUpdateResponseMaxUsesPerUserMax = 2147483647;


export const checkoutCouponsPartialUpdateResponse = zod.object({
  "id": zod.number(),
  "code": zod.string().max(checkoutCouponsPartialUpdateResponseCodeMax).describe('Coupon code'),
  "name": zod.string().max(checkoutCouponsPartialUpdateResponseNameMax).describe('Display name'),
  "description": zod.string().optional(),
  "discount_amount": zod.regex(checkoutCouponsPartialUpdateResponseDiscountAmountRegExp).describe('Fixed discount amount'),
  "valid_from": zod.iso.datetime({}),
  "valid_until": zod.iso.datetime({}),
  "max_uses": zod.number().min(checkoutCouponsPartialUpdateResponseMaxUsesMin).max(checkoutCouponsPartialUpdateResponseMaxUsesMax).nullish().describe('Maximum total uses (null = unlimited)'),
  "max_uses_per_user": zod.number().min(checkoutCouponsPartialUpdateResponseMaxUsesPerUserMin).max(checkoutCouponsPartialUpdateResponseMaxUsesPerUserMax).optional().describe('Maximum uses per user'),
  "usage_count": zod.number()
}).describe('Serializer for coupon list and detail views.')

/**
 * Handle deletion with foreign key constraint protection.
 */
export const checkoutCouponsDestroyParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this Coupon.')
})

/**
 * Remove the currently applied coupon from the user's active cart
 * @summary Remove coupon from cart
 */
export const checkoutCouponsRemoveCreateResponseCodeMax = 20;
export const checkoutCouponsRemoveCreateResponseNameMax = 100;
export const checkoutCouponsRemoveCreateResponseDiscountAmountRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutCouponsRemoveCreateResponseMaxUsesMin = 0;

export const checkoutCouponsRemoveCreateResponseMaxUsesMax = 2147483647;
export const checkoutCouponsRemoveCreateResponseMaxUsesPerUserMin = 0;

export const checkoutCouponsRemoveCreateResponseMaxUsesPerUserMax = 2147483647;


export const checkoutCouponsRemoveCreateResponse = zod.object({
  "id": zod.number(),
  "code": zod.string().max(checkoutCouponsRemoveCreateResponseCodeMax).describe('Coupon code'),
  "name": zod.string().max(checkoutCouponsRemoveCreateResponseNameMax).describe('Display name'),
  "description": zod.string().optional(),
  "discount_amount": zod.regex(checkoutCouponsRemoveCreateResponseDiscountAmountRegExp).describe('Fixed discount amount'),
  "valid_from": zod.iso.datetime({}),
  "valid_until": zod.iso.datetime({}),
  "max_uses": zod.number().min(checkoutCouponsRemoveCreateResponseMaxUsesMin).max(checkoutCouponsRemoveCreateResponseMaxUsesMax).nullish().describe('Maximum total uses (null = unlimited)'),
  "max_uses_per_user": zod.number().min(checkoutCouponsRemoveCreateResponseMaxUsesPerUserMin).max(checkoutCouponsRemoveCreateResponseMaxUsesPerUserMax).optional().describe('Maximum uses per user'),
  "usage_count": zod.number()
}).describe('Serializer for coupon list and detail views.')

/**
 * Validate and apply coupon to cart
 * @summary Validate coupon
 */
export const checkoutCouponsValidateCreateBodyCodeMax = 20;


export const checkoutCouponsValidateCreateBody = zod.object({
  "code": zod.string().max(checkoutCouponsValidateCreateBodyCodeMax)
})

export const checkoutCouponsValidateCreateResponseCouponCodeMax = 20;
export const checkoutCouponsValidateCreateResponseCouponNameMax = 100;
export const checkoutCouponsValidateCreateResponseCouponDiscountAmountRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutCouponsValidateCreateResponseCouponMaxUsesMin = 0;

export const checkoutCouponsValidateCreateResponseCouponMaxUsesMax = 2147483647;
export const checkoutCouponsValidateCreateResponseCouponMaxUsesPerUserMin = 0;

export const checkoutCouponsValidateCreateResponseCouponMaxUsesPerUserMax = 2147483647;


export const checkoutCouponsValidateCreateResponse = zod.object({
  "coupon": zod.object({
  "id": zod.number(),
  "code": zod.string().max(checkoutCouponsValidateCreateResponseCouponCodeMax).describe('Coupon code'),
  "name": zod.string().max(checkoutCouponsValidateCreateResponseCouponNameMax).describe('Display name'),
  "description": zod.string().optional(),
  "discount_amount": zod.regex(checkoutCouponsValidateCreateResponseCouponDiscountAmountRegExp).describe('Fixed discount amount'),
  "valid_from": zod.iso.datetime({}),
  "valid_until": zod.iso.datetime({}),
  "max_uses": zod.number().min(checkoutCouponsValidateCreateResponseCouponMaxUsesMin).max(checkoutCouponsValidateCreateResponseCouponMaxUsesMax).nullish().describe('Maximum total uses (null = unlimited)'),
  "max_uses_per_user": zod.number().min(checkoutCouponsValidateCreateResponseCouponMaxUsesPerUserMin).max(checkoutCouponsValidateCreateResponseCouponMaxUsesPerUserMax).optional().describe('Maximum uses per user'),
  "usage_count": zod.number()
}).describe('Serializer for coupon list and detail views.'),
  "applied_discount": zod.string(),
  "cart_total": zod.string()
}).describe('Serializer for coupon validation response.')

/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const checkoutCouriersListQueryParams = zod.object({
  "id": zod.coerce.number().optional(),
  "ordering": zod.coerce.string().optional().describe('Which field to use when ordering the results.'),
  "page": zod.coerce.number().optional().describe('A page number within the paginated result set.'),
  "page_size": zod.coerce.number().optional().describe('Number of results to return per page.'),
  "search": zod.coerce.string().optional().describe('A search term.')
})

export const checkoutCouriersListResponseResultsItemNameMax = 100;


export const checkoutCouriersListResponse = zod.object({
  "count": zod.number(),
  "next": zod.url().nullish(),
  "previous": zod.url().nullish(),
  "results": zod.array(zod.object({
  "id": zod.number(),
  "name": zod.string().max(checkoutCouriersListResponseResultsItemNameMax).describe('Courier company name'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}))
})

/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const checkoutCouriersCreateBodyNameMax = 100;


export const checkoutCouriersCreateBody = zod.object({
  "name": zod.string().max(checkoutCouriersCreateBodyNameMax).describe('Courier company name')
})

/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const checkoutCouriersRetrieveParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this Courier.')
})

export const checkoutCouriersRetrieveResponseNameMax = 100;


export const checkoutCouriersRetrieveResponse = zod.object({
  "id": zod.number(),
  "name": zod.string().max(checkoutCouriersRetrieveResponseNameMax).describe('Courier company name'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
})

/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const checkoutCouriersUpdateParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this Courier.')
})

export const checkoutCouriersUpdateBodyNameMax = 100;


export const checkoutCouriersUpdateBody = zod.object({
  "name": zod.string().max(checkoutCouriersUpdateBodyNameMax).describe('Courier company name')
})

export const checkoutCouriersUpdateResponseNameMax = 100;


export const checkoutCouriersUpdateResponse = zod.object({
  "id": zod.number(),
  "name": zod.string().max(checkoutCouriersUpdateResponseNameMax).describe('Courier company name'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
})

/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const checkoutCouriersPartialUpdateParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this Courier.')
})

export const checkoutCouriersPartialUpdateBodyNameMax = 100;


export const checkoutCouriersPartialUpdateBody = zod.object({
  "name": zod.string().max(checkoutCouriersPartialUpdateBodyNameMax).optional().describe('Courier company name')
})

export const checkoutCouriersPartialUpdateResponseNameMax = 100;


export const checkoutCouriersPartialUpdateResponse = zod.object({
  "id": zod.number(),
  "name": zod.string().max(checkoutCouriersPartialUpdateResponseNameMax).describe('Courier company name'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
})

/**
 * Handle deletion with foreign key constraint protection.
 */
export const checkoutCouriersDestroyParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this Courier.')
})

/**
 * Create a Stripe Checkout session for a cart.
 */
export const checkoutCreateCheckoutSessionCreateBodyCurrencyDefault = "usd";
export const checkoutCreateCheckoutSessionCreateBodyCurrencyMax = 3;


export const checkoutCreateCheckoutSessionCreateBody = zod.object({
  "currency": zod.string().max(checkoutCreateCheckoutSessionCreateBodyCurrencyMax).default(checkoutCreateCheckoutSessionCreateBodyCurrencyDefault).describe('Currency code (default: usd)'),
  "shipping_address_id": zod.number().describe('ID of the shipping address to use for this order'),
  "shipping_method_id": zod.number().describe('ID of the shipping method to use for this order')
}).describe('Serializer for creating payment intent (PaymentSheet).')

export const checkoutCreateCheckoutSessionCreateResponse = zod.object({
  "client_secret": zod.string(),
  "payment_intent_id": zod.string(),
  "payment_id": zod.number()
}).describe('Serializer for payment intent response (PaymentSheet).')

/**
 * Get dashboard statistics for the given period (24h, 7d, 30d, lifetime)
 * @summary Dashboard analytics
 */
export const checkoutDashboardRetrieveQueryParams = zod.object({
  "period": zod.coerce.string().optional().describe('24h | 7d | 30d | lifetime')
})

export const checkoutDashboardRetrieveResponseRevenueRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutDashboardRetrieveResponseAvgOrderRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutDashboardRetrieveResponseProductsEntriesItemRevenueRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');


export const checkoutDashboardRetrieveResponse = zod.object({
  "period": zod.string(),
  "orders_count": zod.number(),
  "revenue": zod.regex(checkoutDashboardRetrieveResponseRevenueRegExp),
  "avg_order": zod.regex(checkoutDashboardRetrieveResponseAvgOrderRegExp),
  "items_sold": zod.number(),
  "shipping_methods": zod.object({
  "entries": zod.array(zod.object({
  "name": zod.string(),
  "count": zod.number()
})),
  "total": zod.number()
}),
  "products": zod.object({
  "entries": zod.array(zod.object({
  "name": zod.string(),
  "qty": zod.number(),
  "revenue": zod.regex(checkoutDashboardRetrieveResponseProductsEntriesItemRevenueRegExp)
})),
  "totalQty": zod.number()
}),
  "manufacturers": zod.array(zod.object({
  "name": zod.string(),
  "qty": zod.number()
})),
  "tags": zod.array(zod.object({
  "name": zod.string(),
  "qty": zod.number()
})),
  "coupon_usage": zod.object({
  "used": zod.number(),
  "total": zod.number()
})
}).describe('Serializer for dashboard analytics response.')

/**
 * ViewSet for managing invoice templates.
 */
export const checkoutInvoiceTemplatesListQueryParams = zod.object({
  "id": zod.coerce.number().optional(),
  "ordering": zod.coerce.string().optional().describe('Which field to use when ordering the results.'),
  "search": zod.coerce.string().optional().describe('A search term.')
})

export const checkoutInvoiceTemplatesListResponseNameMax = 100;


export const checkoutInvoiceTemplatesListResponseItem = zod.object({
  "id": zod.number(),
  "name": zod.string().max(checkoutInvoiceTemplatesListResponseNameMax).describe('Template name (e.g., \'Standard Invoice\')'),
  "content": zod.string().describe('Jinja2 template content with HTML'),
  "is_default": zod.boolean().optional().describe('Use as default template for automatic invoice generation'),
  "created_by": zod.number().describe('User who created this template'),
  "created_by_name": zod.string(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for invoice templates.')
export const checkoutInvoiceTemplatesListResponse = zod.array(checkoutInvoiceTemplatesListResponseItem)

/**
 * ViewSet for managing invoice templates.
 */
export const checkoutInvoiceTemplatesCreateBodyNameMax = 100;


export const checkoutInvoiceTemplatesCreateBody = zod.object({
  "name": zod.string().max(checkoutInvoiceTemplatesCreateBodyNameMax).describe('Template name (e.g., \'Standard Invoice\')'),
  "content": zod.string().describe('Jinja2 template content with HTML'),
  "is_default": zod.boolean().optional().describe('Use as default template for automatic invoice generation')
}).describe('Serializer for invoice templates.')

/**
 * ViewSet for managing invoice templates.
 */
export const checkoutInvoiceTemplatesRetrieveParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this Invoice Template.')
})

export const checkoutInvoiceTemplatesRetrieveResponseNameMax = 100;


export const checkoutInvoiceTemplatesRetrieveResponse = zod.object({
  "id": zod.number(),
  "name": zod.string().max(checkoutInvoiceTemplatesRetrieveResponseNameMax).describe('Template name (e.g., \'Standard Invoice\')'),
  "content": zod.string().describe('Jinja2 template content with HTML'),
  "is_default": zod.boolean().optional().describe('Use as default template for automatic invoice generation'),
  "created_by": zod.number().describe('User who created this template'),
  "created_by_name": zod.string(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for invoice templates.')

/**
 * ViewSet for managing invoice templates.
 */
export const checkoutInvoiceTemplatesUpdateParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this Invoice Template.')
})

export const checkoutInvoiceTemplatesUpdateBodyNameMax = 100;


export const checkoutInvoiceTemplatesUpdateBody = zod.object({
  "name": zod.string().max(checkoutInvoiceTemplatesUpdateBodyNameMax).describe('Template name (e.g., \'Standard Invoice\')'),
  "content": zod.string().describe('Jinja2 template content with HTML'),
  "is_default": zod.boolean().optional().describe('Use as default template for automatic invoice generation')
}).describe('Serializer for invoice templates.')

export const checkoutInvoiceTemplatesUpdateResponseNameMax = 100;


export const checkoutInvoiceTemplatesUpdateResponse = zod.object({
  "id": zod.number(),
  "name": zod.string().max(checkoutInvoiceTemplatesUpdateResponseNameMax).describe('Template name (e.g., \'Standard Invoice\')'),
  "content": zod.string().describe('Jinja2 template content with HTML'),
  "is_default": zod.boolean().optional().describe('Use as default template for automatic invoice generation'),
  "created_by": zod.number().describe('User who created this template'),
  "created_by_name": zod.string(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for invoice templates.')

/**
 * ViewSet for managing invoice templates.
 */
export const checkoutInvoiceTemplatesPartialUpdateParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this Invoice Template.')
})

export const checkoutInvoiceTemplatesPartialUpdateBodyNameMax = 100;


export const checkoutInvoiceTemplatesPartialUpdateBody = zod.object({
  "name": zod.string().max(checkoutInvoiceTemplatesPartialUpdateBodyNameMax).optional().describe('Template name (e.g., \'Standard Invoice\')'),
  "content": zod.string().optional().describe('Jinja2 template content with HTML'),
  "is_default": zod.boolean().optional().describe('Use as default template for automatic invoice generation')
}).describe('Serializer for invoice templates.')

export const checkoutInvoiceTemplatesPartialUpdateResponseNameMax = 100;


export const checkoutInvoiceTemplatesPartialUpdateResponse = zod.object({
  "id": zod.number(),
  "name": zod.string().max(checkoutInvoiceTemplatesPartialUpdateResponseNameMax).describe('Template name (e.g., \'Standard Invoice\')'),
  "content": zod.string().describe('Jinja2 template content with HTML'),
  "is_default": zod.boolean().optional().describe('Use as default template for automatic invoice generation'),
  "created_by": zod.number().describe('User who created this template'),
  "created_by_name": zod.string(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for invoice templates.')

/**
 * Handle deletion with foreign key constraint protection.
 */
export const checkoutInvoiceTemplatesDestroyParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this Invoice Template.')
})

/**
 * Validates Jinja2 template syntax and checks for forbidden properties
 * @summary Validate template syntax and security
 */
export const checkoutInvoiceTemplatesVariablesRetrieveResponse = zod.object({
  "is_valid": zod.boolean(),
  "errors": zod.array(zod.string())
})

/**
 * ViewSet for managing invoices.
 */
export const checkoutInvoicesListQueryParams = zod.object({
  "id": zod.coerce.number().optional(),
  "ordering": zod.coerce.string().optional().describe('Which field to use when ordering the results.'),
  "search": zod.coerce.string().optional().describe('A search term.')
})

export const checkoutInvoicesListResponseItem = zod.object({
  "id": zod.number(),
  "order": zod.number().describe('Order this invoice is for'),
  "order_number": zod.string(),
  "invoice_number": zod.string().describe('Unique invoice number'),
  "html_content": zod.string().describe('Rendered HTML content of the invoice'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for invoices.')
export const checkoutInvoicesListResponse = zod.array(checkoutInvoicesListResponseItem)

/**
 * ViewSet for managing invoices.
 */
export const checkoutInvoicesCreateBody = zod.object({
  "order": zod.number().describe('Order this invoice is for'),
  "html_content": zod.string().describe('Rendered HTML content of the invoice')
}).describe('Serializer for invoices.')

/**
 * ViewSet for managing invoices.
 */
export const checkoutInvoicesRetrieveParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this Invoice.')
})

export const checkoutInvoicesRetrieveResponse = zod.object({
  "id": zod.number(),
  "order": zod.number().describe('Order this invoice is for'),
  "order_number": zod.string(),
  "invoice_number": zod.string().describe('Unique invoice number'),
  "html_content": zod.string().describe('Rendered HTML content of the invoice'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for invoices.')

/**
 * ViewSet for managing invoices.
 */
export const checkoutInvoicesUpdateParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this Invoice.')
})

export const checkoutInvoicesUpdateBody = zod.object({
  "order": zod.number().describe('Order this invoice is for'),
  "html_content": zod.string().describe('Rendered HTML content of the invoice')
}).describe('Serializer for invoices.')

export const checkoutInvoicesUpdateResponse = zod.object({
  "id": zod.number(),
  "order": zod.number().describe('Order this invoice is for'),
  "order_number": zod.string(),
  "invoice_number": zod.string().describe('Unique invoice number'),
  "html_content": zod.string().describe('Rendered HTML content of the invoice'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for invoices.')

/**
 * ViewSet for managing invoices.
 */
export const checkoutInvoicesPartialUpdateParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this Invoice.')
})

export const checkoutInvoicesPartialUpdateBody = zod.object({
  "order": zod.number().optional().describe('Order this invoice is for'),
  "html_content": zod.string().optional().describe('Rendered HTML content of the invoice')
}).describe('Serializer for invoices.')

export const checkoutInvoicesPartialUpdateResponse = zod.object({
  "id": zod.number(),
  "order": zod.number().describe('Order this invoice is for'),
  "order_number": zod.string(),
  "invoice_number": zod.string().describe('Unique invoice number'),
  "html_content": zod.string().describe('Rendered HTML content of the invoice'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for invoices.')

/**
 * Handle deletion with foreign key constraint protection.
 */
export const checkoutInvoicesDestroyParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this Invoice.')
})

/**
 * Downloads the PDF invoice for a specific order
 * @summary Download invoice PDF by order
 */
export const checkoutInvoicesDownloadByOrderRetrieveQueryParams = zod.object({
  "order_id": zod.coerce.number().describe('ID of the order to generate invoice for')
})

export const checkoutInvoicesDownloadByOrderRetrieveResponse = zod.instanceof(File)

/**
 * ViewSet for CartItem model with CRUD operations.
 */
export const checkoutItemsListQueryParams = zod.object({
  "ordering": zod.coerce.string().optional().describe('Which field to use when ordering the results.'),
  "search": zod.coerce.string().optional().describe('A search term.')
})

export const checkoutItemsListResponseProductNameMax = 200;
export const checkoutItemsListResponseProductSlugMax = 200;

export const checkoutItemsListResponseProductSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const checkoutItemsListResponseProductShortDescriptionMax = 500;
export const checkoutItemsListResponseProductPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutItemsListResponseProductOriginalPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutItemsListResponseProductSkuMax = 100;
export const checkoutItemsListResponseProductStockQuantityMin = 0;

export const checkoutItemsListResponseProductStockQuantityMax = 2147483647;
export const checkoutItemsListResponseProductCategoryNameMax = 100;
export const checkoutItemsListResponseProductCategorySlugMax = 100;

export const checkoutItemsListResponseProductCategorySlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const checkoutItemsListResponseProductManufacturerNameMax = 100;
export const checkoutItemsListResponseProductManufacturerSlugMax = 100;

export const checkoutItemsListResponseProductManufacturerSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const checkoutItemsListResponseProductManufacturerWebsiteMax = 200;
export const checkoutItemsListResponseQuantityMax = 2147483647;
export const checkoutItemsListResponseUnitPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');


export const checkoutItemsListResponseItem = zod.object({
  "id": zod.number(),
  "product": zod.object({
  "id": zod.number(),
  "name": zod.string().max(checkoutItemsListResponseProductNameMax).describe('Product name'),
  "slug": zod.string().max(checkoutItemsListResponseProductSlugMax).regex(checkoutItemsListResponseProductSlugRegExp).describe('URL-friendly version of the name'),
  "short_description": zod.string().max(checkoutItemsListResponseProductShortDescriptionMax).optional().describe('Short description for listings'),
  "price": zod.regex(checkoutItemsListResponseProductPriceRegExp).describe('Product price'),
  "original_price": zod.regex(checkoutItemsListResponseProductOriginalPriceRegExp).describe('Original price for showing discounts'),
  "current_price": zod.string().describe('Get current price as formatted decimal string.'),
  "discount_percentage": zod.number().describe('Calculate discount percentage.'),
  "sku": zod.string().max(checkoutItemsListResponseProductSkuMax).describe('Unique product identifier'),
  "stock_quantity": zod.number().min(checkoutItemsListResponseProductStockQuantityMin).max(checkoutItemsListResponseProductStockQuantityMax).optional().describe('Available quantity in stock'),
  "is_visible": zod.boolean().optional().describe('Is product visible to the users'),
  "is_on_sale": zod.boolean(),
  "is_in_stock": zod.boolean().describe('Check if product is in stock.'),
  "is_available": zod.boolean().describe('Check if product is available for purchase.'),
  "category": zod.object({
  "id": zod.number(),
  "name": zod.string().max(checkoutItemsListResponseProductCategoryNameMax).describe('Category name'),
  "slug": zod.string().max(checkoutItemsListResponseProductCategorySlugMax).regex(checkoutItemsListResponseProductCategorySlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Category description'),
  "is_active": zod.boolean().optional().describe('Whether this category is visible'),
  "active_product_count": zod.number(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Category model.'),
  "manufacturer": zod.object({
  "id": zod.number(),
  "name": zod.string().max(checkoutItemsListResponseProductManufacturerNameMax).describe('Manufacturer name'),
  "slug": zod.string().max(checkoutItemsListResponseProductManufacturerSlugMax).regex(checkoutItemsListResponseProductManufacturerSlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Manufacturer description'),
  "website": zod.string().max(checkoutItemsListResponseProductManufacturerWebsiteMax).optional().describe('Manufacturer website URL'),
  "is_active": zod.boolean().optional().describe('Whether this manufacturer is visible'),
  "active_product_count": zod.number(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Manufacturer model.'),
  "primary_image": zod.string().nullable().describe('Get URL of primary product image.'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created')
}).describe('Simplified serializer for product listings.'),
  "product_id": zod.number(),
  "quantity": zod.number().min(1).max(checkoutItemsListResponseQuantityMax).optional().describe('Quantity of this product in cart'),
  "unit_price": zod.regex(checkoutItemsListResponseUnitPriceRegExp).describe('Price per unit when added to cart'),
  "total_price": zod.number().describe('Get total price for this item.'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for CartItem model.')
export const checkoutItemsListResponse = zod.array(checkoutItemsListResponseItem)

/**
 * ViewSet for CartItem model with CRUD operations.
 */
export const checkoutItemsCreateBodyQuantityMax = 2147483647;


export const checkoutItemsCreateBody = zod.object({
  "product_id": zod.number(),
  "quantity": zod.number().min(1).max(checkoutItemsCreateBodyQuantityMax).optional().describe('Quantity of this product in cart')
}).describe('Serializer for creating cart items.')

/**
 * ViewSet for CartItem model with CRUD operations.
 */
export const checkoutItemsRetrieveParams = zod.object({
  "id": zod.coerce.string()
})

export const checkoutItemsRetrieveResponseProductNameMax = 200;
export const checkoutItemsRetrieveResponseProductSlugMax = 200;

export const checkoutItemsRetrieveResponseProductSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const checkoutItemsRetrieveResponseProductShortDescriptionMax = 500;
export const checkoutItemsRetrieveResponseProductPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutItemsRetrieveResponseProductOriginalPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutItemsRetrieveResponseProductSkuMax = 100;
export const checkoutItemsRetrieveResponseProductStockQuantityMin = 0;

export const checkoutItemsRetrieveResponseProductStockQuantityMax = 2147483647;
export const checkoutItemsRetrieveResponseProductCategoryNameMax = 100;
export const checkoutItemsRetrieveResponseProductCategorySlugMax = 100;

export const checkoutItemsRetrieveResponseProductCategorySlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const checkoutItemsRetrieveResponseProductManufacturerNameMax = 100;
export const checkoutItemsRetrieveResponseProductManufacturerSlugMax = 100;

export const checkoutItemsRetrieveResponseProductManufacturerSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const checkoutItemsRetrieveResponseProductManufacturerWebsiteMax = 200;
export const checkoutItemsRetrieveResponseQuantityMax = 2147483647;
export const checkoutItemsRetrieveResponseUnitPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');


export const checkoutItemsRetrieveResponse = zod.object({
  "id": zod.number(),
  "product": zod.object({
  "id": zod.number(),
  "name": zod.string().max(checkoutItemsRetrieveResponseProductNameMax).describe('Product name'),
  "slug": zod.string().max(checkoutItemsRetrieveResponseProductSlugMax).regex(checkoutItemsRetrieveResponseProductSlugRegExp).describe('URL-friendly version of the name'),
  "short_description": zod.string().max(checkoutItemsRetrieveResponseProductShortDescriptionMax).optional().describe('Short description for listings'),
  "price": zod.regex(checkoutItemsRetrieveResponseProductPriceRegExp).describe('Product price'),
  "original_price": zod.regex(checkoutItemsRetrieveResponseProductOriginalPriceRegExp).describe('Original price for showing discounts'),
  "current_price": zod.string().describe('Get current price as formatted decimal string.'),
  "discount_percentage": zod.number().describe('Calculate discount percentage.'),
  "sku": zod.string().max(checkoutItemsRetrieveResponseProductSkuMax).describe('Unique product identifier'),
  "stock_quantity": zod.number().min(checkoutItemsRetrieveResponseProductStockQuantityMin).max(checkoutItemsRetrieveResponseProductStockQuantityMax).optional().describe('Available quantity in stock'),
  "is_visible": zod.boolean().optional().describe('Is product visible to the users'),
  "is_on_sale": zod.boolean(),
  "is_in_stock": zod.boolean().describe('Check if product is in stock.'),
  "is_available": zod.boolean().describe('Check if product is available for purchase.'),
  "category": zod.object({
  "id": zod.number(),
  "name": zod.string().max(checkoutItemsRetrieveResponseProductCategoryNameMax).describe('Category name'),
  "slug": zod.string().max(checkoutItemsRetrieveResponseProductCategorySlugMax).regex(checkoutItemsRetrieveResponseProductCategorySlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Category description'),
  "is_active": zod.boolean().optional().describe('Whether this category is visible'),
  "active_product_count": zod.number(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Category model.'),
  "manufacturer": zod.object({
  "id": zod.number(),
  "name": zod.string().max(checkoutItemsRetrieveResponseProductManufacturerNameMax).describe('Manufacturer name'),
  "slug": zod.string().max(checkoutItemsRetrieveResponseProductManufacturerSlugMax).regex(checkoutItemsRetrieveResponseProductManufacturerSlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Manufacturer description'),
  "website": zod.string().max(checkoutItemsRetrieveResponseProductManufacturerWebsiteMax).optional().describe('Manufacturer website URL'),
  "is_active": zod.boolean().optional().describe('Whether this manufacturer is visible'),
  "active_product_count": zod.number(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Manufacturer model.'),
  "primary_image": zod.string().nullable().describe('Get URL of primary product image.'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created')
}).describe('Simplified serializer for product listings.'),
  "product_id": zod.number(),
  "quantity": zod.number().min(1).max(checkoutItemsRetrieveResponseQuantityMax).optional().describe('Quantity of this product in cart'),
  "unit_price": zod.regex(checkoutItemsRetrieveResponseUnitPriceRegExp).describe('Price per unit when added to cart'),
  "total_price": zod.number().describe('Get total price for this item.'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for CartItem model.')

/**
 * ViewSet for CartItem model with CRUD operations.
 */
export const checkoutItemsUpdateParams = zod.object({
  "id": zod.coerce.string()
})

export const checkoutItemsUpdateBodyQuantityMax = 2147483647;


export const checkoutItemsUpdateBody = zod.object({
  "product_id": zod.number(),
  "quantity": zod.number().min(1).max(checkoutItemsUpdateBodyQuantityMax).optional().describe('Quantity of this product in cart')
}).describe('Serializer for CartItem model.')

export const checkoutItemsUpdateResponseProductNameMax = 200;
export const checkoutItemsUpdateResponseProductSlugMax = 200;

export const checkoutItemsUpdateResponseProductSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const checkoutItemsUpdateResponseProductShortDescriptionMax = 500;
export const checkoutItemsUpdateResponseProductPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutItemsUpdateResponseProductOriginalPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutItemsUpdateResponseProductSkuMax = 100;
export const checkoutItemsUpdateResponseProductStockQuantityMin = 0;

export const checkoutItemsUpdateResponseProductStockQuantityMax = 2147483647;
export const checkoutItemsUpdateResponseProductCategoryNameMax = 100;
export const checkoutItemsUpdateResponseProductCategorySlugMax = 100;

export const checkoutItemsUpdateResponseProductCategorySlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const checkoutItemsUpdateResponseProductManufacturerNameMax = 100;
export const checkoutItemsUpdateResponseProductManufacturerSlugMax = 100;

export const checkoutItemsUpdateResponseProductManufacturerSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const checkoutItemsUpdateResponseProductManufacturerWebsiteMax = 200;
export const checkoutItemsUpdateResponseQuantityMax = 2147483647;
export const checkoutItemsUpdateResponseUnitPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');


export const checkoutItemsUpdateResponse = zod.object({
  "id": zod.number(),
  "product": zod.object({
  "id": zod.number(),
  "name": zod.string().max(checkoutItemsUpdateResponseProductNameMax).describe('Product name'),
  "slug": zod.string().max(checkoutItemsUpdateResponseProductSlugMax).regex(checkoutItemsUpdateResponseProductSlugRegExp).describe('URL-friendly version of the name'),
  "short_description": zod.string().max(checkoutItemsUpdateResponseProductShortDescriptionMax).optional().describe('Short description for listings'),
  "price": zod.regex(checkoutItemsUpdateResponseProductPriceRegExp).describe('Product price'),
  "original_price": zod.regex(checkoutItemsUpdateResponseProductOriginalPriceRegExp).describe('Original price for showing discounts'),
  "current_price": zod.string().describe('Get current price as formatted decimal string.'),
  "discount_percentage": zod.number().describe('Calculate discount percentage.'),
  "sku": zod.string().max(checkoutItemsUpdateResponseProductSkuMax).describe('Unique product identifier'),
  "stock_quantity": zod.number().min(checkoutItemsUpdateResponseProductStockQuantityMin).max(checkoutItemsUpdateResponseProductStockQuantityMax).optional().describe('Available quantity in stock'),
  "is_visible": zod.boolean().optional().describe('Is product visible to the users'),
  "is_on_sale": zod.boolean(),
  "is_in_stock": zod.boolean().describe('Check if product is in stock.'),
  "is_available": zod.boolean().describe('Check if product is available for purchase.'),
  "category": zod.object({
  "id": zod.number(),
  "name": zod.string().max(checkoutItemsUpdateResponseProductCategoryNameMax).describe('Category name'),
  "slug": zod.string().max(checkoutItemsUpdateResponseProductCategorySlugMax).regex(checkoutItemsUpdateResponseProductCategorySlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Category description'),
  "is_active": zod.boolean().optional().describe('Whether this category is visible'),
  "active_product_count": zod.number(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Category model.'),
  "manufacturer": zod.object({
  "id": zod.number(),
  "name": zod.string().max(checkoutItemsUpdateResponseProductManufacturerNameMax).describe('Manufacturer name'),
  "slug": zod.string().max(checkoutItemsUpdateResponseProductManufacturerSlugMax).regex(checkoutItemsUpdateResponseProductManufacturerSlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Manufacturer description'),
  "website": zod.string().max(checkoutItemsUpdateResponseProductManufacturerWebsiteMax).optional().describe('Manufacturer website URL'),
  "is_active": zod.boolean().optional().describe('Whether this manufacturer is visible'),
  "active_product_count": zod.number(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Manufacturer model.'),
  "primary_image": zod.string().nullable().describe('Get URL of primary product image.'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created')
}).describe('Simplified serializer for product listings.'),
  "product_id": zod.number(),
  "quantity": zod.number().min(1).max(checkoutItemsUpdateResponseQuantityMax).optional().describe('Quantity of this product in cart'),
  "unit_price": zod.regex(checkoutItemsUpdateResponseUnitPriceRegExp).describe('Price per unit when added to cart'),
  "total_price": zod.number().describe('Get total price for this item.'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for CartItem model.')

/**
 * ViewSet for CartItem model with CRUD operations.
 */
export const checkoutItemsPartialUpdateParams = zod.object({
  "id": zod.coerce.string()
})

export const checkoutItemsPartialUpdateBodyQuantityMax = 2147483647;


export const checkoutItemsPartialUpdateBody = zod.object({
  "product_id": zod.number().optional(),
  "quantity": zod.number().min(1).max(checkoutItemsPartialUpdateBodyQuantityMax).optional().describe('Quantity of this product in cart')
}).describe('Serializer for CartItem model.')

export const checkoutItemsPartialUpdateResponseProductNameMax = 200;
export const checkoutItemsPartialUpdateResponseProductSlugMax = 200;

export const checkoutItemsPartialUpdateResponseProductSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const checkoutItemsPartialUpdateResponseProductShortDescriptionMax = 500;
export const checkoutItemsPartialUpdateResponseProductPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutItemsPartialUpdateResponseProductOriginalPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutItemsPartialUpdateResponseProductSkuMax = 100;
export const checkoutItemsPartialUpdateResponseProductStockQuantityMin = 0;

export const checkoutItemsPartialUpdateResponseProductStockQuantityMax = 2147483647;
export const checkoutItemsPartialUpdateResponseProductCategoryNameMax = 100;
export const checkoutItemsPartialUpdateResponseProductCategorySlugMax = 100;

export const checkoutItemsPartialUpdateResponseProductCategorySlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const checkoutItemsPartialUpdateResponseProductManufacturerNameMax = 100;
export const checkoutItemsPartialUpdateResponseProductManufacturerSlugMax = 100;

export const checkoutItemsPartialUpdateResponseProductManufacturerSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const checkoutItemsPartialUpdateResponseProductManufacturerWebsiteMax = 200;
export const checkoutItemsPartialUpdateResponseQuantityMax = 2147483647;
export const checkoutItemsPartialUpdateResponseUnitPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');


export const checkoutItemsPartialUpdateResponse = zod.object({
  "id": zod.number(),
  "product": zod.object({
  "id": zod.number(),
  "name": zod.string().max(checkoutItemsPartialUpdateResponseProductNameMax).describe('Product name'),
  "slug": zod.string().max(checkoutItemsPartialUpdateResponseProductSlugMax).regex(checkoutItemsPartialUpdateResponseProductSlugRegExp).describe('URL-friendly version of the name'),
  "short_description": zod.string().max(checkoutItemsPartialUpdateResponseProductShortDescriptionMax).optional().describe('Short description for listings'),
  "price": zod.regex(checkoutItemsPartialUpdateResponseProductPriceRegExp).describe('Product price'),
  "original_price": zod.regex(checkoutItemsPartialUpdateResponseProductOriginalPriceRegExp).describe('Original price for showing discounts'),
  "current_price": zod.string().describe('Get current price as formatted decimal string.'),
  "discount_percentage": zod.number().describe('Calculate discount percentage.'),
  "sku": zod.string().max(checkoutItemsPartialUpdateResponseProductSkuMax).describe('Unique product identifier'),
  "stock_quantity": zod.number().min(checkoutItemsPartialUpdateResponseProductStockQuantityMin).max(checkoutItemsPartialUpdateResponseProductStockQuantityMax).optional().describe('Available quantity in stock'),
  "is_visible": zod.boolean().optional().describe('Is product visible to the users'),
  "is_on_sale": zod.boolean(),
  "is_in_stock": zod.boolean().describe('Check if product is in stock.'),
  "is_available": zod.boolean().describe('Check if product is available for purchase.'),
  "category": zod.object({
  "id": zod.number(),
  "name": zod.string().max(checkoutItemsPartialUpdateResponseProductCategoryNameMax).describe('Category name'),
  "slug": zod.string().max(checkoutItemsPartialUpdateResponseProductCategorySlugMax).regex(checkoutItemsPartialUpdateResponseProductCategorySlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Category description'),
  "is_active": zod.boolean().optional().describe('Whether this category is visible'),
  "active_product_count": zod.number(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Category model.'),
  "manufacturer": zod.object({
  "id": zod.number(),
  "name": zod.string().max(checkoutItemsPartialUpdateResponseProductManufacturerNameMax).describe('Manufacturer name'),
  "slug": zod.string().max(checkoutItemsPartialUpdateResponseProductManufacturerSlugMax).regex(checkoutItemsPartialUpdateResponseProductManufacturerSlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Manufacturer description'),
  "website": zod.string().max(checkoutItemsPartialUpdateResponseProductManufacturerWebsiteMax).optional().describe('Manufacturer website URL'),
  "is_active": zod.boolean().optional().describe('Whether this manufacturer is visible'),
  "active_product_count": zod.number(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Manufacturer model.'),
  "primary_image": zod.string().nullable().describe('Get URL of primary product image.'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created')
}).describe('Simplified serializer for product listings.'),
  "product_id": zod.number(),
  "quantity": zod.number().min(1).max(checkoutItemsPartialUpdateResponseQuantityMax).optional().describe('Quantity of this product in cart'),
  "unit_price": zod.regex(checkoutItemsPartialUpdateResponseUnitPriceRegExp).describe('Price per unit when added to cart'),
  "total_price": zod.number().describe('Get total price for this item.'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for CartItem model.')

/**
 * Handle deletion with foreign key constraint protection.
 */
export const checkoutItemsDestroyParams = zod.object({
  "id": zod.coerce.string()
})

/**
 * Decrease item quantity.
 */
export const checkoutItemsDecreaseQuantityCreateParams = zod.object({
  "id": zod.coerce.string()
})

export const checkoutItemsDecreaseQuantityCreateBodyQuantityMax = 2147483647;


export const checkoutItemsDecreaseQuantityCreateBody = zod.object({
  "product_id": zod.number(),
  "quantity": zod.number().min(1).max(checkoutItemsDecreaseQuantityCreateBodyQuantityMax).optional().describe('Quantity of this product in cart')
}).describe('Serializer for CartItem model.')

export const checkoutItemsDecreaseQuantityCreateResponseProductNameMax = 200;
export const checkoutItemsDecreaseQuantityCreateResponseProductSlugMax = 200;

export const checkoutItemsDecreaseQuantityCreateResponseProductSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const checkoutItemsDecreaseQuantityCreateResponseProductShortDescriptionMax = 500;
export const checkoutItemsDecreaseQuantityCreateResponseProductPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutItemsDecreaseQuantityCreateResponseProductOriginalPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutItemsDecreaseQuantityCreateResponseProductSkuMax = 100;
export const checkoutItemsDecreaseQuantityCreateResponseProductStockQuantityMin = 0;

export const checkoutItemsDecreaseQuantityCreateResponseProductStockQuantityMax = 2147483647;
export const checkoutItemsDecreaseQuantityCreateResponseProductCategoryNameMax = 100;
export const checkoutItemsDecreaseQuantityCreateResponseProductCategorySlugMax = 100;

export const checkoutItemsDecreaseQuantityCreateResponseProductCategorySlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const checkoutItemsDecreaseQuantityCreateResponseProductManufacturerNameMax = 100;
export const checkoutItemsDecreaseQuantityCreateResponseProductManufacturerSlugMax = 100;

export const checkoutItemsDecreaseQuantityCreateResponseProductManufacturerSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const checkoutItemsDecreaseQuantityCreateResponseProductManufacturerWebsiteMax = 200;
export const checkoutItemsDecreaseQuantityCreateResponseQuantityMax = 2147483647;
export const checkoutItemsDecreaseQuantityCreateResponseUnitPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');


export const checkoutItemsDecreaseQuantityCreateResponse = zod.object({
  "id": zod.number(),
  "product": zod.object({
  "id": zod.number(),
  "name": zod.string().max(checkoutItemsDecreaseQuantityCreateResponseProductNameMax).describe('Product name'),
  "slug": zod.string().max(checkoutItemsDecreaseQuantityCreateResponseProductSlugMax).regex(checkoutItemsDecreaseQuantityCreateResponseProductSlugRegExp).describe('URL-friendly version of the name'),
  "short_description": zod.string().max(checkoutItemsDecreaseQuantityCreateResponseProductShortDescriptionMax).optional().describe('Short description for listings'),
  "price": zod.regex(checkoutItemsDecreaseQuantityCreateResponseProductPriceRegExp).describe('Product price'),
  "original_price": zod.regex(checkoutItemsDecreaseQuantityCreateResponseProductOriginalPriceRegExp).describe('Original price for showing discounts'),
  "current_price": zod.string().describe('Get current price as formatted decimal string.'),
  "discount_percentage": zod.number().describe('Calculate discount percentage.'),
  "sku": zod.string().max(checkoutItemsDecreaseQuantityCreateResponseProductSkuMax).describe('Unique product identifier'),
  "stock_quantity": zod.number().min(checkoutItemsDecreaseQuantityCreateResponseProductStockQuantityMin).max(checkoutItemsDecreaseQuantityCreateResponseProductStockQuantityMax).optional().describe('Available quantity in stock'),
  "is_visible": zod.boolean().optional().describe('Is product visible to the users'),
  "is_on_sale": zod.boolean(),
  "is_in_stock": zod.boolean().describe('Check if product is in stock.'),
  "is_available": zod.boolean().describe('Check if product is available for purchase.'),
  "category": zod.object({
  "id": zod.number(),
  "name": zod.string().max(checkoutItemsDecreaseQuantityCreateResponseProductCategoryNameMax).describe('Category name'),
  "slug": zod.string().max(checkoutItemsDecreaseQuantityCreateResponseProductCategorySlugMax).regex(checkoutItemsDecreaseQuantityCreateResponseProductCategorySlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Category description'),
  "is_active": zod.boolean().optional().describe('Whether this category is visible'),
  "active_product_count": zod.number(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Category model.'),
  "manufacturer": zod.object({
  "id": zod.number(),
  "name": zod.string().max(checkoutItemsDecreaseQuantityCreateResponseProductManufacturerNameMax).describe('Manufacturer name'),
  "slug": zod.string().max(checkoutItemsDecreaseQuantityCreateResponseProductManufacturerSlugMax).regex(checkoutItemsDecreaseQuantityCreateResponseProductManufacturerSlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Manufacturer description'),
  "website": zod.string().max(checkoutItemsDecreaseQuantityCreateResponseProductManufacturerWebsiteMax).optional().describe('Manufacturer website URL'),
  "is_active": zod.boolean().optional().describe('Whether this manufacturer is visible'),
  "active_product_count": zod.number(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Manufacturer model.'),
  "primary_image": zod.string().nullable().describe('Get URL of primary product image.'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created')
}).describe('Simplified serializer for product listings.'),
  "product_id": zod.number(),
  "quantity": zod.number().min(1).max(checkoutItemsDecreaseQuantityCreateResponseQuantityMax).optional().describe('Quantity of this product in cart'),
  "unit_price": zod.regex(checkoutItemsDecreaseQuantityCreateResponseUnitPriceRegExp).describe('Price per unit when added to cart'),
  "total_price": zod.number().describe('Get total price for this item.'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for CartItem model.')

/**
 * Increase item quantity.
 */
export const checkoutItemsIncreaseQuantityCreateParams = zod.object({
  "id": zod.coerce.string()
})

export const checkoutItemsIncreaseQuantityCreateBodyQuantityMax = 2147483647;


export const checkoutItemsIncreaseQuantityCreateBody = zod.object({
  "product_id": zod.number(),
  "quantity": zod.number().min(1).max(checkoutItemsIncreaseQuantityCreateBodyQuantityMax).optional().describe('Quantity of this product in cart')
}).describe('Serializer for CartItem model.')

export const checkoutItemsIncreaseQuantityCreateResponseProductNameMax = 200;
export const checkoutItemsIncreaseQuantityCreateResponseProductSlugMax = 200;

export const checkoutItemsIncreaseQuantityCreateResponseProductSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const checkoutItemsIncreaseQuantityCreateResponseProductShortDescriptionMax = 500;
export const checkoutItemsIncreaseQuantityCreateResponseProductPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutItemsIncreaseQuantityCreateResponseProductOriginalPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutItemsIncreaseQuantityCreateResponseProductSkuMax = 100;
export const checkoutItemsIncreaseQuantityCreateResponseProductStockQuantityMin = 0;

export const checkoutItemsIncreaseQuantityCreateResponseProductStockQuantityMax = 2147483647;
export const checkoutItemsIncreaseQuantityCreateResponseProductCategoryNameMax = 100;
export const checkoutItemsIncreaseQuantityCreateResponseProductCategorySlugMax = 100;

export const checkoutItemsIncreaseQuantityCreateResponseProductCategorySlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const checkoutItemsIncreaseQuantityCreateResponseProductManufacturerNameMax = 100;
export const checkoutItemsIncreaseQuantityCreateResponseProductManufacturerSlugMax = 100;

export const checkoutItemsIncreaseQuantityCreateResponseProductManufacturerSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const checkoutItemsIncreaseQuantityCreateResponseProductManufacturerWebsiteMax = 200;
export const checkoutItemsIncreaseQuantityCreateResponseQuantityMax = 2147483647;
export const checkoutItemsIncreaseQuantityCreateResponseUnitPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');


export const checkoutItemsIncreaseQuantityCreateResponse = zod.object({
  "id": zod.number(),
  "product": zod.object({
  "id": zod.number(),
  "name": zod.string().max(checkoutItemsIncreaseQuantityCreateResponseProductNameMax).describe('Product name'),
  "slug": zod.string().max(checkoutItemsIncreaseQuantityCreateResponseProductSlugMax).regex(checkoutItemsIncreaseQuantityCreateResponseProductSlugRegExp).describe('URL-friendly version of the name'),
  "short_description": zod.string().max(checkoutItemsIncreaseQuantityCreateResponseProductShortDescriptionMax).optional().describe('Short description for listings'),
  "price": zod.regex(checkoutItemsIncreaseQuantityCreateResponseProductPriceRegExp).describe('Product price'),
  "original_price": zod.regex(checkoutItemsIncreaseQuantityCreateResponseProductOriginalPriceRegExp).describe('Original price for showing discounts'),
  "current_price": zod.string().describe('Get current price as formatted decimal string.'),
  "discount_percentage": zod.number().describe('Calculate discount percentage.'),
  "sku": zod.string().max(checkoutItemsIncreaseQuantityCreateResponseProductSkuMax).describe('Unique product identifier'),
  "stock_quantity": zod.number().min(checkoutItemsIncreaseQuantityCreateResponseProductStockQuantityMin).max(checkoutItemsIncreaseQuantityCreateResponseProductStockQuantityMax).optional().describe('Available quantity in stock'),
  "is_visible": zod.boolean().optional().describe('Is product visible to the users'),
  "is_on_sale": zod.boolean(),
  "is_in_stock": zod.boolean().describe('Check if product is in stock.'),
  "is_available": zod.boolean().describe('Check if product is available for purchase.'),
  "category": zod.object({
  "id": zod.number(),
  "name": zod.string().max(checkoutItemsIncreaseQuantityCreateResponseProductCategoryNameMax).describe('Category name'),
  "slug": zod.string().max(checkoutItemsIncreaseQuantityCreateResponseProductCategorySlugMax).regex(checkoutItemsIncreaseQuantityCreateResponseProductCategorySlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Category description'),
  "is_active": zod.boolean().optional().describe('Whether this category is visible'),
  "active_product_count": zod.number(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Category model.'),
  "manufacturer": zod.object({
  "id": zod.number(),
  "name": zod.string().max(checkoutItemsIncreaseQuantityCreateResponseProductManufacturerNameMax).describe('Manufacturer name'),
  "slug": zod.string().max(checkoutItemsIncreaseQuantityCreateResponseProductManufacturerSlugMax).regex(checkoutItemsIncreaseQuantityCreateResponseProductManufacturerSlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Manufacturer description'),
  "website": zod.string().max(checkoutItemsIncreaseQuantityCreateResponseProductManufacturerWebsiteMax).optional().describe('Manufacturer website URL'),
  "is_active": zod.boolean().optional().describe('Whether this manufacturer is visible'),
  "active_product_count": zod.number(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Manufacturer model.'),
  "primary_image": zod.string().nullable().describe('Get URL of primary product image.'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created')
}).describe('Simplified serializer for product listings.'),
  "product_id": zod.number(),
  "quantity": zod.number().min(1).max(checkoutItemsIncreaseQuantityCreateResponseQuantityMax).optional().describe('Quantity of this product in cart'),
  "unit_price": zod.regex(checkoutItemsIncreaseQuantityCreateResponseUnitPriceRegExp).describe('Price per unit when added to cart'),
  "total_price": zod.number().describe('Get total price for this item.'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for CartItem model.')

/**
 * Update item quantity.
 */
export const checkoutItemsUpdateQuantityCreateParams = zod.object({
  "id": zod.coerce.string()
})

export const checkoutItemsUpdateQuantityCreateBodyQuantityMax = 2147483647;


export const checkoutItemsUpdateQuantityCreateBody = zod.object({
  "product_id": zod.number(),
  "quantity": zod.number().min(1).max(checkoutItemsUpdateQuantityCreateBodyQuantityMax).optional().describe('Quantity of this product in cart')
}).describe('Serializer for CartItem model.')

export const checkoutItemsUpdateQuantityCreateResponseProductNameMax = 200;
export const checkoutItemsUpdateQuantityCreateResponseProductSlugMax = 200;

export const checkoutItemsUpdateQuantityCreateResponseProductSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const checkoutItemsUpdateQuantityCreateResponseProductShortDescriptionMax = 500;
export const checkoutItemsUpdateQuantityCreateResponseProductPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutItemsUpdateQuantityCreateResponseProductOriginalPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutItemsUpdateQuantityCreateResponseProductSkuMax = 100;
export const checkoutItemsUpdateQuantityCreateResponseProductStockQuantityMin = 0;

export const checkoutItemsUpdateQuantityCreateResponseProductStockQuantityMax = 2147483647;
export const checkoutItemsUpdateQuantityCreateResponseProductCategoryNameMax = 100;
export const checkoutItemsUpdateQuantityCreateResponseProductCategorySlugMax = 100;

export const checkoutItemsUpdateQuantityCreateResponseProductCategorySlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const checkoutItemsUpdateQuantityCreateResponseProductManufacturerNameMax = 100;
export const checkoutItemsUpdateQuantityCreateResponseProductManufacturerSlugMax = 100;

export const checkoutItemsUpdateQuantityCreateResponseProductManufacturerSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const checkoutItemsUpdateQuantityCreateResponseProductManufacturerWebsiteMax = 200;
export const checkoutItemsUpdateQuantityCreateResponseQuantityMax = 2147483647;
export const checkoutItemsUpdateQuantityCreateResponseUnitPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');


export const checkoutItemsUpdateQuantityCreateResponse = zod.object({
  "id": zod.number(),
  "product": zod.object({
  "id": zod.number(),
  "name": zod.string().max(checkoutItemsUpdateQuantityCreateResponseProductNameMax).describe('Product name'),
  "slug": zod.string().max(checkoutItemsUpdateQuantityCreateResponseProductSlugMax).regex(checkoutItemsUpdateQuantityCreateResponseProductSlugRegExp).describe('URL-friendly version of the name'),
  "short_description": zod.string().max(checkoutItemsUpdateQuantityCreateResponseProductShortDescriptionMax).optional().describe('Short description for listings'),
  "price": zod.regex(checkoutItemsUpdateQuantityCreateResponseProductPriceRegExp).describe('Product price'),
  "original_price": zod.regex(checkoutItemsUpdateQuantityCreateResponseProductOriginalPriceRegExp).describe('Original price for showing discounts'),
  "current_price": zod.string().describe('Get current price as formatted decimal string.'),
  "discount_percentage": zod.number().describe('Calculate discount percentage.'),
  "sku": zod.string().max(checkoutItemsUpdateQuantityCreateResponseProductSkuMax).describe('Unique product identifier'),
  "stock_quantity": zod.number().min(checkoutItemsUpdateQuantityCreateResponseProductStockQuantityMin).max(checkoutItemsUpdateQuantityCreateResponseProductStockQuantityMax).optional().describe('Available quantity in stock'),
  "is_visible": zod.boolean().optional().describe('Is product visible to the users'),
  "is_on_sale": zod.boolean(),
  "is_in_stock": zod.boolean().describe('Check if product is in stock.'),
  "is_available": zod.boolean().describe('Check if product is available for purchase.'),
  "category": zod.object({
  "id": zod.number(),
  "name": zod.string().max(checkoutItemsUpdateQuantityCreateResponseProductCategoryNameMax).describe('Category name'),
  "slug": zod.string().max(checkoutItemsUpdateQuantityCreateResponseProductCategorySlugMax).regex(checkoutItemsUpdateQuantityCreateResponseProductCategorySlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Category description'),
  "is_active": zod.boolean().optional().describe('Whether this category is visible'),
  "active_product_count": zod.number(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Category model.'),
  "manufacturer": zod.object({
  "id": zod.number(),
  "name": zod.string().max(checkoutItemsUpdateQuantityCreateResponseProductManufacturerNameMax).describe('Manufacturer name'),
  "slug": zod.string().max(checkoutItemsUpdateQuantityCreateResponseProductManufacturerSlugMax).regex(checkoutItemsUpdateQuantityCreateResponseProductManufacturerSlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Manufacturer description'),
  "website": zod.string().max(checkoutItemsUpdateQuantityCreateResponseProductManufacturerWebsiteMax).optional().describe('Manufacturer website URL'),
  "is_active": zod.boolean().optional().describe('Whether this manufacturer is visible'),
  "active_product_count": zod.number(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Manufacturer model.'),
  "primary_image": zod.string().nullable().describe('Get URL of primary product image.'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created')
}).describe('Simplified serializer for product listings.'),
  "product_id": zod.number(),
  "quantity": zod.number().min(1).max(checkoutItemsUpdateQuantityCreateResponseQuantityMax).optional().describe('Quantity of this product in cart'),
  "unit_price": zod.regex(checkoutItemsUpdateQuantityCreateResponseUnitPriceRegExp).describe('Price per unit when added to cart'),
  "total_price": zod.number().describe('Get total price for this item.'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for CartItem model.')

/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const checkoutOrderNotesListQueryParams = zod.object({
  "id": zod.coerce.number().optional(),
  "ordering": zod.coerce.string().optional().describe('Which field to use when ordering the results.'),
  "page": zod.coerce.number().optional().describe('A page number within the paginated result set.'),
  "page_size": zod.coerce.number().optional().describe('Number of results to return per page.'),
  "search": zod.coerce.string().optional().describe('A search term.')
})

export const checkoutOrderNotesListResponse = zod.object({
  "count": zod.number(),
  "next": zod.url().nullish(),
  "previous": zod.url().nullish(),
  "results": zod.array(zod.object({
  "id": zod.number(),
  "order": zod.number().describe('Order this note relates to'),
  "order_number": zod.string(),
  "staff_member": zod.number().describe('Staff member who created this note'),
  "staff_member_name": zod.string(),
  "note": zod.string().describe('Note content'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}))
})

/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const checkoutOrderNotesCreateBody = zod.object({
  "order": zod.number().describe('Order this note relates to'),
  "note": zod.string().describe('Note content')
})

/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const checkoutOrderNotesRetrieveParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this Order Processing Note.')
})

export const checkoutOrderNotesRetrieveResponse = zod.object({
  "id": zod.number(),
  "order": zod.number().describe('Order this note relates to'),
  "order_number": zod.string(),
  "staff_member": zod.number().describe('Staff member who created this note'),
  "staff_member_name": zod.string(),
  "note": zod.string().describe('Note content'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
})

/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const checkoutOrderNotesUpdateParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this Order Processing Note.')
})

export const checkoutOrderNotesUpdateBody = zod.object({
  "order": zod.number().describe('Order this note relates to'),
  "note": zod.string().describe('Note content')
})

export const checkoutOrderNotesUpdateResponse = zod.object({
  "id": zod.number(),
  "order": zod.number().describe('Order this note relates to'),
  "order_number": zod.string(),
  "staff_member": zod.number().describe('Staff member who created this note'),
  "staff_member_name": zod.string(),
  "note": zod.string().describe('Note content'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
})

/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const checkoutOrderNotesPartialUpdateParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this Order Processing Note.')
})

export const checkoutOrderNotesPartialUpdateBody = zod.object({
  "order": zod.number().optional().describe('Order this note relates to'),
  "note": zod.string().optional().describe('Note content')
})

export const checkoutOrderNotesPartialUpdateResponse = zod.object({
  "id": zod.number(),
  "order": zod.number().describe('Order this note relates to'),
  "order_number": zod.string(),
  "staff_member": zod.number().describe('Staff member who created this note'),
  "staff_member_name": zod.string(),
  "note": zod.string().describe('Note content'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
})

/**
 * Handle deletion with foreign key constraint protection.
 */
export const checkoutOrderNotesDestroyParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this Order Processing Note.')
})

/**
 * Retrieve a list of orders for the current user
 * @summary Get current user's orders
 */
export const checkoutOrdersListQueryParams = zod.object({
  "ordering": zod.coerce.string().optional().describe('Which field to use when ordering the results.'),
  "page": zod.coerce.number().optional().describe('A page number within the paginated result set.'),
  "page_size": zod.coerce.number().optional().describe('Number of results to return per page.'),
  "search": zod.coerce.string().optional().describe('A search term.')
})

export const checkoutOrdersListResponseResultsItemResultsItemOrderNumberMax = 50;
export const checkoutOrdersListResponseResultsItemResultsItemSubtotalRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutOrdersListResponseResultsItemResultsItemShippingCostRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutOrdersListResponseResultsItemResultsItemCouponDiscountRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutOrdersListResponseResultsItemResultsItemTotalRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');


export const checkoutOrdersListResponse = zod.object({
  "count": zod.number(),
  "next": zod.url().nullish(),
  "previous": zod.url().nullish(),
  "results": zod.array(zod.object({
  "results": zod.array(zod.object({
  "id": zod.number(),
  "order_number": zod.string().max(checkoutOrdersListResponseResultsItemResultsItemOrderNumberMax).describe('Unique order number'),
  "status": zod.enum(['pending', 'confirmed', 'shipped', 'delivered']).describe('* `pending` - Pending\n* `confirmed` - Confirmed\n* `shipped` - Shipped\n* `delivered` - Delivered').optional().describe('Current status of the order\n\n* `pending` - Pending\n* `confirmed` - Confirmed\n* `shipped` - Shipped\n* `delivered` - Delivered'),
  "subtotal": zod.regex(checkoutOrdersListResponseResultsItemResultsItemSubtotalRegExp).describe('Subtotal of all items'),
  "shipping_cost": zod.regex(checkoutOrdersListResponseResultsItemResultsItemShippingCostRegExp).optional().describe('Shipping cost'),
  "coupon_discount": zod.regex(checkoutOrdersListResponseResultsItemResultsItemCouponDiscountRegExp).optional().describe('Discount amount from applied coupon'),
  "total": zod.regex(checkoutOrdersListResponseResultsItemResultsItemTotalRegExp).describe('Total amount including shipping'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created')
}).describe('Serializer for order list view.'))
}))
})

/**
 * Orders: users read their own; employees/admins full CRUD across all.
 */
export const checkoutOrdersCreateBodyOrderNumberMax = 50;
export const checkoutOrdersCreateBodySubtotalRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutOrdersCreateBodyShippingCostRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutOrdersCreateBodyCouponDiscountRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutOrdersCreateBodyTotalRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');


export const checkoutOrdersCreateBody = zod.object({
  "order_number": zod.string().max(checkoutOrdersCreateBodyOrderNumberMax).describe('Unique order number'),
  "status": zod.enum(['pending', 'confirmed', 'shipped', 'delivered']).describe('* `pending` - Pending\n* `confirmed` - Confirmed\n* `shipped` - Shipped\n* `delivered` - Delivered').optional().describe('Current status of the order\n\n* `pending` - Pending\n* `confirmed` - Confirmed\n* `shipped` - Shipped\n* `delivered` - Delivered'),
  "subtotal": zod.regex(checkoutOrdersCreateBodySubtotalRegExp).describe('Subtotal of all items'),
  "shipping_cost": zod.regex(checkoutOrdersCreateBodyShippingCostRegExp).optional().describe('Shipping cost'),
  "coupon_discount": zod.regex(checkoutOrdersCreateBodyCouponDiscountRegExp).optional().describe('Discount amount from applied coupon'),
  "total": zod.regex(checkoutOrdersCreateBodyTotalRegExp).describe('Total amount including shipping')
}).describe('Serializer for order list view.')

/**
 * Retrieve details of a specific order
 * @summary Get order details
 */
export const checkoutOrdersRetrieveParams = zod.object({
  "id": zod.coerce.string()
})

export const checkoutOrdersRetrieveResponseOrderNumberMax = 50;
export const checkoutOrdersRetrieveResponseSubtotalRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutOrdersRetrieveResponseShippingCostRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutOrdersRetrieveResponseCouponDiscountRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutOrdersRetrieveResponseTotalRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutOrdersRetrieveResponseShippingAddressProfileFirstNameMax = 150;
export const checkoutOrdersRetrieveResponseShippingAddressProfileLastNameMax = 150;
export const checkoutOrdersRetrieveResponseShippingAddressAddressMax = 255;
export const checkoutOrdersRetrieveResponseShippingAddressCityMax = 100;
export const checkoutOrdersRetrieveResponseShippingAddressPostalCodeMax = 20;
export const checkoutOrdersRetrieveResponseShippingAddressLabelMax = 50;
export const checkoutOrdersRetrieveResponseShippingMethodNameMax = 100;
export const checkoutOrdersRetrieveResponseShippingMethodPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutOrdersRetrieveResponseAppliedCouponCodeMax = 20;
export const checkoutOrdersRetrieveResponseAppliedCouponNameMax = 100;
export const checkoutOrdersRetrieveResponseAppliedCouponDiscountAmountRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutOrdersRetrieveResponseAppliedCouponMaxUsesMin = 0;

export const checkoutOrdersRetrieveResponseAppliedCouponMaxUsesMax = 2147483647;
export const checkoutOrdersRetrieveResponseAppliedCouponMaxUsesPerUserMin = 0;

export const checkoutOrdersRetrieveResponseAppliedCouponMaxUsesPerUserMax = 2147483647;
export const checkoutOrdersRetrieveResponseItemsItemProductNameMax = 200;
export const checkoutOrdersRetrieveResponseItemsItemProductSlugMax = 200;

export const checkoutOrdersRetrieveResponseItemsItemProductSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const checkoutOrdersRetrieveResponseItemsItemProductShortDescriptionMax = 500;
export const checkoutOrdersRetrieveResponseItemsItemProductPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutOrdersRetrieveResponseItemsItemProductOriginalPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutOrdersRetrieveResponseItemsItemProductSkuMax = 100;
export const checkoutOrdersRetrieveResponseItemsItemProductStockQuantityMin = 0;

export const checkoutOrdersRetrieveResponseItemsItemProductStockQuantityMax = 2147483647;
export const checkoutOrdersRetrieveResponseItemsItemProductCategoryNameMax = 100;
export const checkoutOrdersRetrieveResponseItemsItemProductCategorySlugMax = 100;

export const checkoutOrdersRetrieveResponseItemsItemProductCategorySlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const checkoutOrdersRetrieveResponseItemsItemProductManufacturerNameMax = 100;
export const checkoutOrdersRetrieveResponseItemsItemProductManufacturerSlugMax = 100;

export const checkoutOrdersRetrieveResponseItemsItemProductManufacturerSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const checkoutOrdersRetrieveResponseItemsItemProductManufacturerWebsiteMax = 200;
export const checkoutOrdersRetrieveResponseItemsItemProductTagsItemNameMax = 50;
export const checkoutOrdersRetrieveResponseItemsItemProductTagsItemSlugMax = 50;

export const checkoutOrdersRetrieveResponseItemsItemProductTagsItemSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const checkoutOrdersRetrieveResponseItemsItemProductImagesItemSortOrderMin = 0;

export const checkoutOrdersRetrieveResponseItemsItemProductImagesItemSortOrderMax = 2147483647;
export const checkoutOrdersRetrieveResponseItemsItemQuantityMin = 0;

export const checkoutOrdersRetrieveResponseItemsItemQuantityMax = 2147483647;
export const checkoutOrdersRetrieveResponseItemsItemUnitPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutOrdersRetrieveResponseItemsItemTotalPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');


export const checkoutOrdersRetrieveResponse = zod.object({
  "id": zod.number(),
  "order_number": zod.string().max(checkoutOrdersRetrieveResponseOrderNumberMax).describe('Unique order number'),
  "status": zod.enum(['pending', 'confirmed', 'shipped', 'delivered']).describe('* `pending` - Pending\n* `confirmed` - Confirmed\n* `shipped` - Shipped\n* `delivered` - Delivered'),
  "subtotal": zod.regex(checkoutOrdersRetrieveResponseSubtotalRegExp).describe('Subtotal of all items'),
  "shipping_cost": zod.regex(checkoutOrdersRetrieveResponseShippingCostRegExp),
  "coupon_discount": zod.regex(checkoutOrdersRetrieveResponseCouponDiscountRegExp).optional().describe('Discount amount from applied coupon'),
  "total": zod.regex(checkoutOrdersRetrieveResponseTotalRegExp).describe('Total amount including shipping'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "notes": zod.string().optional().describe('Additional notes for the order'),
  "shipping_address": zod.object({
  "id": zod.number(),
  "profile": zod.object({
  "id": zod.number(),
  "user_email": zod.string(),
  "display_name": zod.string(),
  "first_name": zod.string().max(checkoutOrdersRetrieveResponseShippingAddressProfileFirstNameMax).optional().describe('User\'s first name'),
  "last_name": zod.string().max(checkoutOrdersRetrieveResponseShippingAddressProfileLastNameMax).optional().describe('User\'s last name')
}).describe('Minimal profile serializer for address responses.'),
  "address": zod.string().max(checkoutOrdersRetrieveResponseShippingAddressAddressMax).describe('Street address, apartment, unit, etc.'),
  "city": zod.string().max(checkoutOrdersRetrieveResponseShippingAddressCityMax).describe('City name'),
  "postal_code": zod.string().max(checkoutOrdersRetrieveResponseShippingAddressPostalCodeMax).describe('ZIP code or postal code'),
  "country": zod.number().describe('Country for this address'),
  "is_default": zod.boolean().optional().describe('Whether this is the default address'),
  "label": zod.string().max(checkoutOrdersRetrieveResponseShippingAddressLabelMax).optional().describe('Optional label like \'Home\', \'Office\', etc.'),
  "full_address": zod.string(),
  "address_dict": zod.record(zod.string(), zod.any()),
  "is_complete": zod.boolean(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}),
  "shipping_method": zod.object({
  "id": zod.number(),
  "name": zod.string().max(checkoutOrdersRetrieveResponseShippingMethodNameMax).describe('Name of the shipping method (e.g., \'Standard\', \'Express\')'),
  "price": zod.regex(checkoutOrdersRetrieveResponseShippingMethodPriceRegExp).describe('Shipping cost'),
  "courier": zod.number().describe('Courier company providing this shipping method')
}).describe('Serializer for ShippingMethod model.'),
  "applied_coupon": zod.object({
  "id": zod.number(),
  "code": zod.string().max(checkoutOrdersRetrieveResponseAppliedCouponCodeMax).describe('Coupon code'),
  "name": zod.string().max(checkoutOrdersRetrieveResponseAppliedCouponNameMax).describe('Display name'),
  "description": zod.string().optional(),
  "discount_amount": zod.regex(checkoutOrdersRetrieveResponseAppliedCouponDiscountAmountRegExp).describe('Fixed discount amount'),
  "valid_from": zod.iso.datetime({}),
  "valid_until": zod.iso.datetime({}),
  "max_uses": zod.number().min(checkoutOrdersRetrieveResponseAppliedCouponMaxUsesMin).max(checkoutOrdersRetrieveResponseAppliedCouponMaxUsesMax).nullish().describe('Maximum total uses (null = unlimited)'),
  "max_uses_per_user": zod.number().min(checkoutOrdersRetrieveResponseAppliedCouponMaxUsesPerUserMin).max(checkoutOrdersRetrieveResponseAppliedCouponMaxUsesPerUserMax).optional().describe('Maximum uses per user'),
  "usage_count": zod.number()
}).describe('Serializer for coupon list and detail views.'),
  "items": zod.array(zod.object({
  "id": zod.number(),
  "product": zod.object({
  "id": zod.number(),
  "name": zod.string().max(checkoutOrdersRetrieveResponseItemsItemProductNameMax).describe('Product name'),
  "slug": zod.string().max(checkoutOrdersRetrieveResponseItemsItemProductSlugMax).regex(checkoutOrdersRetrieveResponseItemsItemProductSlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().describe('Detailed product description'),
  "short_description": zod.string().max(checkoutOrdersRetrieveResponseItemsItemProductShortDescriptionMax).optional().describe('Short description for listings'),
  "price": zod.regex(checkoutOrdersRetrieveResponseItemsItemProductPriceRegExp).describe('Product price'),
  "original_price": zod.regex(checkoutOrdersRetrieveResponseItemsItemProductOriginalPriceRegExp).describe('Original price for showing discounts'),
  "current_price": zod.string().describe('Get current price as formatted decimal string.'),
  "discount_percentage": zod.number().describe('Calculate discount percentage.'),
  "sku": zod.string().max(checkoutOrdersRetrieveResponseItemsItemProductSkuMax).describe('Unique product identifier'),
  "stock_quantity": zod.number().min(checkoutOrdersRetrieveResponseItemsItemProductStockQuantityMin).max(checkoutOrdersRetrieveResponseItemsItemProductStockQuantityMax).optional().describe('Available quantity in stock'),
  "category": zod.object({
  "id": zod.number(),
  "name": zod.string().max(checkoutOrdersRetrieveResponseItemsItemProductCategoryNameMax).describe('Category name'),
  "slug": zod.string().max(checkoutOrdersRetrieveResponseItemsItemProductCategorySlugMax).regex(checkoutOrdersRetrieveResponseItemsItemProductCategorySlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Category description'),
  "is_active": zod.boolean().optional().describe('Whether this category is visible'),
  "active_product_count": zod.number(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Category model.'),
  "category_id": zod.number(),
  "manufacturer": zod.object({
  "id": zod.number(),
  "name": zod.string().max(checkoutOrdersRetrieveResponseItemsItemProductManufacturerNameMax).describe('Manufacturer name'),
  "slug": zod.string().max(checkoutOrdersRetrieveResponseItemsItemProductManufacturerSlugMax).regex(checkoutOrdersRetrieveResponseItemsItemProductManufacturerSlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Manufacturer description'),
  "website": zod.string().max(checkoutOrdersRetrieveResponseItemsItemProductManufacturerWebsiteMax).optional().describe('Manufacturer website URL'),
  "is_active": zod.boolean().optional().describe('Whether this manufacturer is visible'),
  "active_product_count": zod.number(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Manufacturer model.'),
  "manufacturer_id": zod.number().nullish(),
  "tags": zod.array(zod.object({
  "id": zod.number(),
  "name": zod.string().max(checkoutOrdersRetrieveResponseItemsItemProductTagsItemNameMax).describe('Tag name'),
  "slug": zod.string().max(checkoutOrdersRetrieveResponseItemsItemProductTagsItemSlugMax).regex(checkoutOrdersRetrieveResponseItemsItemProductTagsItemSlugRegExp).describe('URL-friendly version of the name'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Tag model.')),
  "tag_ids": zod.array(zod.number()).optional(),
  "is_visible": zod.boolean().optional().describe('Is product visible to the users'),
  "sale_start": zod.iso.datetime({}).nullish(),
  "sale_end": zod.iso.datetime({}).nullish(),
  "is_on_sale": zod.boolean(),
  "is_in_stock": zod.boolean().describe('Check if product is in stock.'),
  "is_available": zod.boolean().describe('Check if product is available for purchase.'),
  "images": zod.array(zod.object({
  "id": zod.number(),
  "product": zod.number().describe('Associated product'),
  "image": zod.url().describe('Product image'),
  "image_url": zod.string().nullable(),
  "is_primary": zod.boolean().optional().describe('Whether this is the primary product image'),
  "sort_order": zod.number().min(checkoutOrdersRetrieveResponseItemsItemProductImagesItemSortOrderMin).max(checkoutOrdersRetrieveResponseItemsItemProductImagesItemSortOrderMax).optional().describe('Display order of images'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for ProductImage model.')),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Detailed serializer for product detail views.'),
  "quantity": zod.number().min(checkoutOrdersRetrieveResponseItemsItemQuantityMin).max(checkoutOrdersRetrieveResponseItemsItemQuantityMax).describe('Quantity ordered'),
  "unit_price": zod.regex(checkoutOrdersRetrieveResponseItemsItemUnitPriceRegExp).describe('Price per unit at time of order'),
  "total_price": zod.regex(checkoutOrdersRetrieveResponseItemsItemTotalPriceRegExp).describe('Total price for this item (quantity √ó unit_price)')
}).describe('Serializer for order items.'))
}).describe('Serializer for order detail view.')

/**
 * Orders: users read their own; employees/admins full CRUD across all.
 */
export const checkoutOrdersUpdateParams = zod.object({
  "id": zod.coerce.string()
})

export const checkoutOrdersUpdateBodyOrderNumberMax = 50;
export const checkoutOrdersUpdateBodySubtotalRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutOrdersUpdateBodyShippingCostRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutOrdersUpdateBodyCouponDiscountRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutOrdersUpdateBodyTotalRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');


export const checkoutOrdersUpdateBody = zod.object({
  "order_number": zod.string().max(checkoutOrdersUpdateBodyOrderNumberMax).describe('Unique order number'),
  "status": zod.enum(['pending', 'confirmed', 'shipped', 'delivered']).describe('* `pending` - Pending\n* `confirmed` - Confirmed\n* `shipped` - Shipped\n* `delivered` - Delivered').optional().describe('Current status of the order\n\n* `pending` - Pending\n* `confirmed` - Confirmed\n* `shipped` - Shipped\n* `delivered` - Delivered'),
  "subtotal": zod.regex(checkoutOrdersUpdateBodySubtotalRegExp).describe('Subtotal of all items'),
  "shipping_cost": zod.regex(checkoutOrdersUpdateBodyShippingCostRegExp).optional().describe('Shipping cost'),
  "coupon_discount": zod.regex(checkoutOrdersUpdateBodyCouponDiscountRegExp).optional().describe('Discount amount from applied coupon'),
  "total": zod.regex(checkoutOrdersUpdateBodyTotalRegExp).describe('Total amount including shipping')
}).describe('Serializer for order list view.')

export const checkoutOrdersUpdateResponseOrderNumberMax = 50;
export const checkoutOrdersUpdateResponseSubtotalRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutOrdersUpdateResponseShippingCostRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutOrdersUpdateResponseCouponDiscountRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutOrdersUpdateResponseTotalRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');


export const checkoutOrdersUpdateResponse = zod.object({
  "id": zod.number(),
  "order_number": zod.string().max(checkoutOrdersUpdateResponseOrderNumberMax).describe('Unique order number'),
  "status": zod.enum(['pending', 'confirmed', 'shipped', 'delivered']).describe('* `pending` - Pending\n* `confirmed` - Confirmed\n* `shipped` - Shipped\n* `delivered` - Delivered').optional().describe('Current status of the order\n\n* `pending` - Pending\n* `confirmed` - Confirmed\n* `shipped` - Shipped\n* `delivered` - Delivered'),
  "subtotal": zod.regex(checkoutOrdersUpdateResponseSubtotalRegExp).describe('Subtotal of all items'),
  "shipping_cost": zod.regex(checkoutOrdersUpdateResponseShippingCostRegExp).optional().describe('Shipping cost'),
  "coupon_discount": zod.regex(checkoutOrdersUpdateResponseCouponDiscountRegExp).optional().describe('Discount amount from applied coupon'),
  "total": zod.regex(checkoutOrdersUpdateResponseTotalRegExp).describe('Total amount including shipping'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created')
}).describe('Serializer for order list view.')

/**
 * Orders: users read their own; employees/admins full CRUD across all.
 */
export const checkoutOrdersPartialUpdateParams = zod.object({
  "id": zod.coerce.string()
})

export const checkoutOrdersPartialUpdateBodyOrderNumberMax = 50;
export const checkoutOrdersPartialUpdateBodySubtotalRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutOrdersPartialUpdateBodyShippingCostRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutOrdersPartialUpdateBodyCouponDiscountRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutOrdersPartialUpdateBodyTotalRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');


export const checkoutOrdersPartialUpdateBody = zod.object({
  "order_number": zod.string().max(checkoutOrdersPartialUpdateBodyOrderNumberMax).optional().describe('Unique order number'),
  "status": zod.enum(['pending', 'confirmed', 'shipped', 'delivered']).describe('* `pending` - Pending\n* `confirmed` - Confirmed\n* `shipped` - Shipped\n* `delivered` - Delivered').optional().describe('Current status of the order\n\n* `pending` - Pending\n* `confirmed` - Confirmed\n* `shipped` - Shipped\n* `delivered` - Delivered'),
  "subtotal": zod.regex(checkoutOrdersPartialUpdateBodySubtotalRegExp).optional().describe('Subtotal of all items'),
  "shipping_cost": zod.regex(checkoutOrdersPartialUpdateBodyShippingCostRegExp).optional().describe('Shipping cost'),
  "coupon_discount": zod.regex(checkoutOrdersPartialUpdateBodyCouponDiscountRegExp).optional().describe('Discount amount from applied coupon'),
  "total": zod.regex(checkoutOrdersPartialUpdateBodyTotalRegExp).optional().describe('Total amount including shipping')
}).describe('Serializer for order list view.')

export const checkoutOrdersPartialUpdateResponseOrderNumberMax = 50;
export const checkoutOrdersPartialUpdateResponseSubtotalRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutOrdersPartialUpdateResponseShippingCostRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutOrdersPartialUpdateResponseCouponDiscountRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutOrdersPartialUpdateResponseTotalRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');


export const checkoutOrdersPartialUpdateResponse = zod.object({
  "id": zod.number(),
  "order_number": zod.string().max(checkoutOrdersPartialUpdateResponseOrderNumberMax).describe('Unique order number'),
  "status": zod.enum(['pending', 'confirmed', 'shipped', 'delivered']).describe('* `pending` - Pending\n* `confirmed` - Confirmed\n* `shipped` - Shipped\n* `delivered` - Delivered').optional().describe('Current status of the order\n\n* `pending` - Pending\n* `confirmed` - Confirmed\n* `shipped` - Shipped\n* `delivered` - Delivered'),
  "subtotal": zod.regex(checkoutOrdersPartialUpdateResponseSubtotalRegExp).describe('Subtotal of all items'),
  "shipping_cost": zod.regex(checkoutOrdersPartialUpdateResponseShippingCostRegExp).optional().describe('Shipping cost'),
  "coupon_discount": zod.regex(checkoutOrdersPartialUpdateResponseCouponDiscountRegExp).optional().describe('Discount amount from applied coupon'),
  "total": zod.regex(checkoutOrdersPartialUpdateResponseTotalRegExp).describe('Total amount including shipping'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created')
}).describe('Serializer for order list view.')

/**
 * Handle deletion with foreign key constraint protection.
 */
export const checkoutOrdersDestroyParams = zod.object({
  "id": zod.coerce.string()
})

/**
 * Download CSV of orders for the given period (24h, 7d, 30d, lifetime)
 * @summary Export orders CSV
 */
export const checkoutOrdersExportCsvRetrieveQueryParams = zod.object({
  "period": zod.coerce.string().optional().describe('24h | 7d | 30d | lifetime')
})

export const checkoutOrdersExportCsvRetrieveResponse = zod.instanceof(File)

/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const checkoutPaymentsListQueryParams = zod.object({
  "id": zod.coerce.number().optional(),
  "ordering": zod.coerce.string().optional().describe('Which field to use when ordering the results.'),
  "page": zod.coerce.number().optional().describe('A page number within the paginated result set.'),
  "page_size": zod.coerce.number().optional().describe('Number of results to return per page.'),
  "search": zod.coerce.string().optional().describe('A search term.')
})

export const checkoutPaymentsListResponseResultsItemAmountRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutPaymentsListResponseResultsItemStripePaymentIntentIdMax = 255;


export const checkoutPaymentsListResponse = zod.object({
  "count": zod.number(),
  "next": zod.url().nullish(),
  "previous": zod.url().nullish(),
  "results": zod.array(zod.object({
  "id": zod.number(),
  "amount": zod.regex(checkoutPaymentsListResponseResultsItemAmountRegExp),
  "status": zod.enum(['pending', 'completed', 'failed', 'canceled']).describe('* `pending` - Pending\n* `completed` - Completed\n* `failed` - Failed\n* `canceled` - Canceled').optional().describe('Current status of the payment\n\n* `pending` - Pending\n* `completed` - Completed\n* `failed` - Failed\n* `canceled` - Canceled'),
  "stripe_payment_intent_id": zod.string().max(checkoutPaymentsListResponseResultsItemStripePaymentIntentIdMax).nullish(),
  "description": zod.string().optional(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Payment model.'))
})

/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const checkoutPaymentsCreateBodyAmountRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutPaymentsCreateBodyStripePaymentIntentIdMax = 255;


export const checkoutPaymentsCreateBody = zod.object({
  "amount": zod.regex(checkoutPaymentsCreateBodyAmountRegExp),
  "status": zod.enum(['pending', 'completed', 'failed', 'canceled']).describe('* `pending` - Pending\n* `completed` - Completed\n* `failed` - Failed\n* `canceled` - Canceled').optional().describe('Current status of the payment\n\n* `pending` - Pending\n* `completed` - Completed\n* `failed` - Failed\n* `canceled` - Canceled'),
  "stripe_payment_intent_id": zod.string().max(checkoutPaymentsCreateBodyStripePaymentIntentIdMax).nullish(),
  "description": zod.string().optional()
}).describe('Serializer for Payment model.')

/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const checkoutPaymentsRetrieveParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this payment.')
})

export const checkoutPaymentsRetrieveResponseAmountRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutPaymentsRetrieveResponseStripePaymentIntentIdMax = 255;


export const checkoutPaymentsRetrieveResponse = zod.object({
  "id": zod.number(),
  "amount": zod.regex(checkoutPaymentsRetrieveResponseAmountRegExp),
  "status": zod.enum(['pending', 'completed', 'failed', 'canceled']).describe('* `pending` - Pending\n* `completed` - Completed\n* `failed` - Failed\n* `canceled` - Canceled').optional().describe('Current status of the payment\n\n* `pending` - Pending\n* `completed` - Completed\n* `failed` - Failed\n* `canceled` - Canceled'),
  "stripe_payment_intent_id": zod.string().max(checkoutPaymentsRetrieveResponseStripePaymentIntentIdMax).nullish(),
  "description": zod.string().optional(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Payment model.')

/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const checkoutPaymentsUpdateParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this payment.')
})

export const checkoutPaymentsUpdateBodyAmountRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutPaymentsUpdateBodyStripePaymentIntentIdMax = 255;


export const checkoutPaymentsUpdateBody = zod.object({
  "amount": zod.regex(checkoutPaymentsUpdateBodyAmountRegExp),
  "status": zod.enum(['pending', 'completed', 'failed', 'canceled']).describe('* `pending` - Pending\n* `completed` - Completed\n* `failed` - Failed\n* `canceled` - Canceled').optional().describe('Current status of the payment\n\n* `pending` - Pending\n* `completed` - Completed\n* `failed` - Failed\n* `canceled` - Canceled'),
  "stripe_payment_intent_id": zod.string().max(checkoutPaymentsUpdateBodyStripePaymentIntentIdMax).nullish(),
  "description": zod.string().optional()
}).describe('Serializer for Payment model.')

export const checkoutPaymentsUpdateResponseAmountRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutPaymentsUpdateResponseStripePaymentIntentIdMax = 255;


export const checkoutPaymentsUpdateResponse = zod.object({
  "id": zod.number(),
  "amount": zod.regex(checkoutPaymentsUpdateResponseAmountRegExp),
  "status": zod.enum(['pending', 'completed', 'failed', 'canceled']).describe('* `pending` - Pending\n* `completed` - Completed\n* `failed` - Failed\n* `canceled` - Canceled').optional().describe('Current status of the payment\n\n* `pending` - Pending\n* `completed` - Completed\n* `failed` - Failed\n* `canceled` - Canceled'),
  "stripe_payment_intent_id": zod.string().max(checkoutPaymentsUpdateResponseStripePaymentIntentIdMax).nullish(),
  "description": zod.string().optional(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Payment model.')

/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const checkoutPaymentsPartialUpdateParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this payment.')
})

export const checkoutPaymentsPartialUpdateBodyAmountRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutPaymentsPartialUpdateBodyStripePaymentIntentIdMax = 255;


export const checkoutPaymentsPartialUpdateBody = zod.object({
  "amount": zod.regex(checkoutPaymentsPartialUpdateBodyAmountRegExp).optional(),
  "status": zod.enum(['pending', 'completed', 'failed', 'canceled']).describe('* `pending` - Pending\n* `completed` - Completed\n* `failed` - Failed\n* `canceled` - Canceled').optional().describe('Current status of the payment\n\n* `pending` - Pending\n* `completed` - Completed\n* `failed` - Failed\n* `canceled` - Canceled'),
  "stripe_payment_intent_id": zod.string().max(checkoutPaymentsPartialUpdateBodyStripePaymentIntentIdMax).nullish(),
  "description": zod.string().optional()
}).describe('Serializer for Payment model.')

export const checkoutPaymentsPartialUpdateResponseAmountRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const checkoutPaymentsPartialUpdateResponseStripePaymentIntentIdMax = 255;


export const checkoutPaymentsPartialUpdateResponse = zod.object({
  "id": zod.number(),
  "amount": zod.regex(checkoutPaymentsPartialUpdateResponseAmountRegExp),
  "status": zod.enum(['pending', 'completed', 'failed', 'canceled']).describe('* `pending` - Pending\n* `completed` - Completed\n* `failed` - Failed\n* `canceled` - Canceled').optional().describe('Current status of the payment\n\n* `pending` - Pending\n* `completed` - Completed\n* `failed` - Failed\n* `canceled` - Canceled'),
  "stripe_payment_intent_id": zod.string().max(checkoutPaymentsPartialUpdateResponseStripePaymentIntentIdMax).nullish(),
  "description": zod.string().optional(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Payment model.')

/**
 * Handle deletion with foreign key constraint protection.
 */
export const checkoutPaymentsDestroyParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this payment.')
})

/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const checkoutShipmentsListQueryParams = zod.object({
  "id": zod.coerce.number().optional(),
  "ordering": zod.coerce.string().optional().describe('Which field to use when ordering the results.'),
  "page": zod.coerce.number().optional().describe('A page number within the paginated result set.'),
  "page_size": zod.coerce.number().optional().describe('Number of results to return per page.'),
  "search": zod.coerce.string().optional().describe('A search term.')
})

export const checkoutShipmentsListResponse = zod.object({
  "count": zod.number(),
  "next": zod.url().nullish(),
  "previous": zod.url().nullish(),
  "results": zod.array(zod.object({
  "id": zod.number(),
  "order": zod.number().describe('Order this shipment is for'),
  "order_number": zod.string().describe('Unique order number'),
  "order_status": zod.enum(['pending', 'confirmed', 'shipped', 'delivered']).describe('* `pending` - Pending\n* `confirmed` - Confirmed\n* `shipped` - Shipped\n* `delivered` - Delivered').describe('Current status of the order\n\n* `pending` - Pending\n* `confirmed` - Confirmed\n* `shipped` - Shipped\n* `delivered` - Delivered'),
  "order_user_email": zod.email(),
  "shipping_method": zod.string(),
  "courier": zod.string(),
  "shipped_at": zod.iso.datetime({}).nullish().describe('When the package was shipped'),
  "delivered_at": zod.iso.datetime({}).nullish().describe('When the package was delivered'),
  "shipping_address": zod.string().describe('Shipping address at time of shipment'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}))
})

/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const checkoutShipmentsCreateBody = zod.object({
  "shipped_at": zod.iso.datetime({}).nullish().describe('When the package was shipped'),
  "delivered_at": zod.iso.datetime({}).nullish().describe('When the package was delivered'),
  "shipping_address": zod.string().describe('Shipping address at time of shipment')
})

/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const checkoutShipmentsRetrieveParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this Shipment.')
})

export const checkoutShipmentsRetrieveResponse = zod.object({
  "id": zod.number(),
  "order": zod.number().describe('Order this shipment is for'),
  "order_number": zod.string().describe('Unique order number'),
  "order_status": zod.enum(['pending', 'confirmed', 'shipped', 'delivered']).describe('* `pending` - Pending\n* `confirmed` - Confirmed\n* `shipped` - Shipped\n* `delivered` - Delivered').describe('Current status of the order\n\n* `pending` - Pending\n* `confirmed` - Confirmed\n* `shipped` - Shipped\n* `delivered` - Delivered'),
  "order_user_email": zod.email(),
  "shipping_method": zod.string(),
  "courier": zod.string(),
  "shipped_at": zod.iso.datetime({}).nullish().describe('When the package was shipped'),
  "delivered_at": zod.iso.datetime({}).nullish().describe('When the package was delivered'),
  "shipping_address": zod.string().describe('Shipping address at time of shipment'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
})

/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const checkoutShipmentsUpdateParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this Shipment.')
})

export const checkoutShipmentsUpdateBody = zod.object({
  "shipped_at": zod.iso.datetime({}).nullish().describe('When the package was shipped'),
  "delivered_at": zod.iso.datetime({}).nullish().describe('When the package was delivered'),
  "shipping_address": zod.string().describe('Shipping address at time of shipment')
})

export const checkoutShipmentsUpdateResponse = zod.object({
  "id": zod.number(),
  "order": zod.number().describe('Order this shipment is for'),
  "order_number": zod.string().describe('Unique order number'),
  "order_status": zod.enum(['pending', 'confirmed', 'shipped', 'delivered']).describe('* `pending` - Pending\n* `confirmed` - Confirmed\n* `shipped` - Shipped\n* `delivered` - Delivered').describe('Current status of the order\n\n* `pending` - Pending\n* `confirmed` - Confirmed\n* `shipped` - Shipped\n* `delivered` - Delivered'),
  "order_user_email": zod.email(),
  "shipping_method": zod.string(),
  "courier": zod.string(),
  "shipped_at": zod.iso.datetime({}).nullish().describe('When the package was shipped'),
  "delivered_at": zod.iso.datetime({}).nullish().describe('When the package was delivered'),
  "shipping_address": zod.string().describe('Shipping address at time of shipment'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
})

/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const checkoutShipmentsPartialUpdateParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this Shipment.')
})

export const checkoutShipmentsPartialUpdateBody = zod.object({
  "shipped_at": zod.iso.datetime({}).nullish().describe('When the package was shipped'),
  "delivered_at": zod.iso.datetime({}).nullish().describe('When the package was delivered'),
  "shipping_address": zod.string().optional().describe('Shipping address at time of shipment')
})

export const checkoutShipmentsPartialUpdateResponse = zod.object({
  "id": zod.number(),
  "order": zod.number().describe('Order this shipment is for'),
  "order_number": zod.string().describe('Unique order number'),
  "order_status": zod.enum(['pending', 'confirmed', 'shipped', 'delivered']).describe('* `pending` - Pending\n* `confirmed` - Confirmed\n* `shipped` - Shipped\n* `delivered` - Delivered').describe('Current status of the order\n\n* `pending` - Pending\n* `confirmed` - Confirmed\n* `shipped` - Shipped\n* `delivered` - Delivered'),
  "order_user_email": zod.email(),
  "shipping_method": zod.string(),
  "courier": zod.string(),
  "shipped_at": zod.iso.datetime({}).nullish().describe('When the package was shipped'),
  "delivered_at": zod.iso.datetime({}).nullish().describe('When the package was delivered'),
  "shipping_address": zod.string().describe('Shipping address at time of shipment'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
})

/**
 * Handle deletion with foreign key constraint protection.
 */
export const checkoutShipmentsDestroyParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this Shipment.')
})

/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const checkoutShippingMethodsListQueryParams = zod.object({
  "id": zod.coerce.number().optional(),
  "ordering": zod.coerce.string().optional().describe('Which field to use when ordering the results.'),
  "search": zod.coerce.string().optional().describe('A search term.')
})

export const checkoutShippingMethodsListResponseNameMax = 100;
export const checkoutShippingMethodsListResponsePriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');


export const checkoutShippingMethodsListResponseItem = zod.object({
  "id": zod.number(),
  "name": zod.string().max(checkoutShippingMethodsListResponseNameMax).describe('Name of the shipping method (e.g., \'Standard\', \'Express\')'),
  "price": zod.regex(checkoutShippingMethodsListResponsePriceRegExp).describe('Shipping cost'),
  "courier": zod.number().describe('Courier company providing this shipping method')
}).describe('Serializer for ShippingMethod model.')
export const checkoutShippingMethodsListResponse = zod.array(checkoutShippingMethodsListResponseItem)

/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const checkoutShippingMethodsCreateBodyNameMax = 100;
export const checkoutShippingMethodsCreateBodyPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');


export const checkoutShippingMethodsCreateBody = zod.object({
  "name": zod.string().max(checkoutShippingMethodsCreateBodyNameMax).describe('Name of the shipping method (e.g., \'Standard\', \'Express\')'),
  "price": zod.regex(checkoutShippingMethodsCreateBodyPriceRegExp).describe('Shipping cost'),
  "courier": zod.number().describe('Courier company providing this shipping method')
}).describe('Serializer for ShippingMethod model.')

/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const checkoutShippingMethodsRetrieveParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this Shipping Method.')
})

export const checkoutShippingMethodsRetrieveResponseNameMax = 100;
export const checkoutShippingMethodsRetrieveResponsePriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');


export const checkoutShippingMethodsRetrieveResponse = zod.object({
  "id": zod.number(),
  "name": zod.string().max(checkoutShippingMethodsRetrieveResponseNameMax).describe('Name of the shipping method (e.g., \'Standard\', \'Express\')'),
  "price": zod.regex(checkoutShippingMethodsRetrieveResponsePriceRegExp).describe('Shipping cost'),
  "courier": zod.number().describe('Courier company providing this shipping method')
}).describe('Serializer for ShippingMethod model.')

/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const checkoutShippingMethodsUpdateParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this Shipping Method.')
})

export const checkoutShippingMethodsUpdateBodyNameMax = 100;
export const checkoutShippingMethodsUpdateBodyPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');


export const checkoutShippingMethodsUpdateBody = zod.object({
  "name": zod.string().max(checkoutShippingMethodsUpdateBodyNameMax).describe('Name of the shipping method (e.g., \'Standard\', \'Express\')'),
  "price": zod.regex(checkoutShippingMethodsUpdateBodyPriceRegExp).describe('Shipping cost'),
  "courier": zod.number().describe('Courier company providing this shipping method')
}).describe('Serializer for ShippingMethod model.')

export const checkoutShippingMethodsUpdateResponseNameMax = 100;
export const checkoutShippingMethodsUpdateResponsePriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');


export const checkoutShippingMethodsUpdateResponse = zod.object({
  "id": zod.number(),
  "name": zod.string().max(checkoutShippingMethodsUpdateResponseNameMax).describe('Name of the shipping method (e.g., \'Standard\', \'Express\')'),
  "price": zod.regex(checkoutShippingMethodsUpdateResponsePriceRegExp).describe('Shipping cost'),
  "courier": zod.number().describe('Courier company providing this shipping method')
}).describe('Serializer for ShippingMethod model.')

/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const checkoutShippingMethodsPartialUpdateParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this Shipping Method.')
})

export const checkoutShippingMethodsPartialUpdateBodyNameMax = 100;
export const checkoutShippingMethodsPartialUpdateBodyPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');


export const checkoutShippingMethodsPartialUpdateBody = zod.object({
  "name": zod.string().max(checkoutShippingMethodsPartialUpdateBodyNameMax).optional().describe('Name of the shipping method (e.g., \'Standard\', \'Express\')'),
  "price": zod.regex(checkoutShippingMethodsPartialUpdateBodyPriceRegExp).optional().describe('Shipping cost'),
  "courier": zod.number().optional().describe('Courier company providing this shipping method')
}).describe('Serializer for ShippingMethod model.')

export const checkoutShippingMethodsPartialUpdateResponseNameMax = 100;
export const checkoutShippingMethodsPartialUpdateResponsePriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');


export const checkoutShippingMethodsPartialUpdateResponse = zod.object({
  "id": zod.number(),
  "name": zod.string().max(checkoutShippingMethodsPartialUpdateResponseNameMax).describe('Name of the shipping method (e.g., \'Standard\', \'Express\')'),
  "price": zod.regex(checkoutShippingMethodsPartialUpdateResponsePriceRegExp).describe('Shipping cost'),
  "courier": zod.number().describe('Courier company providing this shipping method')
}).describe('Serializer for ShippingMethod model.')

/**
 * Handle deletion with foreign key constraint protection.
 */
export const checkoutShippingMethodsDestroyParams = zod.object({
  "id": zod.coerce.number().describe('A unique integer value identifying this Shipping Method.')
})

