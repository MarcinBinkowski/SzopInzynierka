/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * ShopDjango API
 * API for ShopDjango project
 * OpenAPI spec version: 1.0.0
 */
import {
  z as zod
} from 'zod';


/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const profileAddressesListParams = zod.object({
  "id": zod.coerce.number()
})

export const profileAddressesListQueryParams = zod.object({
  "id": zod.coerce.number().optional(),
  "ordering": zod.coerce.string().optional().describe('Which field to use when ordering the results.'),
  "search": zod.coerce.string().optional().describe('A search term.')
})

export const profileAddressesListResponseProfileFirstNameMax = 150;
export const profileAddressesListResponseProfileLastNameMax = 150;
export const profileAddressesListResponseLabelMax = 50;


export const profileAddressesListResponseItem = zod.object({
  "id": zod.number(),
  "profile": zod.object({
  "id": zod.number(),
  "user_email": zod.string(),
  "display_name": zod.string(),
  "first_name": zod.string().max(profileAddressesListResponseProfileFirstNameMax).optional().describe('User\'s first name'),
  "last_name": zod.string().max(profileAddressesListResponseProfileLastNameMax).optional().describe('User\'s last name')
}).describe('Minimal profile serializer for address responses.'),
  "full_address": zod.string(),
  "label": zod.string().max(profileAddressesListResponseLabelMax).optional().describe('Optional label like \'Home\', \'Office\', etc.'),
  "is_default": zod.boolean().optional().describe('Whether this is the default address'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created')
})
export const profileAddressesListResponse = zod.array(profileAddressesListResponseItem)

/**
 * Create a new address. Profile field is optional - if not provided, uses current user's profile.
 */
export const profileAddressesCreateParams = zod.object({
  "id": zod.coerce.number()
})

export const profileAddressesCreateBodyAddressMax = 255;
export const profileAddressesCreateBodyCityMax = 100;
export const profileAddressesCreateBodyPostalCodeMax = 20;
export const profileAddressesCreateBodyLabelMax = 50;


export const profileAddressesCreateBody = zod.object({
  "profile": zod.number().optional().describe('Profile ID to assign this address to. If not provided, uses current user\'s profile.'),
  "address": zod.string().max(profileAddressesCreateBodyAddressMax).describe('Street address, apartment, unit, etc.'),
  "city": zod.string().max(profileAddressesCreateBodyCityMax).describe('City name'),
  "postal_code": zod.string().max(profileAddressesCreateBodyPostalCodeMax).describe('ZIP code or postal code'),
  "country": zod.number().describe('Country for this address'),
  "is_default": zod.boolean().optional().describe('Whether this is the default address'),
  "label": zod.string().max(profileAddressesCreateBodyLabelMax).optional().describe('Optional label like \'Home\', \'Office\', etc.')
})

/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const profileAddressesRetrieveParams = zod.object({
  "id": zod.coerce.number()
})

export const profileAddressesRetrieveResponseProfileFirstNameMax = 150;
export const profileAddressesRetrieveResponseProfileLastNameMax = 150;
export const profileAddressesRetrieveResponseAddressMax = 255;
export const profileAddressesRetrieveResponseCityMax = 100;
export const profileAddressesRetrieveResponsePostalCodeMax = 20;
export const profileAddressesRetrieveResponseLabelMax = 50;


export const profileAddressesRetrieveResponse = zod.object({
  "id": zod.number(),
  "profile": zod.object({
  "id": zod.number(),
  "user_email": zod.string(),
  "display_name": zod.string(),
  "first_name": zod.string().max(profileAddressesRetrieveResponseProfileFirstNameMax).optional().describe('User\'s first name'),
  "last_name": zod.string().max(profileAddressesRetrieveResponseProfileLastNameMax).optional().describe('User\'s last name')
}).describe('Minimal profile serializer for address responses.'),
  "address": zod.string().max(profileAddressesRetrieveResponseAddressMax).describe('Street address, apartment, unit, etc.'),
  "city": zod.string().max(profileAddressesRetrieveResponseCityMax).describe('City name'),
  "postal_code": zod.string().max(profileAddressesRetrieveResponsePostalCodeMax).describe('ZIP code or postal code'),
  "country": zod.number().describe('Country for this address'),
  "is_default": zod.boolean().optional().describe('Whether this is the default address'),
  "label": zod.string().max(profileAddressesRetrieveResponseLabelMax).optional().describe('Optional label like \'Home\', \'Office\', etc.'),
  "full_address": zod.string(),
  "address_dict": zod.record(zod.string(), zod.any()),
  "is_complete": zod.boolean(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
})

/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const profileAddressesUpdateParams = zod.object({
  "id": zod.coerce.number()
})

export const profileAddressesUpdateBodyAddressMax = 255;
export const profileAddressesUpdateBodyCityMax = 100;
export const profileAddressesUpdateBodyPostalCodeMax = 20;
export const profileAddressesUpdateBodyLabelMax = 50;


export const profileAddressesUpdateBody = zod.object({
  "address": zod.string().max(profileAddressesUpdateBodyAddressMax).describe('Street address, apartment, unit, etc.'),
  "city": zod.string().max(profileAddressesUpdateBodyCityMax).describe('City name'),
  "postal_code": zod.string().max(profileAddressesUpdateBodyPostalCodeMax).describe('ZIP code or postal code'),
  "country": zod.number().describe('Country for this address'),
  "is_default": zod.boolean().optional().describe('Whether this is the default address'),
  "label": zod.string().max(profileAddressesUpdateBodyLabelMax).optional().describe('Optional label like \'Home\', \'Office\', etc.')
})

export const profileAddressesUpdateResponseAddressMax = 255;
export const profileAddressesUpdateResponseCityMax = 100;
export const profileAddressesUpdateResponsePostalCodeMax = 20;
export const profileAddressesUpdateResponseLabelMax = 50;


export const profileAddressesUpdateResponse = zod.object({
  "address": zod.string().max(profileAddressesUpdateResponseAddressMax).describe('Street address, apartment, unit, etc.'),
  "city": zod.string().max(profileAddressesUpdateResponseCityMax).describe('City name'),
  "postal_code": zod.string().max(profileAddressesUpdateResponsePostalCodeMax).describe('ZIP code or postal code'),
  "country": zod.number().describe('Country for this address'),
  "is_default": zod.boolean().optional().describe('Whether this is the default address'),
  "label": zod.string().max(profileAddressesUpdateResponseLabelMax).optional().describe('Optional label like \'Home\', \'Office\', etc.')
})

/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const profileAddressesPartialUpdateParams = zod.object({
  "id": zod.coerce.number()
})

export const profileAddressesPartialUpdateBodyAddressMax = 255;
export const profileAddressesPartialUpdateBodyCityMax = 100;
export const profileAddressesPartialUpdateBodyPostalCodeMax = 20;
export const profileAddressesPartialUpdateBodyLabelMax = 50;


export const profileAddressesPartialUpdateBody = zod.object({
  "address": zod.string().max(profileAddressesPartialUpdateBodyAddressMax).optional().describe('Street address, apartment, unit, etc.'),
  "city": zod.string().max(profileAddressesPartialUpdateBodyCityMax).optional().describe('City name'),
  "postal_code": zod.string().max(profileAddressesPartialUpdateBodyPostalCodeMax).optional().describe('ZIP code or postal code'),
  "country": zod.number().optional().describe('Country for this address'),
  "is_default": zod.boolean().optional().describe('Whether this is the default address'),
  "label": zod.string().max(profileAddressesPartialUpdateBodyLabelMax).optional().describe('Optional label like \'Home\', \'Office\', etc.')
})

export const profileAddressesPartialUpdateResponseAddressMax = 255;
export const profileAddressesPartialUpdateResponseCityMax = 100;
export const profileAddressesPartialUpdateResponsePostalCodeMax = 20;
export const profileAddressesPartialUpdateResponseLabelMax = 50;


export const profileAddressesPartialUpdateResponse = zod.object({
  "address": zod.string().max(profileAddressesPartialUpdateResponseAddressMax).describe('Street address, apartment, unit, etc.'),
  "city": zod.string().max(profileAddressesPartialUpdateResponseCityMax).describe('City name'),
  "postal_code": zod.string().max(profileAddressesPartialUpdateResponsePostalCodeMax).describe('ZIP code or postal code'),
  "country": zod.number().describe('Country for this address'),
  "is_default": zod.boolean().optional().describe('Whether this is the default address'),
  "label": zod.string().max(profileAddressesPartialUpdateResponseLabelMax).optional().describe('Optional label like \'Home\', \'Office\', etc.')
})

/**
 * Handle deletion with foreign key constraint protection.
 */
export const profileAddressesDestroyParams = zod.object({
  "id": zod.coerce.number()
})

/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const profileProfilesListParams = zod.object({
  "id": zod.coerce.number()
})

export const profileProfilesListQueryParams = zod.object({
  "ordering": zod.coerce.string().optional().describe('Which field to use when ordering the results.'),
  "page": zod.coerce.number().optional().describe('A page number within the paginated result set.'),
  "page_size": zod.coerce.number().optional().describe('Number of results to return per page.'),
  "search": zod.coerce.string().optional().describe('A search term.')
})

export const profileProfilesListResponseResultsItemFirstNameMax = 150;
export const profileProfilesListResponseResultsItemLastNameMax = 150;


export const profileProfilesListResponse = zod.object({
  "count": zod.number(),
  "next": zod.url().nullish(),
  "previous": zod.url().nullish(),
  "results": zod.array(zod.object({
  "id": zod.number(),
  "first_name": zod.string().max(profileProfilesListResponseResultsItemFirstNameMax).optional().describe('User\'s first name'),
  "last_name": zod.string().max(profileProfilesListResponseResultsItemLastNameMax).optional().describe('User\'s last name'),
  "display_name": zod.string(),
  "user_email": zod.string(),
  "profile_completed": zod.boolean().optional().describe('Whether profile has all required information for checkout'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}))
})

/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const profileProfilesCreateParams = zod.object({
  "id": zod.coerce.number()
})

export const profileProfilesCreateBodyFirstNameMax = 150;
export const profileProfilesCreateBodyLastNameMax = 150;
export const profileProfilesCreateBodyPhoneNumberRegExp = new RegExp('^\\+?[\\d\\s\\-\\(\\)]+$');


export const profileProfilesCreateBody = zod.object({
  "user": zod.number().describe('Associated user account'),
  "first_name": zod.string().max(profileProfilesCreateBodyFirstNameMax).optional().describe('User\'s first name'),
  "last_name": zod.string().max(profileProfilesCreateBodyLastNameMax).optional().describe('User\'s last name'),
  "date_of_birth": zod.iso.date().nullish().describe('User\'s date of birth'),
  "phone_number": zod.string().regex(profileProfilesCreateBodyPhoneNumberRegExp).optional().describe('Phone number in international format. Supports digits, spaces, hyphens, parentheses, and optional \'+\' prefix. Example: +48131012012')
})

/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const profileProfilesRetrieveParams = zod.object({
  "id": zod.coerce.number()
})

export const profileProfilesRetrieveResponseFirstNameMax = 150;
export const profileProfilesRetrieveResponseLastNameMax = 150;
export const profileProfilesRetrieveResponsePhoneNumberRegExp = new RegExp('^\\+?[\\d\\s\\-\\(\\)]+$');


export const profileProfilesRetrieveResponse = zod.object({
  "id": zod.number(),
  "first_name": zod.string().max(profileProfilesRetrieveResponseFirstNameMax).optional().describe('User\'s first name'),
  "last_name": zod.string().max(profileProfilesRetrieveResponseLastNameMax).optional().describe('User\'s last name'),
  "date_of_birth": zod.iso.date().nullish().describe('User\'s date of birth'),
  "phone_number": zod.string().regex(profileProfilesRetrieveResponsePhoneNumberRegExp).optional().describe('Phone number in international format. Supports digits, spaces, hyphens, parentheses, and optional \'+\' prefix. Example: +48131012012'),
  "role": zod.literal(1).or(zod.literal(2)).or(zod.literal(3)).describe('* `1` - Admin\n* `2` - Employee\n* `3` - User').optional(),
  "profile_completed": zod.boolean().describe('Whether profile has all required information for checkout'),
  "display_name": zod.string(),
  "full_name": zod.string(),
  "age": zod.number(),
  "is_checkout_ready": zod.boolean(),
  "missing_checkout_fields": zod.array(zod.any()),
  "shipping_address": zod.record(zod.string(), zod.any()),
  "billing_address": zod.record(zod.string(), zod.any()),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
})

/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const profileProfilesUpdateParams = zod.object({
  "id": zod.coerce.number()
})

export const profileProfilesUpdateBodyFirstNameMax = 150;
export const profileProfilesUpdateBodyLastNameMax = 150;
export const profileProfilesUpdateBodyPhoneNumberRegExp = new RegExp('^\\+?[\\d\\s\\-\\(\\)]+$');


export const profileProfilesUpdateBody = zod.object({
  "first_name": zod.string().max(profileProfilesUpdateBodyFirstNameMax).optional().describe('User\'s first name'),
  "last_name": zod.string().max(profileProfilesUpdateBodyLastNameMax).optional().describe('User\'s last name'),
  "date_of_birth": zod.iso.date().nullish().describe('User\'s date of birth'),
  "phone_number": zod.string().regex(profileProfilesUpdateBodyPhoneNumberRegExp).optional().describe('Phone number in international format. Supports digits, spaces, hyphens, parentheses, and optional \'+\' prefix. Example: +48131012012'),
  "role": zod.literal(1).or(zod.literal(2)).or(zod.literal(3)).describe('* `1` - Admin\n* `2` - Employee\n* `3` - User').optional()
})

export const profileProfilesUpdateResponseFirstNameMax = 150;
export const profileProfilesUpdateResponseLastNameMax = 150;
export const profileProfilesUpdateResponsePhoneNumberRegExp = new RegExp('^\\+?[\\d\\s\\-\\(\\)]+$');


export const profileProfilesUpdateResponse = zod.object({
  "first_name": zod.string().max(profileProfilesUpdateResponseFirstNameMax).optional().describe('User\'s first name'),
  "last_name": zod.string().max(profileProfilesUpdateResponseLastNameMax).optional().describe('User\'s last name'),
  "date_of_birth": zod.iso.date().nullish().describe('User\'s date of birth'),
  "phone_number": zod.string().regex(profileProfilesUpdateResponsePhoneNumberRegExp).optional().describe('Phone number in international format. Supports digits, spaces, hyphens, parentheses, and optional \'+\' prefix. Example: +48131012012'),
  "role": zod.literal(1).or(zod.literal(2)).or(zod.literal(3)).describe('* `1` - Admin\n* `2` - Employee\n* `3` - User').optional()
})

/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const profileProfilesPartialUpdateParams = zod.object({
  "id": zod.coerce.number()
})

export const profileProfilesPartialUpdateBodyFirstNameMax = 150;
export const profileProfilesPartialUpdateBodyLastNameMax = 150;
export const profileProfilesPartialUpdateBodyPhoneNumberRegExp = new RegExp('^\\+?[\\d\\s\\-\\(\\)]+$');


export const profileProfilesPartialUpdateBody = zod.object({
  "first_name": zod.string().max(profileProfilesPartialUpdateBodyFirstNameMax).optional().describe('User\'s first name'),
  "last_name": zod.string().max(profileProfilesPartialUpdateBodyLastNameMax).optional().describe('User\'s last name'),
  "date_of_birth": zod.iso.date().nullish().describe('User\'s date of birth'),
  "phone_number": zod.string().regex(profileProfilesPartialUpdateBodyPhoneNumberRegExp).optional().describe('Phone number in international format. Supports digits, spaces, hyphens, parentheses, and optional \'+\' prefix. Example: +48131012012'),
  "role": zod.literal(1).or(zod.literal(2)).or(zod.literal(3)).describe('* `1` - Admin\n* `2` - Employee\n* `3` - User').optional()
})

export const profileProfilesPartialUpdateResponseFirstNameMax = 150;
export const profileProfilesPartialUpdateResponseLastNameMax = 150;
export const profileProfilesPartialUpdateResponsePhoneNumberRegExp = new RegExp('^\\+?[\\d\\s\\-\\(\\)]+$');


export const profileProfilesPartialUpdateResponse = zod.object({
  "first_name": zod.string().max(profileProfilesPartialUpdateResponseFirstNameMax).optional().describe('User\'s first name'),
  "last_name": zod.string().max(profileProfilesPartialUpdateResponseLastNameMax).optional().describe('User\'s last name'),
  "date_of_birth": zod.iso.date().nullish().describe('User\'s date of birth'),
  "phone_number": zod.string().regex(profileProfilesPartialUpdateResponsePhoneNumberRegExp).optional().describe('Phone number in international format. Supports digits, spaces, hyphens, parentheses, and optional \'+\' prefix. Example: +48131012012'),
  "role": zod.literal(1).or(zod.literal(2)).or(zod.literal(3)).describe('* `1` - Admin\n* `2` - Employee\n* `3` - User').optional()
})

/**
 * Handle deletion with foreign key constraint protection.
 */
export const profileProfilesDestroyParams = zod.object({
  "id": zod.coerce.number()
})

/**
 * Get checkout readiness status for the current user's profile.
 */
export const profileProfilesCheckoutStatusRetrieveParams = zod.object({
  "id": zod.coerce.number()
})

export const profileProfilesCheckoutStatusRetrieveResponseFirstNameMax = 150;
export const profileProfilesCheckoutStatusRetrieveResponseLastNameMax = 150;
export const profileProfilesCheckoutStatusRetrieveResponsePhoneNumberRegExp = new RegExp('^\\+?[\\d\\s\\-\\(\\)]+$');


export const profileProfilesCheckoutStatusRetrieveResponse = zod.object({
  "id": zod.number(),
  "first_name": zod.string().max(profileProfilesCheckoutStatusRetrieveResponseFirstNameMax).optional().describe('User\'s first name'),
  "last_name": zod.string().max(profileProfilesCheckoutStatusRetrieveResponseLastNameMax).optional().describe('User\'s last name'),
  "date_of_birth": zod.iso.date().nullish().describe('User\'s date of birth'),
  "phone_number": zod.string().regex(profileProfilesCheckoutStatusRetrieveResponsePhoneNumberRegExp).optional().describe('Phone number in international format. Supports digits, spaces, hyphens, parentheses, and optional \'+\' prefix. Example: +48131012012'),
  "role": zod.literal(1).or(zod.literal(2)).or(zod.literal(3)).describe('* `1` - Admin\n* `2` - Employee\n* `3` - User').optional(),
  "profile_completed": zod.boolean().describe('Whether profile has all required information for checkout'),
  "display_name": zod.string(),
  "full_name": zod.string(),
  "age": zod.number(),
  "is_checkout_ready": zod.boolean(),
  "missing_checkout_fields": zod.array(zod.any()),
  "shipping_address": zod.record(zod.string(), zod.any()),
  "billing_address": zod.record(zod.string(), zod.any()),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
})

/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const profileProfilesMeRetrieveParams = zod.object({
  "id": zod.coerce.number()
})

export const profileProfilesMeRetrieveResponseFirstNameMax = 150;
export const profileProfilesMeRetrieveResponseLastNameMax = 150;
export const profileProfilesMeRetrieveResponsePhoneNumberRegExp = new RegExp('^\\+?[\\d\\s\\-\\(\\)]+$');


export const profileProfilesMeRetrieveResponse = zod.object({
  "id": zod.number(),
  "first_name": zod.string().max(profileProfilesMeRetrieveResponseFirstNameMax).optional().describe('User\'s first name'),
  "last_name": zod.string().max(profileProfilesMeRetrieveResponseLastNameMax).optional().describe('User\'s last name'),
  "date_of_birth": zod.iso.date().nullish().describe('User\'s date of birth'),
  "phone_number": zod.string().regex(profileProfilesMeRetrieveResponsePhoneNumberRegExp).optional().describe('Phone number in international format. Supports digits, spaces, hyphens, parentheses, and optional \'+\' prefix. Example: +48131012012'),
  "role": zod.literal(1).or(zod.literal(2)).or(zod.literal(3)).describe('* `1` - Admin\n* `2` - Employee\n* `3` - User').optional(),
  "profile_completed": zod.boolean().describe('Whether profile has all required information for checkout'),
  "display_name": zod.string(),
  "full_name": zod.string(),
  "age": zod.number(),
  "is_checkout_ready": zod.boolean(),
  "missing_checkout_fields": zod.array(zod.any()),
  "shipping_address": zod.record(zod.string(), zod.any()),
  "billing_address": zod.record(zod.string(), zod.any()),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
})

/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const profileProfilesMePartialUpdateParams = zod.object({
  "id": zod.coerce.number()
})

export const profileProfilesMePartialUpdateBodyFirstNameMax = 150;
export const profileProfilesMePartialUpdateBodyLastNameMax = 150;
export const profileProfilesMePartialUpdateBodyPhoneNumberRegExp = new RegExp('^\\+?[\\d\\s\\-\\(\\)]+$');


export const profileProfilesMePartialUpdateBody = zod.object({
  "first_name": zod.string().max(profileProfilesMePartialUpdateBodyFirstNameMax).optional().describe('User\'s first name'),
  "last_name": zod.string().max(profileProfilesMePartialUpdateBodyLastNameMax).optional().describe('User\'s last name'),
  "date_of_birth": zod.iso.date().nullish().describe('User\'s date of birth'),
  "phone_number": zod.string().regex(profileProfilesMePartialUpdateBodyPhoneNumberRegExp).optional().describe('Phone number in international format. Supports digits, spaces, hyphens, parentheses, and optional \'+\' prefix. Example: +48131012012'),
  "role": zod.literal(1).or(zod.literal(2)).or(zod.literal(3)).describe('* `1` - Admin\n* `2` - Employee\n* `3` - User').optional()
})

export const profileProfilesMePartialUpdateResponseFirstNameMax = 150;
export const profileProfilesMePartialUpdateResponseLastNameMax = 150;
export const profileProfilesMePartialUpdateResponsePhoneNumberRegExp = new RegExp('^\\+?[\\d\\s\\-\\(\\)]+$');


export const profileProfilesMePartialUpdateResponse = zod.object({
  "id": zod.number(),
  "first_name": zod.string().max(profileProfilesMePartialUpdateResponseFirstNameMax).optional().describe('User\'s first name'),
  "last_name": zod.string().max(profileProfilesMePartialUpdateResponseLastNameMax).optional().describe('User\'s last name'),
  "date_of_birth": zod.iso.date().nullish().describe('User\'s date of birth'),
  "phone_number": zod.string().regex(profileProfilesMePartialUpdateResponsePhoneNumberRegExp).optional().describe('Phone number in international format. Supports digits, spaces, hyphens, parentheses, and optional \'+\' prefix. Example: +48131012012'),
  "role": zod.literal(1).or(zod.literal(2)).or(zod.literal(3)).describe('* `1` - Admin\n* `2` - Employee\n* `3` - User').optional(),
  "profile_completed": zod.boolean().describe('Whether profile has all required information for checkout'),
  "display_name": zod.string(),
  "full_name": zod.string(),
  "age": zod.number(),
  "is_checkout_ready": zod.boolean(),
  "missing_checkout_fields": zod.array(zod.any()),
  "shipping_address": zod.record(zod.string(), zod.any()),
  "billing_address": zod.record(zod.string(), zod.any()),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
})

