/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * ShopDjango API
 * API for ShopDjango project
 * OpenAPI spec version: 1.0.0
 */
import {
  z as zod
} from 'zod';


/**
 * List all wishlist items for the current user
 */
export const catalogWishlistListQueryParams = zod.object({
  "ordering": zod.coerce.string().optional().describe('Which field to use when ordering the results.'),
  "search": zod.coerce.string().optional().describe('A search term.')
})

export const catalogWishlistListResponseProductNameMax = 200;
export const catalogWishlistListResponseProductSlugMax = 200;

export const catalogWishlistListResponseProductSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const catalogWishlistListResponseProductShortDescriptionMax = 500;
export const catalogWishlistListResponseProductPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const catalogWishlistListResponseProductOriginalPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const catalogWishlistListResponseProductSkuMax = 100;
export const catalogWishlistListResponseProductStockQuantityMin = 0;

export const catalogWishlistListResponseProductStockQuantityMax = 2147483647;
export const catalogWishlistListResponseProductCategoryNameMax = 100;
export const catalogWishlistListResponseProductCategorySlugMax = 100;

export const catalogWishlistListResponseProductCategorySlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const catalogWishlistListResponseProductManufacturerNameMax = 100;
export const catalogWishlistListResponseProductManufacturerSlugMax = 100;

export const catalogWishlistListResponseProductManufacturerSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const catalogWishlistListResponseProductManufacturerWebsiteMax = 200;


export const catalogWishlistListResponseItem = zod.object({
  "id": zod.number(),
  "product": zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogWishlistListResponseProductNameMax).describe('Product name'),
  "slug": zod.string().max(catalogWishlistListResponseProductSlugMax).regex(catalogWishlistListResponseProductSlugRegExp).describe('URL-friendly version of the name'),
  "short_description": zod.string().max(catalogWishlistListResponseProductShortDescriptionMax).optional().describe('Short description for listings'),
  "price": zod.regex(catalogWishlistListResponseProductPriceRegExp).describe('Product price'),
  "original_price": zod.regex(catalogWishlistListResponseProductOriginalPriceRegExp).describe('Original price for showing discounts'),
  "current_price": zod.string().describe('Get current price as formatted decimal string.'),
  "discount_percentage": zod.number().describe('Calculate discount percentage.'),
  "sku": zod.string().max(catalogWishlistListResponseProductSkuMax).describe('Unique product identifier'),
  "stock_quantity": zod.number().min(catalogWishlistListResponseProductStockQuantityMin).max(catalogWishlistListResponseProductStockQuantityMax).optional().describe('Available quantity in stock'),
  "is_visible": zod.boolean().optional().describe('Is product visible to the users'),
  "is_on_sale": zod.boolean(),
  "is_in_stock": zod.boolean().describe('Check if product is in stock.'),
  "is_available": zod.boolean().describe('Check if product is available for purchase.'),
  "category": zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogWishlistListResponseProductCategoryNameMax).describe('Category name'),
  "slug": zod.string().max(catalogWishlistListResponseProductCategorySlugMax).regex(catalogWishlistListResponseProductCategorySlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Category description'),
  "is_active": zod.boolean().optional().describe('Whether this category is visible'),
  "active_product_count": zod.number(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Category model.'),
  "manufacturer": zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogWishlistListResponseProductManufacturerNameMax).describe('Manufacturer name'),
  "slug": zod.string().max(catalogWishlistListResponseProductManufacturerSlugMax).regex(catalogWishlistListResponseProductManufacturerSlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Manufacturer description'),
  "website": zod.string().max(catalogWishlistListResponseProductManufacturerWebsiteMax).optional().describe('Manufacturer website URL'),
  "is_active": zod.boolean().optional().describe('Whether this manufacturer is visible'),
  "active_product_count": zod.number(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Manufacturer model.'),
  "primary_image": zod.string().nullable().describe('Get URL of primary product image.'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created')
}).describe('Simplified serializer for product listings.'),
  "product_id": zod.number(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created')
}).describe('Serializer for WishlistItem model.')
export const catalogWishlistListResponse = zod.array(catalogWishlistListResponseItem)

/**
 * Create a new wishlist item
 */
export const catalogWishlistCreateBody = zod.object({
  "product_id": zod.number()
}).describe('Serializer for creating wishlist items.')

/**
 * Retrieve a specific wishlist item
 */
export const catalogWishlistRetrieveParams = zod.object({
  "id": zod.coerce.string()
})

export const catalogWishlistRetrieveResponseProductNameMax = 200;
export const catalogWishlistRetrieveResponseProductSlugMax = 200;

export const catalogWishlistRetrieveResponseProductSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const catalogWishlistRetrieveResponseProductShortDescriptionMax = 500;
export const catalogWishlistRetrieveResponseProductPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const catalogWishlistRetrieveResponseProductOriginalPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const catalogWishlistRetrieveResponseProductSkuMax = 100;
export const catalogWishlistRetrieveResponseProductStockQuantityMin = 0;

export const catalogWishlistRetrieveResponseProductStockQuantityMax = 2147483647;
export const catalogWishlistRetrieveResponseProductCategoryNameMax = 100;
export const catalogWishlistRetrieveResponseProductCategorySlugMax = 100;

export const catalogWishlistRetrieveResponseProductCategorySlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const catalogWishlistRetrieveResponseProductManufacturerNameMax = 100;
export const catalogWishlistRetrieveResponseProductManufacturerSlugMax = 100;

export const catalogWishlistRetrieveResponseProductManufacturerSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const catalogWishlistRetrieveResponseProductManufacturerWebsiteMax = 200;


export const catalogWishlistRetrieveResponse = zod.object({
  "id": zod.number(),
  "product": zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogWishlistRetrieveResponseProductNameMax).describe('Product name'),
  "slug": zod.string().max(catalogWishlistRetrieveResponseProductSlugMax).regex(catalogWishlistRetrieveResponseProductSlugRegExp).describe('URL-friendly version of the name'),
  "short_description": zod.string().max(catalogWishlistRetrieveResponseProductShortDescriptionMax).optional().describe('Short description for listings'),
  "price": zod.regex(catalogWishlistRetrieveResponseProductPriceRegExp).describe('Product price'),
  "original_price": zod.regex(catalogWishlistRetrieveResponseProductOriginalPriceRegExp).describe('Original price for showing discounts'),
  "current_price": zod.string().describe('Get current price as formatted decimal string.'),
  "discount_percentage": zod.number().describe('Calculate discount percentage.'),
  "sku": zod.string().max(catalogWishlistRetrieveResponseProductSkuMax).describe('Unique product identifier'),
  "stock_quantity": zod.number().min(catalogWishlistRetrieveResponseProductStockQuantityMin).max(catalogWishlistRetrieveResponseProductStockQuantityMax).optional().describe('Available quantity in stock'),
  "is_visible": zod.boolean().optional().describe('Is product visible to the users'),
  "is_on_sale": zod.boolean(),
  "is_in_stock": zod.boolean().describe('Check if product is in stock.'),
  "is_available": zod.boolean().describe('Check if product is available for purchase.'),
  "category": zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogWishlistRetrieveResponseProductCategoryNameMax).describe('Category name'),
  "slug": zod.string().max(catalogWishlistRetrieveResponseProductCategorySlugMax).regex(catalogWishlistRetrieveResponseProductCategorySlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Category description'),
  "is_active": zod.boolean().optional().describe('Whether this category is visible'),
  "active_product_count": zod.number(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Category model.'),
  "manufacturer": zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogWishlistRetrieveResponseProductManufacturerNameMax).describe('Manufacturer name'),
  "slug": zod.string().max(catalogWishlistRetrieveResponseProductManufacturerSlugMax).regex(catalogWishlistRetrieveResponseProductManufacturerSlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Manufacturer description'),
  "website": zod.string().max(catalogWishlistRetrieveResponseProductManufacturerWebsiteMax).optional().describe('Manufacturer website URL'),
  "is_active": zod.boolean().optional().describe('Whether this manufacturer is visible'),
  "active_product_count": zod.number(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Manufacturer model.'),
  "primary_image": zod.string().nullable().describe('Get URL of primary product image.'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created')
}).describe('Simplified serializer for product listings.'),
  "product_id": zod.number(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created')
}).describe('Serializer for WishlistItem model.')

/**
 * Update a wishlist item
 */
export const catalogWishlistUpdateParams = zod.object({
  "id": zod.coerce.string()
})

export const catalogWishlistUpdateBody = zod.object({
  "product_id": zod.number()
}).describe('Serializer for WishlistItem model.')

export const catalogWishlistUpdateResponseProductNameMax = 200;
export const catalogWishlistUpdateResponseProductSlugMax = 200;

export const catalogWishlistUpdateResponseProductSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const catalogWishlistUpdateResponseProductShortDescriptionMax = 500;
export const catalogWishlistUpdateResponseProductPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const catalogWishlistUpdateResponseProductOriginalPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const catalogWishlistUpdateResponseProductSkuMax = 100;
export const catalogWishlistUpdateResponseProductStockQuantityMin = 0;

export const catalogWishlistUpdateResponseProductStockQuantityMax = 2147483647;
export const catalogWishlistUpdateResponseProductCategoryNameMax = 100;
export const catalogWishlistUpdateResponseProductCategorySlugMax = 100;

export const catalogWishlistUpdateResponseProductCategorySlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const catalogWishlistUpdateResponseProductManufacturerNameMax = 100;
export const catalogWishlistUpdateResponseProductManufacturerSlugMax = 100;

export const catalogWishlistUpdateResponseProductManufacturerSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const catalogWishlistUpdateResponseProductManufacturerWebsiteMax = 200;


export const catalogWishlistUpdateResponse = zod.object({
  "id": zod.number(),
  "product": zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogWishlistUpdateResponseProductNameMax).describe('Product name'),
  "slug": zod.string().max(catalogWishlistUpdateResponseProductSlugMax).regex(catalogWishlistUpdateResponseProductSlugRegExp).describe('URL-friendly version of the name'),
  "short_description": zod.string().max(catalogWishlistUpdateResponseProductShortDescriptionMax).optional().describe('Short description for listings'),
  "price": zod.regex(catalogWishlistUpdateResponseProductPriceRegExp).describe('Product price'),
  "original_price": zod.regex(catalogWishlistUpdateResponseProductOriginalPriceRegExp).describe('Original price for showing discounts'),
  "current_price": zod.string().describe('Get current price as formatted decimal string.'),
  "discount_percentage": zod.number().describe('Calculate discount percentage.'),
  "sku": zod.string().max(catalogWishlistUpdateResponseProductSkuMax).describe('Unique product identifier'),
  "stock_quantity": zod.number().min(catalogWishlistUpdateResponseProductStockQuantityMin).max(catalogWishlistUpdateResponseProductStockQuantityMax).optional().describe('Available quantity in stock'),
  "is_visible": zod.boolean().optional().describe('Is product visible to the users'),
  "is_on_sale": zod.boolean(),
  "is_in_stock": zod.boolean().describe('Check if product is in stock.'),
  "is_available": zod.boolean().describe('Check if product is available for purchase.'),
  "category": zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogWishlistUpdateResponseProductCategoryNameMax).describe('Category name'),
  "slug": zod.string().max(catalogWishlistUpdateResponseProductCategorySlugMax).regex(catalogWishlistUpdateResponseProductCategorySlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Category description'),
  "is_active": zod.boolean().optional().describe('Whether this category is visible'),
  "active_product_count": zod.number(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Category model.'),
  "manufacturer": zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogWishlistUpdateResponseProductManufacturerNameMax).describe('Manufacturer name'),
  "slug": zod.string().max(catalogWishlistUpdateResponseProductManufacturerSlugMax).regex(catalogWishlistUpdateResponseProductManufacturerSlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Manufacturer description'),
  "website": zod.string().max(catalogWishlistUpdateResponseProductManufacturerWebsiteMax).optional().describe('Manufacturer website URL'),
  "is_active": zod.boolean().optional().describe('Whether this manufacturer is visible'),
  "active_product_count": zod.number(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Manufacturer model.'),
  "primary_image": zod.string().nullable().describe('Get URL of primary product image.'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created')
}).describe('Simplified serializer for product listings.'),
  "product_id": zod.number(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created')
}).describe('Serializer for WishlistItem model.')

/**
 * Partially update a wishlist item
 */
export const catalogWishlistPartialUpdateParams = zod.object({
  "id": zod.coerce.string()
})

export const catalogWishlistPartialUpdateBody = zod.object({
  "product_id": zod.number().optional()
}).describe('Serializer for WishlistItem model.')

export const catalogWishlistPartialUpdateResponseProductNameMax = 200;
export const catalogWishlistPartialUpdateResponseProductSlugMax = 200;

export const catalogWishlistPartialUpdateResponseProductSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const catalogWishlistPartialUpdateResponseProductShortDescriptionMax = 500;
export const catalogWishlistPartialUpdateResponseProductPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const catalogWishlistPartialUpdateResponseProductOriginalPriceRegExp = new RegExp('^-?\\d{0,8}(?:\\.\\d{0,2})?$');
export const catalogWishlistPartialUpdateResponseProductSkuMax = 100;
export const catalogWishlistPartialUpdateResponseProductStockQuantityMin = 0;

export const catalogWishlistPartialUpdateResponseProductStockQuantityMax = 2147483647;
export const catalogWishlistPartialUpdateResponseProductCategoryNameMax = 100;
export const catalogWishlistPartialUpdateResponseProductCategorySlugMax = 100;

export const catalogWishlistPartialUpdateResponseProductCategorySlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const catalogWishlistPartialUpdateResponseProductManufacturerNameMax = 100;
export const catalogWishlistPartialUpdateResponseProductManufacturerSlugMax = 100;

export const catalogWishlistPartialUpdateResponseProductManufacturerSlugRegExp = new RegExp('^[-a-zA-Z0-9_]+$');
export const catalogWishlistPartialUpdateResponseProductManufacturerWebsiteMax = 200;


export const catalogWishlistPartialUpdateResponse = zod.object({
  "id": zod.number(),
  "product": zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogWishlistPartialUpdateResponseProductNameMax).describe('Product name'),
  "slug": zod.string().max(catalogWishlistPartialUpdateResponseProductSlugMax).regex(catalogWishlistPartialUpdateResponseProductSlugRegExp).describe('URL-friendly version of the name'),
  "short_description": zod.string().max(catalogWishlistPartialUpdateResponseProductShortDescriptionMax).optional().describe('Short description for listings'),
  "price": zod.regex(catalogWishlistPartialUpdateResponseProductPriceRegExp).describe('Product price'),
  "original_price": zod.regex(catalogWishlistPartialUpdateResponseProductOriginalPriceRegExp).describe('Original price for showing discounts'),
  "current_price": zod.string().describe('Get current price as formatted decimal string.'),
  "discount_percentage": zod.number().describe('Calculate discount percentage.'),
  "sku": zod.string().max(catalogWishlistPartialUpdateResponseProductSkuMax).describe('Unique product identifier'),
  "stock_quantity": zod.number().min(catalogWishlistPartialUpdateResponseProductStockQuantityMin).max(catalogWishlistPartialUpdateResponseProductStockQuantityMax).optional().describe('Available quantity in stock'),
  "is_visible": zod.boolean().optional().describe('Is product visible to the users'),
  "is_on_sale": zod.boolean(),
  "is_in_stock": zod.boolean().describe('Check if product is in stock.'),
  "is_available": zod.boolean().describe('Check if product is available for purchase.'),
  "category": zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogWishlistPartialUpdateResponseProductCategoryNameMax).describe('Category name'),
  "slug": zod.string().max(catalogWishlistPartialUpdateResponseProductCategorySlugMax).regex(catalogWishlistPartialUpdateResponseProductCategorySlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Category description'),
  "is_active": zod.boolean().optional().describe('Whether this category is visible'),
  "active_product_count": zod.number(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Category model.'),
  "manufacturer": zod.object({
  "id": zod.number(),
  "name": zod.string().max(catalogWishlistPartialUpdateResponseProductManufacturerNameMax).describe('Manufacturer name'),
  "slug": zod.string().max(catalogWishlistPartialUpdateResponseProductManufacturerSlugMax).regex(catalogWishlistPartialUpdateResponseProductManufacturerSlugRegExp).describe('URL-friendly version of the name'),
  "description": zod.string().optional().describe('Manufacturer description'),
  "website": zod.string().max(catalogWishlistPartialUpdateResponseProductManufacturerWebsiteMax).optional().describe('Manufacturer website URL'),
  "is_active": zod.boolean().optional().describe('Whether this manufacturer is visible'),
  "active_product_count": zod.number(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.iso.datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for Manufacturer model.'),
  "primary_image": zod.string().nullable().describe('Get URL of primary product image.'),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created')
}).describe('Simplified serializer for product listings.'),
  "product_id": zod.number(),
  "created_at": zod.iso.datetime({}).describe('Timestamp when the record was created')
}).describe('Serializer for WishlistItem model.')

/**
 * Delete a wishlist item
 */
export const catalogWishlistDestroyParams = zod.object({
  "id": zod.coerce.string()
})

/**
 * Check if a product is in wishlist
 */
export const catalogWishlistCheckRetrieveParams = zod.object({
  "product_id": zod.coerce.number()
})

export const catalogWishlistCheckRetrieveResponse = zod.object({
  "product_id": zod.number(),
  "is_in_wishlist": zod.boolean(),
  "wishlist_item_id": zod.number().nullish()
}).describe('Serializer for wishlist check response.')

