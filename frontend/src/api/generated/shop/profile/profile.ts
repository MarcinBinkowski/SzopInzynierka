/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * ShopDjango API
 * API for ShopDjango project
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  Address,
  AddressCreate,
  AddressList,
  AddressUpdate,
  PaginatedProfileListList,
  PatchedAddressUpdate,
  PatchedProfile,
  PatchedProfileUpdate,
  Profile,
  ProfileAddressesListParams,
  ProfileCreate,
  ProfileProfilesListParams,
  ProfileUpdate
} from '.././schemas';

import { shopInstance } from '../../../shop-mutator';
import type { ErrorType , BodyType } from '../../../shop-mutator';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;





/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const profileAddressesList = (
    params?: ProfileAddressesListParams,
 signal?: AbortSignal
) => {
      
      
      return shopInstance<AddressList[]>(
      {url: `/api/profile/addresses/`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getProfileAddressesListQueryKey = (params?: ProfileAddressesListParams,) => {
    return [`/api/profile/addresses/`, ...(params ? [params]: [])] as const;
    }

    
export const getProfileAddressesListQueryOptions = <TData = Awaited<ReturnType<typeof profileAddressesList>>, TError = ErrorType<unknown>>(params?: ProfileAddressesListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileAddressesList>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getProfileAddressesListQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof profileAddressesList>>> = ({ signal }) => profileAddressesList(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof profileAddressesList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ProfileAddressesListQueryResult = NonNullable<Awaited<ReturnType<typeof profileAddressesList>>>
export type ProfileAddressesListQueryError = ErrorType<unknown>


export function useProfileAddressesList<TData = Awaited<ReturnType<typeof profileAddressesList>>, TError = ErrorType<unknown>>(
 params: undefined |  ProfileAddressesListParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileAddressesList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof profileAddressesList>>,
          TError,
          Awaited<ReturnType<typeof profileAddressesList>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useProfileAddressesList<TData = Awaited<ReturnType<typeof profileAddressesList>>, TError = ErrorType<unknown>>(
 params?: ProfileAddressesListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileAddressesList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof profileAddressesList>>,
          TError,
          Awaited<ReturnType<typeof profileAddressesList>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useProfileAddressesList<TData = Awaited<ReturnType<typeof profileAddressesList>>, TError = ErrorType<unknown>>(
 params?: ProfileAddressesListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileAddressesList>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useProfileAddressesList<TData = Awaited<ReturnType<typeof profileAddressesList>>, TError = ErrorType<unknown>>(
 params?: ProfileAddressesListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileAddressesList>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getProfileAddressesListQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Create a new address. Profile field is optional - if not provided, uses current user's profile.
 */
export const profileAddressesCreate = (
    addressCreate: BodyType<AddressCreate>,
 signal?: AbortSignal
) => {
      
      
      return shopInstance<Address>(
      {url: `/api/profile/addresses/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: addressCreate, signal
    },
      );
    }
  


export const getProfileAddressesCreateMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof profileAddressesCreate>>, TError,{data: BodyType<AddressCreate>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof profileAddressesCreate>>, TError,{data: BodyType<AddressCreate>}, TContext> => {

const mutationKey = ['profileAddressesCreate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof profileAddressesCreate>>, {data: BodyType<AddressCreate>}> = (props) => {
          const {data} = props ?? {};

          return  profileAddressesCreate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ProfileAddressesCreateMutationResult = NonNullable<Awaited<ReturnType<typeof profileAddressesCreate>>>
    export type ProfileAddressesCreateMutationBody = BodyType<AddressCreate>
    export type ProfileAddressesCreateMutationError = ErrorType<unknown>

    export const useProfileAddressesCreate = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof profileAddressesCreate>>, TError,{data: BodyType<AddressCreate>}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof profileAddressesCreate>>,
        TError,
        {data: BodyType<AddressCreate>},
        TContext
      > => {

      const mutationOptions = getProfileAddressesCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const profileAddressesRetrieve = (
    id: number,
 signal?: AbortSignal
) => {
      
      
      return shopInstance<Address>(
      {url: `/api/profile/addresses/${id}/`, method: 'GET', signal
    },
      );
    }
  

export const getProfileAddressesRetrieveQueryKey = (id: number,) => {
    return [`/api/profile/addresses/${id}/`] as const;
    }

    
export const getProfileAddressesRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof profileAddressesRetrieve>>, TError = ErrorType<unknown>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileAddressesRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getProfileAddressesRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof profileAddressesRetrieve>>> = ({ signal }) => profileAddressesRetrieve(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof profileAddressesRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ProfileAddressesRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof profileAddressesRetrieve>>>
export type ProfileAddressesRetrieveQueryError = ErrorType<unknown>


export function useProfileAddressesRetrieve<TData = Awaited<ReturnType<typeof profileAddressesRetrieve>>, TError = ErrorType<unknown>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileAddressesRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof profileAddressesRetrieve>>,
          TError,
          Awaited<ReturnType<typeof profileAddressesRetrieve>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useProfileAddressesRetrieve<TData = Awaited<ReturnType<typeof profileAddressesRetrieve>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileAddressesRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof profileAddressesRetrieve>>,
          TError,
          Awaited<ReturnType<typeof profileAddressesRetrieve>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useProfileAddressesRetrieve<TData = Awaited<ReturnType<typeof profileAddressesRetrieve>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileAddressesRetrieve>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useProfileAddressesRetrieve<TData = Awaited<ReturnType<typeof profileAddressesRetrieve>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileAddressesRetrieve>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getProfileAddressesRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const profileAddressesUpdate = (
    id: number,
    addressUpdate: BodyType<AddressUpdate>,
 ) => {
      
      
      return shopInstance<AddressUpdate>(
      {url: `/api/profile/addresses/${id}/`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: addressUpdate
    },
      );
    }
  


export const getProfileAddressesUpdateMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof profileAddressesUpdate>>, TError,{id: number;data: BodyType<AddressUpdate>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof profileAddressesUpdate>>, TError,{id: number;data: BodyType<AddressUpdate>}, TContext> => {

const mutationKey = ['profileAddressesUpdate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof profileAddressesUpdate>>, {id: number;data: BodyType<AddressUpdate>}> = (props) => {
          const {id,data} = props ?? {};

          return  profileAddressesUpdate(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ProfileAddressesUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof profileAddressesUpdate>>>
    export type ProfileAddressesUpdateMutationBody = BodyType<AddressUpdate>
    export type ProfileAddressesUpdateMutationError = ErrorType<unknown>

    export const useProfileAddressesUpdate = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof profileAddressesUpdate>>, TError,{id: number;data: BodyType<AddressUpdate>}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof profileAddressesUpdate>>,
        TError,
        {id: number;data: BodyType<AddressUpdate>},
        TContext
      > => {

      const mutationOptions = getProfileAddressesUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const profileAddressesPartialUpdate = (
    id: number,
    patchedAddressUpdate: BodyType<PatchedAddressUpdate>,
 ) => {
      
      
      return shopInstance<AddressUpdate>(
      {url: `/api/profile/addresses/${id}/`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedAddressUpdate
    },
      );
    }
  


export const getProfileAddressesPartialUpdateMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof profileAddressesPartialUpdate>>, TError,{id: number;data: BodyType<PatchedAddressUpdate>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof profileAddressesPartialUpdate>>, TError,{id: number;data: BodyType<PatchedAddressUpdate>}, TContext> => {

const mutationKey = ['profileAddressesPartialUpdate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof profileAddressesPartialUpdate>>, {id: number;data: BodyType<PatchedAddressUpdate>}> = (props) => {
          const {id,data} = props ?? {};

          return  profileAddressesPartialUpdate(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ProfileAddressesPartialUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof profileAddressesPartialUpdate>>>
    export type ProfileAddressesPartialUpdateMutationBody = BodyType<PatchedAddressUpdate>
    export type ProfileAddressesPartialUpdateMutationError = ErrorType<unknown>

    export const useProfileAddressesPartialUpdate = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof profileAddressesPartialUpdate>>, TError,{id: number;data: BodyType<PatchedAddressUpdate>}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof profileAddressesPartialUpdate>>,
        TError,
        {id: number;data: BodyType<PatchedAddressUpdate>},
        TContext
      > => {

      const mutationOptions = getProfileAddressesPartialUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Handle deletion with foreign key constraint protection.
 */
export const profileAddressesDestroy = (
    id: number,
 ) => {
      
      
      return shopInstance<unknown>(
      {url: `/api/profile/addresses/${id}/`, method: 'DELETE'
    },
      );
    }
  


export const getProfileAddressesDestroyMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof profileAddressesDestroy>>, TError,{id: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof profileAddressesDestroy>>, TError,{id: number}, TContext> => {

const mutationKey = ['profileAddressesDestroy'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof profileAddressesDestroy>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  profileAddressesDestroy(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ProfileAddressesDestroyMutationResult = NonNullable<Awaited<ReturnType<typeof profileAddressesDestroy>>>
    
    export type ProfileAddressesDestroyMutationError = ErrorType<unknown>

    export const useProfileAddressesDestroy = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof profileAddressesDestroy>>, TError,{id: number}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof profileAddressesDestroy>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getProfileAddressesDestroyMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const profileProfilesList = (
    params?: ProfileProfilesListParams,
 signal?: AbortSignal
) => {
      
      
      return shopInstance<PaginatedProfileListList>(
      {url: `/api/profile/profiles/`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getProfileProfilesListQueryKey = (params?: ProfileProfilesListParams,) => {
    return [`/api/profile/profiles/`, ...(params ? [params]: [])] as const;
    }

    
export const getProfileProfilesListQueryOptions = <TData = Awaited<ReturnType<typeof profileProfilesList>>, TError = ErrorType<unknown>>(params?: ProfileProfilesListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileProfilesList>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getProfileProfilesListQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof profileProfilesList>>> = ({ signal }) => profileProfilesList(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof profileProfilesList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ProfileProfilesListQueryResult = NonNullable<Awaited<ReturnType<typeof profileProfilesList>>>
export type ProfileProfilesListQueryError = ErrorType<unknown>


export function useProfileProfilesList<TData = Awaited<ReturnType<typeof profileProfilesList>>, TError = ErrorType<unknown>>(
 params: undefined |  ProfileProfilesListParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileProfilesList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof profileProfilesList>>,
          TError,
          Awaited<ReturnType<typeof profileProfilesList>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useProfileProfilesList<TData = Awaited<ReturnType<typeof profileProfilesList>>, TError = ErrorType<unknown>>(
 params?: ProfileProfilesListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileProfilesList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof profileProfilesList>>,
          TError,
          Awaited<ReturnType<typeof profileProfilesList>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useProfileProfilesList<TData = Awaited<ReturnType<typeof profileProfilesList>>, TError = ErrorType<unknown>>(
 params?: ProfileProfilesListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileProfilesList>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useProfileProfilesList<TData = Awaited<ReturnType<typeof profileProfilesList>>, TError = ErrorType<unknown>>(
 params?: ProfileProfilesListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileProfilesList>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getProfileProfilesListQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const profileProfilesCreate = (
    profileCreate: BodyType<ProfileCreate>,
 signal?: AbortSignal
) => {
      
      
      return shopInstance<ProfileCreate>(
      {url: `/api/profile/profiles/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: profileCreate, signal
    },
      );
    }
  


export const getProfileProfilesCreateMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof profileProfilesCreate>>, TError,{data: BodyType<ProfileCreate>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof profileProfilesCreate>>, TError,{data: BodyType<ProfileCreate>}, TContext> => {

const mutationKey = ['profileProfilesCreate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof profileProfilesCreate>>, {data: BodyType<ProfileCreate>}> = (props) => {
          const {data} = props ?? {};

          return  profileProfilesCreate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ProfileProfilesCreateMutationResult = NonNullable<Awaited<ReturnType<typeof profileProfilesCreate>>>
    export type ProfileProfilesCreateMutationBody = BodyType<ProfileCreate>
    export type ProfileProfilesCreateMutationError = ErrorType<unknown>

    export const useProfileProfilesCreate = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof profileProfilesCreate>>, TError,{data: BodyType<ProfileCreate>}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof profileProfilesCreate>>,
        TError,
        {data: BodyType<ProfileCreate>},
        TContext
      > => {

      const mutationOptions = getProfileProfilesCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const profileProfilesRetrieve = (
    id: number,
 signal?: AbortSignal
) => {
      
      
      return shopInstance<Profile>(
      {url: `/api/profile/profiles/${id}/`, method: 'GET', signal
    },
      );
    }
  

export const getProfileProfilesRetrieveQueryKey = (id: number,) => {
    return [`/api/profile/profiles/${id}/`] as const;
    }

    
export const getProfileProfilesRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof profileProfilesRetrieve>>, TError = ErrorType<unknown>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileProfilesRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getProfileProfilesRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof profileProfilesRetrieve>>> = ({ signal }) => profileProfilesRetrieve(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof profileProfilesRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ProfileProfilesRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof profileProfilesRetrieve>>>
export type ProfileProfilesRetrieveQueryError = ErrorType<unknown>


export function useProfileProfilesRetrieve<TData = Awaited<ReturnType<typeof profileProfilesRetrieve>>, TError = ErrorType<unknown>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileProfilesRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof profileProfilesRetrieve>>,
          TError,
          Awaited<ReturnType<typeof profileProfilesRetrieve>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useProfileProfilesRetrieve<TData = Awaited<ReturnType<typeof profileProfilesRetrieve>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileProfilesRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof profileProfilesRetrieve>>,
          TError,
          Awaited<ReturnType<typeof profileProfilesRetrieve>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useProfileProfilesRetrieve<TData = Awaited<ReturnType<typeof profileProfilesRetrieve>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileProfilesRetrieve>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useProfileProfilesRetrieve<TData = Awaited<ReturnType<typeof profileProfilesRetrieve>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileProfilesRetrieve>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getProfileProfilesRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const profileProfilesUpdate = (
    id: number,
    profileUpdate: BodyType<ProfileUpdate>,
 ) => {
      
      
      return shopInstance<ProfileUpdate>(
      {url: `/api/profile/profiles/${id}/`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: profileUpdate
    },
      );
    }
  


export const getProfileProfilesUpdateMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof profileProfilesUpdate>>, TError,{id: number;data: BodyType<ProfileUpdate>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof profileProfilesUpdate>>, TError,{id: number;data: BodyType<ProfileUpdate>}, TContext> => {

const mutationKey = ['profileProfilesUpdate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof profileProfilesUpdate>>, {id: number;data: BodyType<ProfileUpdate>}> = (props) => {
          const {id,data} = props ?? {};

          return  profileProfilesUpdate(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ProfileProfilesUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof profileProfilesUpdate>>>
    export type ProfileProfilesUpdateMutationBody = BodyType<ProfileUpdate>
    export type ProfileProfilesUpdateMutationError = ErrorType<unknown>

    export const useProfileProfilesUpdate = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof profileProfilesUpdate>>, TError,{id: number;data: BodyType<ProfileUpdate>}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof profileProfilesUpdate>>,
        TError,
        {id: number;data: BodyType<ProfileUpdate>},
        TContext
      > => {

      const mutationOptions = getProfileProfilesUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const profileProfilesPartialUpdate = (
    id: number,
    patchedProfileUpdate: BodyType<PatchedProfileUpdate>,
 ) => {
      
      
      return shopInstance<ProfileUpdate>(
      {url: `/api/profile/profiles/${id}/`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedProfileUpdate
    },
      );
    }
  


export const getProfileProfilesPartialUpdateMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof profileProfilesPartialUpdate>>, TError,{id: number;data: BodyType<PatchedProfileUpdate>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof profileProfilesPartialUpdate>>, TError,{id: number;data: BodyType<PatchedProfileUpdate>}, TContext> => {

const mutationKey = ['profileProfilesPartialUpdate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof profileProfilesPartialUpdate>>, {id: number;data: BodyType<PatchedProfileUpdate>}> = (props) => {
          const {id,data} = props ?? {};

          return  profileProfilesPartialUpdate(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ProfileProfilesPartialUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof profileProfilesPartialUpdate>>>
    export type ProfileProfilesPartialUpdateMutationBody = BodyType<PatchedProfileUpdate>
    export type ProfileProfilesPartialUpdateMutationError = ErrorType<unknown>

    export const useProfileProfilesPartialUpdate = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof profileProfilesPartialUpdate>>, TError,{id: number;data: BodyType<PatchedProfileUpdate>}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof profileProfilesPartialUpdate>>,
        TError,
        {id: number;data: BodyType<PatchedProfileUpdate>},
        TContext
      > => {

      const mutationOptions = getProfileProfilesPartialUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Handle deletion with foreign key constraint protection.
 */
export const profileProfilesDestroy = (
    id: number,
 ) => {
      
      
      return shopInstance<void>(
      {url: `/api/profile/profiles/${id}/`, method: 'DELETE'
    },
      );
    }
  


export const getProfileProfilesDestroyMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof profileProfilesDestroy>>, TError,{id: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof profileProfilesDestroy>>, TError,{id: number}, TContext> => {

const mutationKey = ['profileProfilesDestroy'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof profileProfilesDestroy>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  profileProfilesDestroy(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ProfileProfilesDestroyMutationResult = NonNullable<Awaited<ReturnType<typeof profileProfilesDestroy>>>
    
    export type ProfileProfilesDestroyMutationError = ErrorType<unknown>

    export const useProfileProfilesDestroy = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof profileProfilesDestroy>>, TError,{id: number}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof profileProfilesDestroy>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getProfileProfilesDestroyMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Get checkout readiness status for the current user's profile.
 */
export const profileProfilesCheckoutStatusRetrieve = (
    
 signal?: AbortSignal
) => {
      
      
      return shopInstance<Profile>(
      {url: `/api/profile/profiles/checkout_status/`, method: 'GET', signal
    },
      );
    }
  

export const getProfileProfilesCheckoutStatusRetrieveQueryKey = () => {
    return [`/api/profile/profiles/checkout_status/`] as const;
    }

    
export const getProfileProfilesCheckoutStatusRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof profileProfilesCheckoutStatusRetrieve>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileProfilesCheckoutStatusRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getProfileProfilesCheckoutStatusRetrieveQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof profileProfilesCheckoutStatusRetrieve>>> = ({ signal }) => profileProfilesCheckoutStatusRetrieve(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof profileProfilesCheckoutStatusRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ProfileProfilesCheckoutStatusRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof profileProfilesCheckoutStatusRetrieve>>>
export type ProfileProfilesCheckoutStatusRetrieveQueryError = ErrorType<unknown>


export function useProfileProfilesCheckoutStatusRetrieve<TData = Awaited<ReturnType<typeof profileProfilesCheckoutStatusRetrieve>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileProfilesCheckoutStatusRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof profileProfilesCheckoutStatusRetrieve>>,
          TError,
          Awaited<ReturnType<typeof profileProfilesCheckoutStatusRetrieve>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useProfileProfilesCheckoutStatusRetrieve<TData = Awaited<ReturnType<typeof profileProfilesCheckoutStatusRetrieve>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileProfilesCheckoutStatusRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof profileProfilesCheckoutStatusRetrieve>>,
          TError,
          Awaited<ReturnType<typeof profileProfilesCheckoutStatusRetrieve>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useProfileProfilesCheckoutStatusRetrieve<TData = Awaited<ReturnType<typeof profileProfilesCheckoutStatusRetrieve>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileProfilesCheckoutStatusRetrieve>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useProfileProfilesCheckoutStatusRetrieve<TData = Awaited<ReturnType<typeof profileProfilesCheckoutStatusRetrieve>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileProfilesCheckoutStatusRetrieve>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getProfileProfilesCheckoutStatusRetrieveQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const profileProfilesMeRetrieve = (
    
 signal?: AbortSignal
) => {
      
      
      return shopInstance<Profile>(
      {url: `/api/profile/profiles/me/`, method: 'GET', signal
    },
      );
    }
  

export const getProfileProfilesMeRetrieveQueryKey = () => {
    return [`/api/profile/profiles/me/`] as const;
    }

    
export const getProfileProfilesMeRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof profileProfilesMeRetrieve>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileProfilesMeRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getProfileProfilesMeRetrieveQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof profileProfilesMeRetrieve>>> = ({ signal }) => profileProfilesMeRetrieve(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof profileProfilesMeRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ProfileProfilesMeRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof profileProfilesMeRetrieve>>>
export type ProfileProfilesMeRetrieveQueryError = ErrorType<unknown>


export function useProfileProfilesMeRetrieve<TData = Awaited<ReturnType<typeof profileProfilesMeRetrieve>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileProfilesMeRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof profileProfilesMeRetrieve>>,
          TError,
          Awaited<ReturnType<typeof profileProfilesMeRetrieve>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useProfileProfilesMeRetrieve<TData = Awaited<ReturnType<typeof profileProfilesMeRetrieve>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileProfilesMeRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof profileProfilesMeRetrieve>>,
          TError,
          Awaited<ReturnType<typeof profileProfilesMeRetrieve>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useProfileProfilesMeRetrieve<TData = Awaited<ReturnType<typeof profileProfilesMeRetrieve>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileProfilesMeRetrieve>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useProfileProfilesMeRetrieve<TData = Awaited<ReturnType<typeof profileProfilesMeRetrieve>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof profileProfilesMeRetrieve>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getProfileProfilesMeRetrieveQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const profileProfilesMePartialUpdate = (
    patchedProfile: BodyType<NonReadonly<PatchedProfile>>,
 ) => {
      
      
      return shopInstance<Profile>(
      {url: `/api/profile/profiles/me/`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedProfile
    },
      );
    }
  


export const getProfileProfilesMePartialUpdateMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof profileProfilesMePartialUpdate>>, TError,{data: BodyType<NonReadonly<PatchedProfile>>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof profileProfilesMePartialUpdate>>, TError,{data: BodyType<NonReadonly<PatchedProfile>>}, TContext> => {

const mutationKey = ['profileProfilesMePartialUpdate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof profileProfilesMePartialUpdate>>, {data: BodyType<NonReadonly<PatchedProfile>>}> = (props) => {
          const {data} = props ?? {};

          return  profileProfilesMePartialUpdate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ProfileProfilesMePartialUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof profileProfilesMePartialUpdate>>>
    export type ProfileProfilesMePartialUpdateMutationBody = BodyType<NonReadonly<PatchedProfile>>
    export type ProfileProfilesMePartialUpdateMutationError = ErrorType<unknown>

    export const useProfileProfilesMePartialUpdate = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof profileProfilesMePartialUpdate>>, TError,{data: BodyType<NonReadonly<PatchedProfile>>}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof profileProfilesMePartialUpdate>>,
        TError,
        {data: BodyType<NonReadonly<PatchedProfile>>},
        TContext
      > => {

      const mutationOptions = getProfileProfilesMePartialUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    