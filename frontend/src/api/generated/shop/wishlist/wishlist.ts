/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * ShopDjango API
 * API for ShopDjango project
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CatalogWishlistListParams,
  PatchedWishlistItem,
  WishlistCheck,
  WishlistItem,
  WishlistItemCreate
} from '.././schemas';

import { shopInstance } from '../../../shop-mutator';
import type { ErrorType , BodyType } from '../../../shop-mutator';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;





/**
 * List all wishlist items for the current user
 */
export const catalogWishlistList = (
    params?: CatalogWishlistListParams,
 signal?: AbortSignal
) => {
      
      
      return shopInstance<WishlistItem[]>(
      {url: `/api/catalog/wishlist/`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getCatalogWishlistListQueryKey = (params?: CatalogWishlistListParams,) => {
    return [`/api/catalog/wishlist/`, ...(params ? [params]: [])] as const;
    }

    
export const getCatalogWishlistListQueryOptions = <TData = Awaited<ReturnType<typeof catalogWishlistList>>, TError = ErrorType<unknown>>(params?: CatalogWishlistListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogWishlistList>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCatalogWishlistListQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof catalogWishlistList>>> = ({ signal }) => catalogWishlistList(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof catalogWishlistList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CatalogWishlistListQueryResult = NonNullable<Awaited<ReturnType<typeof catalogWishlistList>>>
export type CatalogWishlistListQueryError = ErrorType<unknown>


export function useCatalogWishlistList<TData = Awaited<ReturnType<typeof catalogWishlistList>>, TError = ErrorType<unknown>>(
 params: undefined |  CatalogWishlistListParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogWishlistList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof catalogWishlistList>>,
          TError,
          Awaited<ReturnType<typeof catalogWishlistList>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCatalogWishlistList<TData = Awaited<ReturnType<typeof catalogWishlistList>>, TError = ErrorType<unknown>>(
 params?: CatalogWishlistListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogWishlistList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof catalogWishlistList>>,
          TError,
          Awaited<ReturnType<typeof catalogWishlistList>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCatalogWishlistList<TData = Awaited<ReturnType<typeof catalogWishlistList>>, TError = ErrorType<unknown>>(
 params?: CatalogWishlistListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogWishlistList>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useCatalogWishlistList<TData = Awaited<ReturnType<typeof catalogWishlistList>>, TError = ErrorType<unknown>>(
 params?: CatalogWishlistListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogWishlistList>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCatalogWishlistListQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Create a new wishlist item
 */
export const catalogWishlistCreate = (
    wishlistItemCreate: BodyType<WishlistItemCreate>,
 signal?: AbortSignal
) => {
      
      
      return shopInstance<WishlistItem>(
      {url: `/api/catalog/wishlist/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: wishlistItemCreate, signal
    },
      );
    }
  


export const getCatalogWishlistCreateMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof catalogWishlistCreate>>, TError,{data: BodyType<WishlistItemCreate>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof catalogWishlistCreate>>, TError,{data: BodyType<WishlistItemCreate>}, TContext> => {

const mutationKey = ['catalogWishlistCreate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof catalogWishlistCreate>>, {data: BodyType<WishlistItemCreate>}> = (props) => {
          const {data} = props ?? {};

          return  catalogWishlistCreate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CatalogWishlistCreateMutationResult = NonNullable<Awaited<ReturnType<typeof catalogWishlistCreate>>>
    export type CatalogWishlistCreateMutationBody = BodyType<WishlistItemCreate>
    export type CatalogWishlistCreateMutationError = ErrorType<unknown>

    export const useCatalogWishlistCreate = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof catalogWishlistCreate>>, TError,{data: BodyType<WishlistItemCreate>}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof catalogWishlistCreate>>,
        TError,
        {data: BodyType<WishlistItemCreate>},
        TContext
      > => {

      const mutationOptions = getCatalogWishlistCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Retrieve a specific wishlist item
 */
export const catalogWishlistRetrieve = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return shopInstance<WishlistItem>(
      {url: `/api/catalog/wishlist/${id}/`, method: 'GET', signal
    },
      );
    }
  

export const getCatalogWishlistRetrieveQueryKey = (id: string,) => {
    return [`/api/catalog/wishlist/${id}/`] as const;
    }

    
export const getCatalogWishlistRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof catalogWishlistRetrieve>>, TError = ErrorType<unknown>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogWishlistRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCatalogWishlistRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof catalogWishlistRetrieve>>> = ({ signal }) => catalogWishlistRetrieve(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof catalogWishlistRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CatalogWishlistRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof catalogWishlistRetrieve>>>
export type CatalogWishlistRetrieveQueryError = ErrorType<unknown>


export function useCatalogWishlistRetrieve<TData = Awaited<ReturnType<typeof catalogWishlistRetrieve>>, TError = ErrorType<unknown>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogWishlistRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof catalogWishlistRetrieve>>,
          TError,
          Awaited<ReturnType<typeof catalogWishlistRetrieve>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCatalogWishlistRetrieve<TData = Awaited<ReturnType<typeof catalogWishlistRetrieve>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogWishlistRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof catalogWishlistRetrieve>>,
          TError,
          Awaited<ReturnType<typeof catalogWishlistRetrieve>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCatalogWishlistRetrieve<TData = Awaited<ReturnType<typeof catalogWishlistRetrieve>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogWishlistRetrieve>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useCatalogWishlistRetrieve<TData = Awaited<ReturnType<typeof catalogWishlistRetrieve>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogWishlistRetrieve>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCatalogWishlistRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Update a wishlist item
 */
export const catalogWishlistUpdate = (
    id: string,
    wishlistItem: BodyType<NonReadonly<WishlistItem>>,
 ) => {
      
      
      return shopInstance<WishlistItem>(
      {url: `/api/catalog/wishlist/${id}/`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: wishlistItem
    },
      );
    }
  


export const getCatalogWishlistUpdateMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof catalogWishlistUpdate>>, TError,{id: string;data: BodyType<NonReadonly<WishlistItem>>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof catalogWishlistUpdate>>, TError,{id: string;data: BodyType<NonReadonly<WishlistItem>>}, TContext> => {

const mutationKey = ['catalogWishlistUpdate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof catalogWishlistUpdate>>, {id: string;data: BodyType<NonReadonly<WishlistItem>>}> = (props) => {
          const {id,data} = props ?? {};

          return  catalogWishlistUpdate(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CatalogWishlistUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof catalogWishlistUpdate>>>
    export type CatalogWishlistUpdateMutationBody = BodyType<NonReadonly<WishlistItem>>
    export type CatalogWishlistUpdateMutationError = ErrorType<unknown>

    export const useCatalogWishlistUpdate = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof catalogWishlistUpdate>>, TError,{id: string;data: BodyType<NonReadonly<WishlistItem>>}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof catalogWishlistUpdate>>,
        TError,
        {id: string;data: BodyType<NonReadonly<WishlistItem>>},
        TContext
      > => {

      const mutationOptions = getCatalogWishlistUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Partially update a wishlist item
 */
export const catalogWishlistPartialUpdate = (
    id: string,
    patchedWishlistItem: BodyType<NonReadonly<PatchedWishlistItem>>,
 ) => {
      
      
      return shopInstance<WishlistItem>(
      {url: `/api/catalog/wishlist/${id}/`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedWishlistItem
    },
      );
    }
  


export const getCatalogWishlistPartialUpdateMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof catalogWishlistPartialUpdate>>, TError,{id: string;data: BodyType<NonReadonly<PatchedWishlistItem>>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof catalogWishlistPartialUpdate>>, TError,{id: string;data: BodyType<NonReadonly<PatchedWishlistItem>>}, TContext> => {

const mutationKey = ['catalogWishlistPartialUpdate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof catalogWishlistPartialUpdate>>, {id: string;data: BodyType<NonReadonly<PatchedWishlistItem>>}> = (props) => {
          const {id,data} = props ?? {};

          return  catalogWishlistPartialUpdate(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CatalogWishlistPartialUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof catalogWishlistPartialUpdate>>>
    export type CatalogWishlistPartialUpdateMutationBody = BodyType<NonReadonly<PatchedWishlistItem>>
    export type CatalogWishlistPartialUpdateMutationError = ErrorType<unknown>

    export const useCatalogWishlistPartialUpdate = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof catalogWishlistPartialUpdate>>, TError,{id: string;data: BodyType<NonReadonly<PatchedWishlistItem>>}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof catalogWishlistPartialUpdate>>,
        TError,
        {id: string;data: BodyType<NonReadonly<PatchedWishlistItem>>},
        TContext
      > => {

      const mutationOptions = getCatalogWishlistPartialUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Delete a wishlist item
 */
export const catalogWishlistDestroy = (
    id: string,
 ) => {
      
      
      return shopInstance<void>(
      {url: `/api/catalog/wishlist/${id}/`, method: 'DELETE'
    },
      );
    }
  


export const getCatalogWishlistDestroyMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof catalogWishlistDestroy>>, TError,{id: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof catalogWishlistDestroy>>, TError,{id: string}, TContext> => {

const mutationKey = ['catalogWishlistDestroy'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof catalogWishlistDestroy>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  catalogWishlistDestroy(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CatalogWishlistDestroyMutationResult = NonNullable<Awaited<ReturnType<typeof catalogWishlistDestroy>>>
    
    export type CatalogWishlistDestroyMutationError = ErrorType<unknown>

    export const useCatalogWishlistDestroy = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof catalogWishlistDestroy>>, TError,{id: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof catalogWishlistDestroy>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getCatalogWishlistDestroyMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Check if a product is in wishlist
 */
export const catalogWishlistCheckRetrieve = (
    productId: number,
 signal?: AbortSignal
) => {
      
      
      return shopInstance<WishlistCheck>(
      {url: `/api/catalog/wishlist/check/${productId}/`, method: 'GET', signal
    },
      );
    }
  

export const getCatalogWishlistCheckRetrieveQueryKey = (productId: number,) => {
    return [`/api/catalog/wishlist/check/${productId}/`] as const;
    }

    
export const getCatalogWishlistCheckRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof catalogWishlistCheckRetrieve>>, TError = ErrorType<unknown>>(productId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogWishlistCheckRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCatalogWishlistCheckRetrieveQueryKey(productId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof catalogWishlistCheckRetrieve>>> = ({ signal }) => catalogWishlistCheckRetrieve(productId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(productId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof catalogWishlistCheckRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CatalogWishlistCheckRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof catalogWishlistCheckRetrieve>>>
export type CatalogWishlistCheckRetrieveQueryError = ErrorType<unknown>


export function useCatalogWishlistCheckRetrieve<TData = Awaited<ReturnType<typeof catalogWishlistCheckRetrieve>>, TError = ErrorType<unknown>>(
 productId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogWishlistCheckRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof catalogWishlistCheckRetrieve>>,
          TError,
          Awaited<ReturnType<typeof catalogWishlistCheckRetrieve>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCatalogWishlistCheckRetrieve<TData = Awaited<ReturnType<typeof catalogWishlistCheckRetrieve>>, TError = ErrorType<unknown>>(
 productId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogWishlistCheckRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof catalogWishlistCheckRetrieve>>,
          TError,
          Awaited<ReturnType<typeof catalogWishlistCheckRetrieve>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCatalogWishlistCheckRetrieve<TData = Awaited<ReturnType<typeof catalogWishlistCheckRetrieve>>, TError = ErrorType<unknown>>(
 productId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogWishlistCheckRetrieve>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useCatalogWishlistCheckRetrieve<TData = Awaited<ReturnType<typeof catalogWishlistCheckRetrieve>>, TError = ErrorType<unknown>>(
 productId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof catalogWishlistCheckRetrieve>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCatalogWishlistCheckRetrieveQueryOptions(productId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



