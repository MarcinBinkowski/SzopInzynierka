/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * ShopDjango API
 * API for ShopDjango project
 * OpenAPI spec version: 1.0.0
 */
import {
  z as zod
} from 'zod';


/**
 * List notification history
 */
export const catalogNotificationsHistoryListQueryParams = zod.object({
  "ordering": zod.coerce.string().optional().describe('Which field to use when ordering the results.'),
  "page": zod.coerce.number().optional().describe('A page number within the paginated result set.'),
  "page_size": zod.coerce.number().optional().describe('Number of results to return per page.'),
  "search": zod.coerce.string().optional().describe('A search term.')
})

export const catalogNotificationsHistoryListResponseResultsItemTitleMax = 255;


export const catalogNotificationsHistoryListResponse = zod.object({
  "count": zod.number(),
  "next": zod.string().url().nullish(),
  "previous": zod.string().url().nullish(),
  "results": zod.array(zod.object({
  "id": zod.number(),
  "product": zod.number().describe('Product the notification was about'),
  "product_name": zod.string(),
  "product_image": zod.string(),
  "notification_type": zod.enum(['stock_available', 'price_drop']).describe('* `stock_available` - Stock Available\n* `price_drop` - Price Drop').describe('Type of notification sent\n\n* `stock_available` - Stock Available\n* `price_drop` - Price Drop'),
  "title": zod.string().max(catalogNotificationsHistoryListResponseResultsItemTitleMax).describe('Notification title'),
  "body": zod.string().describe('Notification body text'),
  "created_at": zod.string().datetime({}).describe('Timestamp when the record was created')
}).describe('Serializer for NotificationHistory model.'))
})

/**
 * Get specific notification from history
 */
export const catalogNotificationsHistoryRetrieveParams = zod.object({
  "id": zod.coerce.string()
})

export const catalogNotificationsHistoryRetrieveResponse = zod.object({
  "id": zod.number(),
  "stock_alerts_enabled": zod.boolean().optional().describe('Receive alerts when out-of-stock wishlist items become available'),
  "price_drop_alerts_enabled": zod.boolean().optional().describe('Receive alerts when wishlist items go on sale'),
  "created_at": zod.string().datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.string().datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for NotificationPreference model.')

/**
 * Get current user's notification preferences
 */
export const catalogNotificationsPreferencesRetrieveParams = zod.object({
  "id": zod.coerce.string()
})

export const catalogNotificationsPreferencesRetrieveResponse = zod.object({
  "id": zod.number(),
  "stock_alerts_enabled": zod.boolean().optional().describe('Receive alerts when out-of-stock wishlist items become available'),
  "price_drop_alerts_enabled": zod.boolean().optional().describe('Receive alerts when wishlist items go on sale'),
  "created_at": zod.string().datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.string().datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for NotificationPreference model.')

/**
 * Update notification preferences
 */
export const catalogNotificationsPreferencesPartialUpdateParams = zod.object({
  "id": zod.coerce.string()
})

export const catalogNotificationsPreferencesPartialUpdateBody = zod.object({
  "stock_alerts_enabled": zod.boolean().optional().describe('Receive alerts when out-of-stock wishlist items become available'),
  "price_drop_alerts_enabled": zod.boolean().optional().describe('Receive alerts when wishlist items go on sale')
}).describe('Serializer for updating notification preferences.')

export const catalogNotificationsPreferencesPartialUpdateResponse = zod.object({
  "id": zod.number(),
  "stock_alerts_enabled": zod.boolean().optional().describe('Receive alerts when out-of-stock wishlist items become available'),
  "price_drop_alerts_enabled": zod.boolean().optional().describe('Receive alerts when wishlist items go on sale'),
  "created_at": zod.string().datetime({}).describe('Timestamp when the record was created'),
  "updated_at": zod.string().datetime({}).describe('Timestamp when the record was last updated')
}).describe('Serializer for NotificationPreference model.')

