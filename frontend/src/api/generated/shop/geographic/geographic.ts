/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * ShopDjango API
 * API for ShopDjango project
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  Country,
  CountryCreate,
  CountryList,
  CountryUpdate,
  GeographicCountriesListParams,
  PatchedCountryUpdate
} from '.././schemas';

import { shopInstance } from '../../../shop-mutator';
import type { ErrorType , BodyType } from '../../../shop-mutator';




/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const geographicCountriesList = (
    params?: GeographicCountriesListParams,
 signal?: AbortSignal
) => {
      
      
      return shopInstance<CountryList[]>(
      {url: `/api/geographic/countries/`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGeographicCountriesListQueryKey = (params?: GeographicCountriesListParams,) => {
    return [`/api/geographic/countries/`, ...(params ? [params]: [])] as const;
    }

    
export const getGeographicCountriesListQueryOptions = <TData = Awaited<ReturnType<typeof geographicCountriesList>>, TError = ErrorType<unknown>>(params?: GeographicCountriesListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof geographicCountriesList>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGeographicCountriesListQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof geographicCountriesList>>> = ({ signal }) => geographicCountriesList(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof geographicCountriesList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GeographicCountriesListQueryResult = NonNullable<Awaited<ReturnType<typeof geographicCountriesList>>>
export type GeographicCountriesListQueryError = ErrorType<unknown>


export function useGeographicCountriesList<TData = Awaited<ReturnType<typeof geographicCountriesList>>, TError = ErrorType<unknown>>(
 params: undefined |  GeographicCountriesListParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof geographicCountriesList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof geographicCountriesList>>,
          TError,
          Awaited<ReturnType<typeof geographicCountriesList>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGeographicCountriesList<TData = Awaited<ReturnType<typeof geographicCountriesList>>, TError = ErrorType<unknown>>(
 params?: GeographicCountriesListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof geographicCountriesList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof geographicCountriesList>>,
          TError,
          Awaited<ReturnType<typeof geographicCountriesList>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGeographicCountriesList<TData = Awaited<ReturnType<typeof geographicCountriesList>>, TError = ErrorType<unknown>>(
 params?: GeographicCountriesListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof geographicCountriesList>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGeographicCountriesList<TData = Awaited<ReturnType<typeof geographicCountriesList>>, TError = ErrorType<unknown>>(
 params?: GeographicCountriesListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof geographicCountriesList>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGeographicCountriesListQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const geographicCountriesCreate = (
    countryCreate: BodyType<CountryCreate>,
 signal?: AbortSignal
) => {
      
      
      return shopInstance<CountryCreate>(
      {url: `/api/geographic/countries/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: countryCreate, signal
    },
      );
    }
  


export const getGeographicCountriesCreateMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof geographicCountriesCreate>>, TError,{data: BodyType<CountryCreate>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof geographicCountriesCreate>>, TError,{data: BodyType<CountryCreate>}, TContext> => {

const mutationKey = ['geographicCountriesCreate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof geographicCountriesCreate>>, {data: BodyType<CountryCreate>}> = (props) => {
          const {data} = props ?? {};

          return  geographicCountriesCreate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GeographicCountriesCreateMutationResult = NonNullable<Awaited<ReturnType<typeof geographicCountriesCreate>>>
    export type GeographicCountriesCreateMutationBody = BodyType<CountryCreate>
    export type GeographicCountriesCreateMutationError = ErrorType<unknown>

    export const useGeographicCountriesCreate = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof geographicCountriesCreate>>, TError,{data: BodyType<CountryCreate>}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof geographicCountriesCreate>>,
        TError,
        {data: BodyType<CountryCreate>},
        TContext
      > => {

      const mutationOptions = getGeographicCountriesCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const geographicCountriesRetrieve = (
    id: number,
 signal?: AbortSignal
) => {
      
      
      return shopInstance<Country>(
      {url: `/api/geographic/countries/${id}/`, method: 'GET', signal
    },
      );
    }
  

export const getGeographicCountriesRetrieveQueryKey = (id: number,) => {
    return [`/api/geographic/countries/${id}/`] as const;
    }

    
export const getGeographicCountriesRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof geographicCountriesRetrieve>>, TError = ErrorType<unknown>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof geographicCountriesRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGeographicCountriesRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof geographicCountriesRetrieve>>> = ({ signal }) => geographicCountriesRetrieve(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof geographicCountriesRetrieve>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GeographicCountriesRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof geographicCountriesRetrieve>>>
export type GeographicCountriesRetrieveQueryError = ErrorType<unknown>


export function useGeographicCountriesRetrieve<TData = Awaited<ReturnType<typeof geographicCountriesRetrieve>>, TError = ErrorType<unknown>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof geographicCountriesRetrieve>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof geographicCountriesRetrieve>>,
          TError,
          Awaited<ReturnType<typeof geographicCountriesRetrieve>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGeographicCountriesRetrieve<TData = Awaited<ReturnType<typeof geographicCountriesRetrieve>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof geographicCountriesRetrieve>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof geographicCountriesRetrieve>>,
          TError,
          Awaited<ReturnType<typeof geographicCountriesRetrieve>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGeographicCountriesRetrieve<TData = Awaited<ReturnType<typeof geographicCountriesRetrieve>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof geographicCountriesRetrieve>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGeographicCountriesRetrieve<TData = Awaited<ReturnType<typeof geographicCountriesRetrieve>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof geographicCountriesRetrieve>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGeographicCountriesRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const geographicCountriesUpdate = (
    id: number,
    countryUpdate: BodyType<CountryUpdate>,
 ) => {
      
      
      return shopInstance<CountryUpdate>(
      {url: `/api/geographic/countries/${id}/`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: countryUpdate
    },
      );
    }
  


export const getGeographicCountriesUpdateMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof geographicCountriesUpdate>>, TError,{id: number;data: BodyType<CountryUpdate>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof geographicCountriesUpdate>>, TError,{id: number;data: BodyType<CountryUpdate>}, TContext> => {

const mutationKey = ['geographicCountriesUpdate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof geographicCountriesUpdate>>, {id: number;data: BodyType<CountryUpdate>}> = (props) => {
          const {id,data} = props ?? {};

          return  geographicCountriesUpdate(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GeographicCountriesUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof geographicCountriesUpdate>>>
    export type GeographicCountriesUpdateMutationBody = BodyType<CountryUpdate>
    export type GeographicCountriesUpdateMutationError = ErrorType<unknown>

    export const useGeographicCountriesUpdate = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof geographicCountriesUpdate>>, TError,{id: number;data: BodyType<CountryUpdate>}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof geographicCountriesUpdate>>,
        TError,
        {id: number;data: BodyType<CountryUpdate>},
        TContext
      > => {

      const mutationOptions = getGeographicCountriesUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Base ViewSet with built-in ProtectedError handling for delete operations.
All ViewSets should inherit from this instead of ModelViewSet directly.
 */
export const geographicCountriesPartialUpdate = (
    id: number,
    patchedCountryUpdate: BodyType<PatchedCountryUpdate>,
 ) => {
      
      
      return shopInstance<CountryUpdate>(
      {url: `/api/geographic/countries/${id}/`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedCountryUpdate
    },
      );
    }
  


export const getGeographicCountriesPartialUpdateMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof geographicCountriesPartialUpdate>>, TError,{id: number;data: BodyType<PatchedCountryUpdate>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof geographicCountriesPartialUpdate>>, TError,{id: number;data: BodyType<PatchedCountryUpdate>}, TContext> => {

const mutationKey = ['geographicCountriesPartialUpdate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof geographicCountriesPartialUpdate>>, {id: number;data: BodyType<PatchedCountryUpdate>}> = (props) => {
          const {id,data} = props ?? {};

          return  geographicCountriesPartialUpdate(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GeographicCountriesPartialUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof geographicCountriesPartialUpdate>>>
    export type GeographicCountriesPartialUpdateMutationBody = BodyType<PatchedCountryUpdate>
    export type GeographicCountriesPartialUpdateMutationError = ErrorType<unknown>

    export const useGeographicCountriesPartialUpdate = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof geographicCountriesPartialUpdate>>, TError,{id: number;data: BodyType<PatchedCountryUpdate>}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof geographicCountriesPartialUpdate>>,
        TError,
        {id: number;data: BodyType<PatchedCountryUpdate>},
        TContext
      > => {

      const mutationOptions = getGeographicCountriesPartialUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Handle deletion with foreign key constraint protection.
 */
export const geographicCountriesDestroy = (
    id: number,
 ) => {
      
      
      return shopInstance<unknown>(
      {url: `/api/geographic/countries/${id}/`, method: 'DELETE'
    },
      );
    }
  


export const getGeographicCountriesDestroyMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof geographicCountriesDestroy>>, TError,{id: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof geographicCountriesDestroy>>, TError,{id: number}, TContext> => {

const mutationKey = ['geographicCountriesDestroy'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof geographicCountriesDestroy>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  geographicCountriesDestroy(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GeographicCountriesDestroyMutationResult = NonNullable<Awaited<ReturnType<typeof geographicCountriesDestroy>>>
    
    export type GeographicCountriesDestroyMutationError = ErrorType<unknown>

    export const useGeographicCountriesDestroy = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof geographicCountriesDestroy>>, TError,{id: number}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof geographicCountriesDestroy>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getGeographicCountriesDestroyMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    